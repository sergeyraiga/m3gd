// Generated by Haxe 3.3.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["com"] = $hx_exports["com"] || {};
$hx_exports["com"]["sq"] = $hx_exports["com"]["sq"] || {};
$hx_exports["com"]["sq"]["m3lib"] = $hx_exports["com"]["sq"]["m3lib"] || {};
$hx_exports["com"]["sq"]["m3lib"]["bot"] = $hx_exports["com"]["sq"]["m3lib"]["bot"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
Math.__name__ = true;
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
var com_sq_m3lib_CheatFactory = function(gameEngine) {
	this.inited = false;
	this._gameEngine = gameEngine;
};
$hxClasses["com.sq.m3lib.CheatFactory"] = com_sq_m3lib_CheatFactory;
com_sq_m3lib_CheatFactory.__name__ = true;
com_sq_m3lib_CheatFactory.prototype = {
	init: function() {
		this.inited = true;
	}
	,reset: function() {
		this.inited = false;
	}
	,win: function() {
		if(!this.inited) {
			com_sq_m3lib_log_CoreLog.log("CoreError_CHEAT_FACTORY_DISABLED");
			return;
		}
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreEvent("CheatActivated",{ type : com_sq_m3lib_CheatType.WIN}));
		var targets = this._gameEngine.targetsManager.getTargets();
		var i = targets.length;
		while(--i >= 0) {
			var tmp = targets[i].getTargetCount();
			targets[i].setProgeress(tmp);
		}
		this._gameEngine.board.unstabilize();
	}
	,lose: function() {
		if(!this.inited) {
			com_sq_m3lib_log_CoreLog.log("CoreError_CHEAT_FACTORY_DISABLED");
			return;
		}
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreEvent("CheatActivated",{ type : com_sq_m3lib_CheatType.LOSE}));
		this._gameEngine.targetsManager.setMovesDone(this._gameEngine.targetsManager.targetMoves);
	}
	,setMoves: function(val) {
		if(!this.inited) {
			com_sq_m3lib_log_CoreLog.log("CoreError_CHEAT_FACTORY_DISABLED");
			return;
		}
		if(val <= 0) {
			com_sq_m3lib_log_CoreLog.log("CoreError_CHEAT_FACTORY_WRONG_MOVES");
			return;
		}
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreEvent("CheatActivated",{ type : com_sq_m3lib_CheatType.MOVES, count : val}));
		this._gameEngine.targetsManager.setMovesDone(this._gameEngine.targetsManager.targetMoves - val);
	}
	,__class__: com_sq_m3lib_CheatFactory
};
var com_sq_m3lib_CheatType = { __ename__ : true, __constructs__ : ["WIN","LOSE","MOVES"] };
com_sq_m3lib_CheatType.WIN = ["WIN",0];
com_sq_m3lib_CheatType.WIN.toString = $estr;
com_sq_m3lib_CheatType.WIN.__enum__ = com_sq_m3lib_CheatType;
com_sq_m3lib_CheatType.LOSE = ["LOSE",1];
com_sq_m3lib_CheatType.LOSE.toString = $estr;
com_sq_m3lib_CheatType.LOSE.__enum__ = com_sq_m3lib_CheatType;
com_sq_m3lib_CheatType.MOVES = ["MOVES",2];
com_sq_m3lib_CheatType.MOVES.toString = $estr;
com_sq_m3lib_CheatType.MOVES.__enum__ = com_sq_m3lib_CheatType;
var com_sq_m3lib_GameEngine = function() {
	this.board = new com_sq_m3lib_board_Board(this);
	this.comboFactory = new com_sq_m3lib_board_combinations_ComboFinderFactory(this);
	this.itemsFactory = new com_sq_m3lib_board_ItemsFactory(this);
	this.blockersFactory = new com_sq_m3lib_board_BlockersFactory(this);
	this.spawnFactory = new com_sq_m3lib_board_spawners_SpawnFactory(this);
	this.scoreFactory = new com_sq_m3lib_board_ScoreFactory(this);
	this.destroyFactory = new com_sq_m3lib_board_ItemsDestroyFactory(this);
	this.targetsManager = new com_sq_m3lib_game_gameTargets_GameTargetsManger(this);
	this.gravityChangeFactory = new com_sq_m3lib_board_GravityChangeFactory(this);
	this.collectablesManager = new com_sq_m3lib_board_CollectableItemsManager(this);
	this.hiddenObjectsManager = new com_sq_m3lib_board_HiddenObjectsManager(this);
	this.boosterFactory = new com_sq_m3lib_board_boosters_BoostersFactory(this);
	this.viralBlockerManager = new com_sq_m3lib_board_ViralBlockerManager(this);
	this.captureManager = new com_sq_m3lib_board_CaptureCellsManager(this);
	this.cheatFactory = new com_sq_m3lib_CheatFactory(this);
};
$hxClasses["com.sq.m3lib.GameEngine"] = com_sq_m3lib_GameEngine;
com_sq_m3lib_GameEngine.__name__ = true;
com_sq_m3lib_GameEngine.prototype = {
	init: function(coreParams) {
		this.prepare(coreParams);
	}
	,initFromJSON: function(source) {
		this.init(com_sq_m3lib_coreSettings_CoreSettings.getConfigFromJson(source));
	}
	,prepare: function(coreParams) {
		var params = new com_sq_m3lib_game_GameParams();
		params.parseFromSettings(coreParams);
		this.setupGameParams(params);
	}
	,setupGameParams: function(params,speed,diagonalSpeed) {
		if(diagonalSpeed == null) {
			diagonalSpeed = 0;
		}
		if(speed == null) {
			speed = 0;
		}
		this.removeListeners();
		this.gameParams = params;
		this.comboFactory.loadTemplates(this.gameParams.combinations,this.gameParams.specialCombinations);
		this.destroyFactory.loadActivationRules(this.gameParams.blockersActivationRule);
		this.viralBlockerManager.loadPriorityRules(this.gameParams.viralPriorityRules,this.gameParams.viralIncreaseProbability);
		this.board.setupGameParams(params);
		com_sq_m3lib_board_ScoreDictionary.loadConfig(params.itemScore);
		if(speed > 0 && diagonalSpeed > 0) {
			this.setSpeed(speed,diagonalSpeed);
		}
	}
	,setSpeed: function(speed,diagonalSpeed) {
		com_sq_m3lib_board_ItemMoveFactory.setSpeed(speed,diagonalSpeed);
	}
	,loadLevelConfig: function(levelConfig,seed,cheats,startBoosters) {
		if(cheats == null) {
			cheats = true;
		}
		if(seed == null) {
			com_sq_m3lib_core_Mersenne.getInstance().randomizeSeed();
		} else {
			com_sq_m3lib_core_Mersenne.getInstance().setSeed(seed);
		}
		this._currentLevelConfig = levelConfig;
		com_sq_m3lib_log_CoreEventLogger.init(this);
		com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.levelStarted(com_sq_m3lib_core_Mersenne.getInstance().getSeed()));
		this.itemsFactory.init(levelConfig);
		this.board.loadBoardConfig(levelConfig);
		this.spawnFactory.initSpawners(levelConfig);
		this.targetsManager.loadConfig(levelConfig);
		this.boosterFactory.initBoosters();
		this.boosterFactory.setApplyQueue(startBoosters);
		if(cheats) {
			this.cheatFactory.init();
		}
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreEvent(com_sq_m3lib_events_CoreEventDispatcher.LEVEL_LOADED,{ }));
	}
	,getLevelConfig: function() {
		return this._currentLevelConfig;
	}
	,onLevelFinished: function() {
		this.destroyFactory.scenarioFactory.onLevelFinish();
	}
	,removeListeners: function() {
		if(this.board != null) {
			this.board.removeListeners();
		}
		if(this.targetsManager != null) {
			this.targetsManager.removeListeners();
		}
		if(this.destroyFactory != null) {
			this.destroyFactory.reset();
		}
		if(this.comboFactory != null) {
			this.comboFactory.resetOnMove();
		}
		if(this.gravityChangeFactory != null) {
			this.gravityChangeFactory.removeListeners();
		}
		if(this.collectablesManager != null) {
			this.collectablesManager.removeListeners();
		}
		if(this.hiddenObjectsManager != null) {
			this.hiddenObjectsManager.removeListeners();
		}
		if(this.captureManager != null) {
			this.captureManager.removeListeners();
		}
		this.spawnFactory.removeListeners();
		this.boosterFactory.reset();
		this.comboFactory.reset();
		this.scoreFactory.reset();
		this.cheatFactory.reset();
	}
	,free: function() {
		this.scoreFactory.free();
		this.viralBlockerManager.free();
		this.destroyFactory.free();
		this.spawnFactory.removeListeners();
		this.comboFactory.free();
		this.removeListeners();
		this.gameParams = null;
		this._currentLevelConfig = null;
		this.board = null;
		this.targetsManager = null;
		this.destroyFactory = null;
		this.comboFactory = null;
		this.gravityChangeFactory = null;
		this.collectablesManager = null;
		this.hiddenObjectsManager = null;
		this.captureManager = null;
		this.scoreFactory = null;
		this.viralBlockerManager = null;
		this.itemsFactory = null;
		this.blockersFactory = null;
		this.spawnFactory = null;
		this.boosterFactory = null;
		com_sq_m3lib_log_CoreEventLogger.free();
	}
	,addExtraMoves: function(val,extraBoosters) {
		this.targetsManager.addExtraMoves(val);
		this.boosterFactory.initBoosters();
		this.boosterFactory.setApplyQueue(extraBoosters);
		this.board.unstabilize();
	}
	,getGameParams: function() {
		return this.gameParams;
	}
	,__class__: com_sq_m3lib_GameEngine
};
var com_sq_m3lib_board_BaseBoardAnimatedObject = function() {
	this.viewAnimationProgress = 0;
	this.viewAnimationEnd = 0;
};
$hxClasses["com.sq.m3lib.board.BaseBoardAnimatedObject"] = com_sq_m3lib_board_BaseBoardAnimatedObject;
com_sq_m3lib_board_BaseBoardAnimatedObject.__name__ = true;
com_sq_m3lib_board_BaseBoardAnimatedObject.prototype = {
	setAnimationLength: function(val) {
		if(!this.isAnimationStable()) {
			return;
		}
		this.viewAnimationEnd = val;
		this.viewAnimationProgress = 0;
		if(val > 0) {
			this._onTickCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreEventDispatcher.TICK,$bind(this,this.onTick),100);
		}
	}
	,onTick: function(e) {
		this.viewAnimationProgress++;
		if(this.isAnimationStable()) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreEventDispatcher.TICK,this._onTickCallback);
			this._onTickCallback = null;
			this.setAnimationLength(0);
		}
	}
	,getAnimationProgress: function() {
		return this.viewAnimationProgress;
	}
	,getAnimationLength: function() {
		return this.viewAnimationEnd;
	}
	,isAnimationStable: function() {
		return this.viewAnimationEnd <= this.viewAnimationProgress;
	}
	,getScore: function() {
		return 0;
	}
	,__class__: com_sq_m3lib_board_BaseBoardAnimatedObject
};
var com_sq_m3lib_board_BlockersFactory = function(engine) {
	this._gameEngine = engine;
};
$hxClasses["com.sq.m3lib.board.BlockersFactory"] = com_sq_m3lib_board_BlockersFactory;
com_sq_m3lib_board_BlockersFactory.__name__ = true;
com_sq_m3lib_board_BlockersFactory.prototype = {
	getBlocker: function(attributes,cell) {
		if(attributes == null) {
			return null;
		}
		var blockerAttributes = this.cloneAttributes(attributes);
		return Type.createInstance(com_sq_m3lib_board_cellBlockers_BlockersFactoryDictionary.getByAlias(blockerAttributes.className),[cell,blockerAttributes]);
	}
	,cloneAttributes: function(attributes) {
		var result = { };
		var tmp;
		var tmp1;
		if(attributes == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(attributes.__properties__) {
				tmp = attributes.__properties__["get_" + "clone"];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = attributes[tmp]();
			} else {
				tmp1 = attributes.clone;
			}
		}
		if(tmp1) {
			result = Reflect.field(attributes,"clone").apply(attributes,[]);
			return result;
		}
		var _g = 0;
		var _g1 = Reflect.fields(attributes);
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			var tmp3;
			var tmp4;
			if(attributes == null) {
				tmp4 = null;
			} else {
				var tmp5;
				if(attributes.__properties__) {
					tmp3 = attributes.__properties__["get_" + param];
					tmp5 = tmp3;
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					tmp4 = attributes[tmp3]();
				} else {
					tmp4 = attributes[param];
				}
			}
			result[param] = tmp4;
		}
		return result;
	}
	,__class__: com_sq_m3lib_board_BlockersFactory
};
var com_sq_m3lib_board_Board = function(playEngine) {
	this._stable = true;
	this.gameEngine = playEngine;
	this.borderFactory = new com_sq_m3lib_board_BorderFactory();
	this.size = new com_sq_m3lib_geometry_Size();
	this.viewPoint = new com_sq_m3lib_geometry_Coord();
	this.boardUtils = new com_sq_m3lib_board_BoardUtils(this);
};
$hxClasses["com.sq.m3lib.board.Board"] = com_sq_m3lib_board_Board;
com_sq_m3lib_board_Board.__name__ = true;
com_sq_m3lib_board_Board.prototype = {
	tryItemSwitch: function(coord,switchCoord) {
		if(!this._stable) {
			return;
		}
		this.moveFactory.switchCellByCoords(coord,switchCoord);
	}
	,onViewPortScrollFinished: function() {
		this.unstabilize();
	}
	,setupGameParams: function(params) {
		this.viewPortSize = params.viewPortSize;
	}
	,loadBoardConfig: function(levelConfig) {
		this.free();
		this.gameEngine.comboFactory.resetOnMove();
		this.setupBoardSize(levelConfig);
		this.borderFactory.init(this);
		this.createCells(levelConfig);
		this.viewPoints = new com_sq_m3lib_board_ViewPointsData(levelConfig.viewPoints);
		this.forbiddenMoves = levelConfig.forbiddenMoves;
		this.setViewPoint(this.viewPoints.getFirst(),true);
		this.moveFactory = new com_sq_m3lib_board_ItemMoveFactory();
		this.moveFactory.init(this);
		this.moveFactory.organizeCellDirection(this.cells);
		this.moveFactory.readTeleports(levelConfig.teleports);
		this._onTickCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreEventDispatcher.TICK,$bind(this,this.onTick),500);
	}
	,initViewPoints: function() {
		this.initialComboCheck();
		this.markCellsChanged();
		this.unstabilize();
	}
	,initialComboCheck: function() {
		this.gameEngine.itemsFactory.initialColorReroll(true);
		this.gameEngine.comboFactory.clearNeighbours();
	}
	,resetCellCheckParams: function() {
		var cell;
		var i = this.nonVoidCells.length;
		while(--i >= 0) {
			cell = this.nonVoidCells[i];
			cell.promissedFill = false;
			cell.noBaseFill = false;
			if(cell.wasChanged && (!cell.hasItemInCell() || cell.item.isAnimationStable())) {
				cell.wasChanged = false;
			}
		}
	}
	,findCombos: function() {
		this.gameEngine.comboFactory.findCombos();
	}
	,onTick: function(e) {
		if(this._stable) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreEvent(com_sq_m3lib_events_CoreEventDispatcher.BOARD_ALREADY_STABLE_ALARM));
			return;
		}
		var wasBlockersCount = this._viewPortBlockers.length;
		this.findCombos();
		this.resetCellCheckParams();
		this.resetItemsSpeed();
		var newComboItems = [];
		this.destroyCombos(newComboItems);
		var hasNewComboItems = newComboItems.length > 0;
		if(hasNewComboItems) {
			this.items = this.items.concat(newComboItems);
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemAddedEvent("new_items_appeared_from_combo",newComboItems));
		}
		var spawnedItems = this.gameEngine.spawnFactory.makeSpawn();
		var isSpawning = spawnedItems.length > 0;
		if(isSpawning) {
			this.items = this.items.concat(spawnedItems);
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemAddedEvent("new_items_spawned",spawnedItems));
		}
		var moveResult = this.moveFactory.moveItemsOnTick();
		if(moveResult.isMoving) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemPositionUpdatedEvent(moveResult.movedItems));
		} else if(!isSpawning && !hasNewComboItems) {
			this.stopAllItems();
		}
		if(!moveResult.isMoving && !isSpawning && this.gameEngine.destroyFactory.scenarioFactory.scenariosCompleted() && wasBlockersCount == this._viewPortBlockers.length) {
			if(!this.tryStabilize()) {
				return;
			}
			if(!this._stable) {
				return;
			}
			if(!this.gameEngine.comboFactory.hasMoveCandidates() && !this.gameEngine.targetsManager.areTargetsComplete()) {
				if(this.gameEngine.itemsFactory.shuffle()) {
					this.unstabilize();
				} else if(this.gameEngine.targetsManager.areTargetsFailed()) {
					com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreEvent(com_sq_m3lib_events_CoreEventDispatcher.BOARD_STABLE));
				}
				return;
			}
			this.resetCellCheckParams();
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreEvent(com_sq_m3lib_events_CoreEventDispatcher.BOARD_STABLE));
		}
	}
	,spawnNewBlockers: function(newBlockers) {
		var index = newBlockers.length;
		var blocker;
		var cellItem;
		var cell;
		while(--index >= 0) {
			blocker = newBlockers[index];
			cell = blocker.cell;
			if(!cell.blockerSet.hasBlocker(blocker)) {
				cell.addBlocker(blocker);
				cellItem = blocker.cell.item;
				if(!cell.canHaveItem() && cellItem != null) {
					this.gameEngine.destroyFactory.destroySingleItemNoScore(cell,cellItem,"viralBlocker");
					this.removeCellItem(cell,cellItem);
				}
				this._viewPortBlockers.push(blocker);
				this.blockers.push(blocker);
				com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreBlockerEvent("spawn_blocker",blocker));
			} else {
				cell.blockerSet.recalculateBlockerParams();
				com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreBlockerEvent("change_blocker_step",blocker));
			}
		}
		this.unstabilize();
	}
	,removeCellItem: function(cell,cellItem) {
		HxOverrides.remove(this.items,cellItem);
		if(cell != null) {
			cell.setItem(null);
		}
	}
	,removeCellBlocker: function(blocker) {
		if(blocker.cell != null) {
			blocker.cell.destroyBlocker();
			blocker.cell = null;
		}
		HxOverrides.remove(this.blockers,blocker);
		HxOverrides.remove(this._viewPortBlockers,blocker);
	}
	,removeCellCover: function(cover) {
		if(cover.cell != null) {
			cover.cell.setCellCover(null);
			cover.cell = null;
		}
		HxOverrides.remove(this.covers,cover);
	}
	,destroyCombos: function(newItems) {
		this.gameEngine.destroyFactory.makeDestruction();
		this.gameEngine.hiddenObjectsManager.checkDiscoveredObjects();
		var itemsCopy = this.items;
		var itemsLength = itemsCopy.length;
		var item;
		var newItem;
		var i = -1;
		while(++i < itemsLength) {
			item = itemsCopy[i];
			if(!item.disabled) {
				continue;
			}
			if(item.isAnimationStable()) {
				var itemCell = item.cell;
				this.removeCellItem(itemCell,item);
				--i;
				--itemsLength;
				if(item.destroyInfo != null) {
					newItem = item.destroyInfo.newItem;
				} else {
					newItem = null;
				}
				var combo = item.destroyInfo != null?item.destroyInfo.combo:null;
				if(newItem != null) {
					itemCell.setItem(newItem);
					newItem.createInfo = new com_sq_m3lib_board_CreateInfo(itemCell,combo);
					newItems.push(newItem);
					newItem.setAnimationLength(com_sq_m3lib_board_ItemAnimationFactory.getLength("simple_new_combo_item"));
					if(newItem.explodeOnBoardStabilization()) {
						this.gameEngine.destroyFactory.addItemToExplodeOnStable(newItem);
					}
				}
			}
		}
		i = this.blockers.length;
		if(i > 0) {
			var blocker;
			var blockersCopy = this.blockers;
			while(--i >= 0) {
				blocker = blockersCopy[i];
				if(!blocker.isAnimationStable()) {
					continue;
				}
				if(!blocker.isDestroyed()) {
					continue;
				}
				this.removeCellBlocker(blocker);
			}
		}
		i = this.covers.length;
		if(i > 0) {
			var cellCover;
			var coversCopy = this.covers;
			while(--i >= 0) {
				cellCover = coversCopy[i];
				if(!cellCover.isAnimationStable()) {
					continue;
				}
				if(!cellCover.isDestroyed()) {
					continue;
				}
				this.removeCellCover(cellCover);
			}
		}
	}
	,stopAllItems: function() {
		var index = this.items.length;
		var item;
		while(--index >= 0) {
			item = this.items[index];
			item.isMoving = false;
			item.speed = 0;
		}
	}
	,resetItemsSpeed: function() {
		var index = this.items.length;
		var item;
		while(--index >= 0) {
			item = this.items[index];
			if(!item.isMoving && item.speed > 0) {
				item.speed = 0;
				item.currentMoveVector = null;
			}
		}
	}
	,isAllAnimationStable: function() {
		var index = this.items.length;
		var element;
		while(--index >= 0) {
			element = this.items[index];
			if(!element.isAnimationStable()) {
				return false;
			}
		}
		index = this.blockers.length;
		while(--index >= 0) {
			element = this.blockers[index];
			if(!element.isAnimationStable()) {
				return false;
			}
		}
		index = this.covers.length;
		while(--index >= 0) {
			element = this.covers[index];
			if(!element.isAnimationStable()) {
				return false;
			}
		}
		return true;
	}
	,hasChangedCells: function() {
		var cell;
		var width = this._viewPortNonVoidCells.length;
		var i = -1;
		while(++i < width) {
			cell = this._viewPortNonVoidCells[i];
			if(cell.wasChanged) {
				return true;
			}
		}
		return false;
	}
	,setupBoardSize: function(levelConfig) {
		this.size.height = levelConfig.boardAttributes.length;
		this.size.width = levelConfig.boardAttributes[0].length;
	}
	,createCells: function(levelConfig) {
		this.cells = [];
		this.nonVoidCells = [];
		this.items = [];
		this.blockers = [];
		this.covers = [];
		this.hiddenObjects = [];
		var cell;
		var item;
		var blocker;
		var cover;
		var i = -1;
		var j;
		while(++i < this.size.width) {
			this.cells[i] = [];
			j = -1;
			while(++j < this.size.height) {
				cell = new com_sq_m3lib_board_Cell();
				this.cells[i][j] = cell;
				cell.setCoords(new com_sq_m3lib_geometry_Coord(i,j));
				cell.loadAttributes(levelConfig.boardAttributes[j][i]);
				cell.setMoveDirection(levelConfig.getDirectionInCell(j,i));
				cell.setSodaMoveDirection(levelConfig.getSodaDirectionInCell(j,i));
				if(cell.isVoid) {
					continue;
				}
				this.nonVoidCells.push(cell);
				if(levelConfig.boardAttributes[j][i].item != null) {
					var tmp = levelConfig.boardAttributes[j];
					var tmp1 = this.getCellBoardCoords(cell);
					var tmp2 = this.fillRandomAttributes();
					item = this.gameEngine.itemsFactory.getItem(tmp[i].item,tmp1,tmp2);
					if(item != null) {
						this.items.push(item);
						this.cells[i][j].setItem(item);
					}
				}
				var blockersConfig = levelConfig.boardAttributes[j][i].blocker;
				if(blockersConfig != null) {
					var _g = 0;
					while(_g < blockersConfig.length) {
						var blockerDescription = blockersConfig[_g];
						++_g;
						blocker = this.gameEngine.blockersFactory.getBlocker(blockerDescription,cell);
						if(blocker != null) {
							this.blockers.push(blocker);
							var tmp3 = this.cells[i];
							var tmp4 = this.cells[i][j].item != null && this.cells[i][j].item.getItemAlias() == com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER;
							tmp3[j].addBlocker(blocker,tmp4);
						}
					}
				}
				if(levelConfig.boardAttributes[j][i].cover != null) {
					cover = new com_sq_m3lib_board_cellHiddenObjects_CellCover(levelConfig.boardAttributes[j][i].cover,cell);
					cell.setCellCover(cover);
					this.covers.push(cover);
				}
			}
		}
		this.boardUtils.prepareNeighbours(this.nonVoidCells);
	}
	,fillRandomAttributes: function() {
		return true;
	}
	,getCellByCoords: function(x,y,preview) {
		if(preview == null) {
			preview = false;
		}
		if(x < 0 || y < 0) {
			return null;
		}
		if(this.getCells(preview)[x] == null) {
			return null;
		}
		return this.getCells(preview)[x][y];
	}
	,setViewPoint: function(coords,forced) {
		if(forced == null) {
			forced = false;
		}
		if(this.viewPoint.isEqual(coords) && !forced) {
			return;
		}
		this.viewPoint = coords;
		this.gameEngine.comboFactory.clearNeighbours();
		this.recalculateCells();
		this.recalculateBlockers();
		this.createBorders();
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreViewPointUpdateEvent(com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED,this.viewPoint));
	}
	,createBorders: function() {
	}
	,getCells: function(preview) {
		if(preview == null) {
			preview = false;
		}
		if(preview) {
			return this.cells;
		} else {
			return this._viewPortCells;
		}
	}
	,getNonVoidCells: function(preview) {
		if(preview == null) {
			preview = false;
		}
		if(preview) {
			return this.nonVoidCells;
		} else {
			return this._viewPortNonVoidCells;
		}
	}
	,getItems: function(preview) {
		if(preview == null) {
			preview = false;
		}
		if(preview) {
			return this.items;
		} else {
			return this._viewPortItems;
		}
	}
	,getBlockers: function(preview) {
		if(preview == null) {
			preview = false;
		}
		if(preview) {
			return this.blockers;
		} else {
			return this._viewPortBlockers;
		}
	}
	,recalculateCells: function() {
		this._viewPortNonVoidCells = [];
		this._viewPortCells = [];
		this._viewPortItems = [];
		var i = this.size.width;
		var j = this.size.height;
		var localCoord;
		var coordShiftX = -this.viewPoint.x;
		var coordShiftY = -this.viewPoint.y;
		while(--i >= 0) {
			j = this.size.height;
			while(--j >= 0) {
				var cell = this.cells[i][j];
				localCoord = cell.viewPortCoords;
				cell.wasChanged = true;
				localCoord.x = cell.coords.x + coordShiftX;
				localCoord.y = cell.coords.y + coordShiftY;
				if(this.boardUtils.isCoordInViewPoint(cell.getCoords())) {
					if(this._viewPortCells[localCoord.x] == null) {
						this._viewPortCells[localCoord.x] = [];
					}
					this._viewPortCells[localCoord.x][localCoord.y] = cell;
					if(cell.isVoid) {
						continue;
					}
					this._viewPortNonVoidCells.push(cell);
					if(cell.item != null) {
						this._viewPortItems.push(cell.item);
					}
				}
			}
		}
	}
	,markCellsChanged: function() {
		var i = this._viewPortNonVoidCells.length;
		while(--i >= 0) this._viewPortNonVoidCells[i].wasChanged = true;
	}
	,recalculateBlockers: function() {
		this._viewPortBlockers = [];
		var blocker;
		var cell;
		var count = 0;
		var jCount = this.blockers.length;
		var j = -1;
		while(++j < jCount) {
			blocker = this.blockers[j];
			cell = blocker.cell;
			if(cell.viewPortCoords.isInBorder(0,0,this.viewPortSize.width,this.viewPortSize.height)) {
				this._viewPortBlockers[count] = blocker;
				++count;
			}
		}
	}
	,areItemsNeighbours: function(item1,item2) {
		return this.boardUtils.areItemsNeighbours(item1,item2);
	}
	,areNeighbours: function(cell1,cell2) {
		return this.boardUtils.areNeighbours(cell1,cell2);
	}
	,getNearCells: function(cell) {
		return this.boardUtils.getNearCells(cell);
	}
	,getNearNotEmptyCells: function(cells) {
		return this.boardUtils.getNearNotEmptyCells(cells);
	}
	,getCellBoardCoords: function(cell) {
		return this.getOnBoardCoords(cell.coords.x,cell.coords.y);
	}
	,getOnBoardCoords: function(x,y) {
		return new com_sq_m3lib_geometry_Coord(x * com_sq_m3lib_coreSettings_CoreSettings.moveParams.cellSize,y * com_sq_m3lib_coreSettings_CoreSettings.moveParams.cellSize);
	}
	,getItemsFactory: function() {
		return this.gameEngine.itemsFactory;
	}
	,getMoveFactory: function() {
		return this.moveFactory;
	}
	,getCellByItem: function(item) {
		var width = this.cells.length;
		var height;
		var i = -1;
		var j;
		var cell;
		while(++i < width) {
			height = this.cells[i].length;
			j = -1;
			while(++j < height) {
				cell = this.cells[i][j];
				if(cell.item == item) {
					return cell;
				}
			}
		}
		return null;
	}
	,tryStabilize: function() {
		if(this._stable) {
			return true;
		}
		if(!this.isAllAnimationStable()) {
			return true;
		}
		if(this.gameEngine.comboFactory.haveCombos()) {
			return true;
		}
		if(this.hasChangedCells()) {
			return true;
		}
		if(!this.gameEngine.destroyFactory.scenarioFactory.tryStabilizeByReason(com_sq_m3lib_board_ScenarioPauseReason.WAIT_STABILIZATION)) {
			return true;
		}
		this.setStable(true);
		this.gameEngine.destroyFactory.explodeOnBoardStable();
		if(!this.gameEngine.destroyFactory.scenarioFactory.tryStabilizeByReason(com_sq_m3lib_board_ScenarioPauseReason.WAIT_STABILIZATION_EXPLOSION)) {
			this.setStable(false);
		}
		if(!this._stable) {
			return true;
		}
		if(this.gameEngine.gravityChangeFactory.inited && this.gameEngine.gravityChangeFactory.fillFinished()) {
			this.gameEngine.gravityChangeFactory.onBoardReadyToStabilize();
			if(!this._stable) {
				return true;
			}
		}
		if(!this.gameEngine.targetsManager.onBoardStableCheckViewPoint()) {
			return false;
		}
		if(!this._stable) {
			return false;
		}
		if(this.gameEngine.viralBlockerManager.inited) {
			this.gameEngine.viralBlockerManager.onBoardStable();
			if(!this._stable) {
				return true;
			}
		}
		if(this.gameEngine.boosterFactory.applyQueued()) {
			this.gameEngine.boosterFactory.stepQueue();
			this.gameEngine.destroyFactory.scenarioFactory.playStartScenarios();
			return true;
		}
		this.gameEngine.scoreFactory.onBoardStable();
		this.gameEngine.targetsManager.onBoardStable();
		return true;
	}
	,unstabilize: function(e) {
		if(this._stable) {
			this.setStable(false);
			this.gameEngine.comboFactory.resetOnMove();
		}
	}
	,isStable: function() {
		return this._stable;
	}
	,setStable: function(val) {
		this._stable = val;
	}
	,convertToSimpleItems: function(itemDescription) {
		var itemsCopy = this.items.slice();
		var itemsLength = this.items.length;
		Reflect.fields(itemDescription);
		var i = -1;
		var item;
		var currentItemDescription;
		var cell;
		var newItem;
		while(++i < itemsLength) {
			item = itemsCopy[i];
			if(item.disabled) {
				continue;
			}
			currentItemDescription = item.getCurrentItemDescription();
			if(com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualItems(itemDescription,currentItemDescription)) {
				currentItemDescription.className = com_sq_m3lib_board_ItemsFactoryDictionary.getByClass(com_sq_m3lib_board_items_ColorItem);
				newItem = this.gameEngine.itemsFactory.getItem(currentItemDescription,item.position,false);
				cell = item.cell;
				this.changeItemInCell(newItem,cell);
			}
		}
	}
	,changeItemInCell: function(newItem,cell) {
		var oldItem = cell.item;
		if(oldItem == null) {
			return;
		}
		HxOverrides.remove(this.items,oldItem);
		this.items.push(newItem);
		cell.setItem(newItem);
		oldItem.setDestroy(new com_sq_m3lib_board_DestroyInfo(cell,"item_replaced"));
		oldItem.viewAnimationProgress = oldItem.viewAnimationEnd;
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemChangedEvent(oldItem,newItem,cell));
	}
	,getItemOnBoardCount: function(itemDescription) {
		return this.boardUtils.getItemOnBoardCount([itemDescription]);
	}
	,getItemsForExplosionByColor: function(color) {
		return this.boardUtils.getItemsForExplosionByColor(color);
	}
	,getPopularColors: function() {
		return this.boardUtils.getPopularColors();
	}
	,getSimpleColorItems: function() {
		return this.boardUtils.getSimpleColorItems();
	}
	,getGravityChangedCells: function() {
		return this.boardUtils.getGravityChangedCells();
	}
	,placeHiddenObjects: function(_placedObjects) {
		this.hiddenObjects = [];
		var boardObject;
		var cells;
		var coords;
		var coordsLength = 0;
		var takenCoords;
		var takenCount;
		var j;
		var tmp = _placedObjects.keys();
		while(tmp.hasNext()) {
			var object = tmp.next();
			coords = _placedObjects.h[object.__id__];
			coordsLength = coords.length;
			while(--coordsLength >= 0) {
				takenCoords = (js_Boot.__cast(object , com_sq_m3lib_board_cellHiddenObjects_BaseHiddenObject)).getTakenCoords(coords[coordsLength]);
				if(takenCoords == null) {
					continue;
				}
				takenCount = takenCoords.length;
				j = -1;
				cells = [];
				while(++j < takenCount) cells[j] = this.getCellByCoords(takenCoords[j].x,takenCoords[j].y,true);
				boardObject = new com_sq_m3lib_board_cellHiddenObjects_BoardHiddenObject(object,cells,coords[coordsLength]);
				this.hiddenObjects.push(boardObject);
			}
		}
	}
	,onLevelFailed: function(e) {
		this.removeListeners();
	}
	,removeListeners: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreEventDispatcher.TICK,this._onTickCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("target_failed",this._targetFailedCallback);
		this._onTickCallback = null;
		this._targetFailedCallback = null;
	}
	,free: function() {
		this.setStable(true);
		this.viewPoint = new com_sq_m3lib_geometry_Coord();
		this.removeListeners();
	}
	,__class__: com_sq_m3lib_board_Board
};
var com_sq_m3lib_board_BoardUtils = function(board) {
	this._board = board;
};
$hxClasses["com.sq.m3lib.board.BoardUtils"] = com_sq_m3lib_board_BoardUtils;
com_sq_m3lib_board_BoardUtils.__name__ = true;
com_sq_m3lib_board_BoardUtils.prototype = {
	areItemsNeighbours: function(item1,item2) {
		return this.areNeighbours(item1.cell,item2.cell);
	}
	,areNeighbours: function(cell1,cell2) {
		if(cell1 == null || cell2 == null) {
			return false;
		}
		if(cell1.areNeighbours(cell2) && this.isCellInViewPort(cell1)) {
			return this.isCellInViewPort(cell2);
		} else {
			return false;
		}
	}
	,getEmptyCells: function(shuffle) {
		if(shuffle == null) {
			shuffle = true;
		}
		var result = [];
		var resultCount = 0;
		var cell;
		var count = this._board.nonVoidCells.length;
		var j = -1;
		while(++j < count) {
			cell = this._board.nonVoidCells[j];
			if(cell.item == null && cell.canMoveItem() && !cell.promissedFill) {
				result[resultCount] = cell;
				++resultCount;
			}
		}
		if(shuffle && resultCount > 1) {
			result = com_sq_m3lib_core_Mersenne.getInstance().shuffleArray(result);
		}
		return result;
	}
	,getNearCells: function(cell) {
		return cell.neighbours;
	}
	,getNearNotEmptyCells: function(cells) {
		var cell;
		var tmpResult = [];
		var result = [];
		var resultLength = 0;
		var destroyedLength = cells.length;
		var cellToDestroy;
		var i = -1;
		var j = -1;
		var indexOf;
		var nearCellDescription;
		while(++i < destroyedLength) {
			cellToDestroy = cells[i];
			j = cellToDestroy.neighbours.length;
			while(--j >= 0) {
				cell = cellToDestroy.neighbours[j];
				if(!this.isCoordInViewPoint(cell.coords)) {
					continue;
				}
				if(cell.inCombination) {
					continue;
				}
				if(cell.item != null && (!cell.item.isAnimationStable() || cell.item.disabled)) {
					continue;
				}
				if(!cell.blockerSet.isEmpty() && (!cell.blockerSet.priorityBlocker.isAnimationStable() || cell.blockerSet.priorityBlocker.isDestroyed())) {
					continue;
				}
				indexOf = tmpResult.indexOf(cell);
				if(indexOf == -1) {
					tmpResult[resultLength] = cell;
					nearCellDescription = new com_sq_m3lib_board_NearCellDescription();
					nearCellDescription.cell = cell;
					nearCellDescription.nearCells = [cellToDestroy];
					result[resultLength] = nearCellDescription;
					++resultLength;
				} else {
					result[indexOf].nearCells.push(cellToDestroy);
				}
			}
		}
		return result;
	}
	,getItemOnBoardCount: function(itemDescriptions) {
		var result = 0;
		var cells = this._board.getNonVoidCells(false);
		var cellsLength = cells.length;
		var i = -1;
		var item;
		var currentItemDescription;
		var descriptionLength = itemDescriptions.length;
		var j;
		while(++i < cellsLength) {
			item = cells[i].getItem();
			if(item == null || item.disabled) {
				continue;
			}
			currentItemDescription = item.getCurrentItemDescription();
			j = descriptionLength;
			while(--j >= 0) if(com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualItems(itemDescriptions[j],currentItemDescription)) {
				++result;
			}
		}
		return result;
	}
	,getItemsOnBoard: function(itemDescriptions,fullBoardCheck) {
		if(fullBoardCheck == null) {
			fullBoardCheck = false;
		}
		var result = [];
		var resultCount = 0;
		var cells = this._board.getNonVoidCells(fullBoardCheck);
		var cellsLength = cells.length;
		var i = -1;
		var item;
		var currentItemDescription;
		var descriptionLength = itemDescriptions.length;
		var j;
		while(++i < cellsLength) {
			item = cells[i].getItem();
			if(item == null || item.disabled) {
				continue;
			}
			currentItemDescription = item.getCurrentItemDescription();
			j = descriptionLength;
			while(--j >= 0) if(com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualItems(itemDescriptions[j],currentItemDescription)) {
				result[resultCount] = item;
				++resultCount;
			}
		}
		return result;
	}
	,getItemsForExplosionByColor: function(color) {
		var result = [];
		var cells = this._board.getNonVoidCells(false);
		var cellLength = cells.length;
		var i = -1;
		var item;
		var colorItem;
		var cell;
		while(++i < cellLength) {
			cell = cells[i];
			if(!cell.hasExplosionDestroybleElement() || cell.hasComboBlocker() || !cell.hasItemInCell()) {
				continue;
			}
			item = cell.getItem();
			if(!js_Boot.__instanceof(item,com_sq_m3lib_board_items_IColorItem)) {
				continue;
			}
			colorItem = js_Boot.__cast(item , com_sq_m3lib_board_items_IColorItem);
			if(colorItem.color != color) {
				continue;
			}
			result.push(cell);
		}
		result = com_sq_m3lib_core_Mersenne.getInstance().shuffleArray(result);
		return result;
	}
	,getAllItemsExceptColor: function(color,simpleItems,checkStableBlocker) {
		if(checkStableBlocker == null) {
			checkStableBlocker = false;
		}
		if(simpleItems == null) {
			simpleItems = false;
		}
		var result = [];
		var items = this._board.getItems(true);
		var itemLength = items.length;
		var i = -1;
		var item;
		var cell;
		while(++i < itemLength) {
			item = items[i];
			if(js_Boot.__instanceof(item,com_sq_m3lib_board_items_IColorItem)) {
				if((js_Boot.__cast(item , com_sq_m3lib_board_items_IColorItem)).color == color) {
					continue;
				}
			}
			cell = item.cell;
			if(cell == null || !cell.hasExplosionDestroybleElement() || cell.hasComboBlocker() || !cell.hasItemInCell()) {
				continue;
			}
			if(!this.isCellInViewPort(cell)) {
				continue;
			}
			if(checkStableBlocker && cell.hasStableBlocker()) {
				continue;
			}
			if(simpleItems && !item.isCommonItem()) {
				continue;
			}
			result.push(cell);
		}
		result = com_sq_m3lib_core_Mersenne.getInstance().shuffleArray(result);
		return result;
	}
	,getPopularColors: function() {
		return this.getPopularColorsInArray(this._board.getItems(true));
	}
	,getPopularColorsInArray: function(items) {
		var result = [];
		var colorsCount = new haxe_ds_IntMap();
		var itemLength = items.length;
		var i = -1;
		var item;
		var colorItem;
		var currentColor;
		while(++i < itemLength) {
			item = items[i];
			if(!js_Boot.__instanceof(item,com_sq_m3lib_board_items_IColorItem)) {
				continue;
			}
			colorItem = js_Boot.__cast(item , com_sq_m3lib_board_items_IColorItem);
			currentColor = colorItem.color;
			if(!colorsCount.h.hasOwnProperty(currentColor)) {
				colorsCount.h[currentColor] = 0;
				result.push(currentColor);
			}
			colorsCount.h[currentColor] = colorsCount.h[currentColor] + 1;
		}
		haxe_ds_ArraySort.sort(result,function(val1,val2) {
			return colorsCount.h[val2] - colorsCount.h[val1];
		});
		result = this.addAbsentColorsFromSpawns(result);
		return result;
	}
	,getColorsFromSpawners: function(core) {
		var result = [];
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = spawner.getSpawnConfig();
			while(_g2 < _g3.length) {
				var color = _g3[_g2];
				++_g2;
				if(result.indexOf(color.itemParams.color) == -1) {
					result.push(color.itemParams.color);
				}
			}
		}
		return result;
	}
	,addAbsentColorsFromSpawns: function(colors) {
		var spawnColors = this.getColorsFromSpawners(this._board.gameEngine);
		var _g = 0;
		while(_g < spawnColors.length) {
			var color = spawnColors[_g];
			++_g;
			if(colors.indexOf(color) == -1) {
				colors.push(color);
			}
		}
		return colors;
	}
	,getSimpleColorItems: function() {
		var result = [];
		var items = this._board.getItems(false);
		var i = items.length;
		var cell;
		var item;
		var colorItem;
		while(--i >= 0) {
			item = items[i];
			if(!item.isCommonItem()) {
				continue;
			}
			if(!js_Boot.__instanceof(item,com_sq_m3lib_board_items_ColorItem)) {
				continue;
			}
			colorItem = js_Boot.__cast(item , com_sq_m3lib_board_items_ColorItem);
			cell = item.cell;
			if(cell == null) {
				continue;
			}
			if(!cell.getBlocker().isEmpty()) {
				continue;
			}
			result.push(colorItem);
		}
		return result;
	}
	,getBlockerCountByAlias: function(blocker) {
		var result = 0;
		var blockers = this._board.getBlockers(true);
		var i = blockers.length;
		while(--i >= 0) {
			if(blockers[i].isDestroyed()) {
				continue;
			}
			if(blockers[i].alias == blocker) {
				++result;
			}
		}
		return result;
	}
	,getViralBlockerCount: function() {
		var result = 0;
		var blockers = this._board.getBlockers(true);
		var i = blockers.length;
		while(--i >= 0) {
			if(!js_Boot.__instanceof(blockers[i],com_sq_m3lib_board_cellBlockers_IViralBlocker)) {
				continue;
			}
			if(blockers[i].isDestroyed()) {
				continue;
			}
			++result;
		}
		return result;
	}
	,getGravityChangedCells: function() {
		var result = [];
		var resultLength = 0;
		var cells = this._board.cells;
		var width = cells.length;
		var height;
		var i = -1;
		var j;
		var cell;
		while(++i < width) {
			height = cells[i].length;
			j = -1;
			while(++j < height) {
				cell = cells[i][j];
				if(cell.hasGravityChanger) {
					result[resultLength] = cell;
					++resultLength;
				}
			}
		}
		return result;
	}
	,getCapturedCells: function() {
		var result = [];
		var resultLength = 0;
		var cells = this._board.cells;
		var width = cells.length;
		var height;
		var i = -1;
		var j;
		var cell;
		while(++i < width) {
			height = cells[i].length;
			j = -1;
			while(++j < height) {
				cell = cells[i][j];
				if(cell.captured != null) {
					result[resultLength] = cell;
					++resultLength;
				}
			}
		}
		return result;
	}
	,isCellInViewPort: function(cell) {
		if(cell != null) {
			return cell.viewPortCoords.isInBorder(0,0,this._board.viewPortSize.width,this._board.viewPortSize.height);
		} else {
			return false;
		}
	}
	,isCoordInViewPoint: function(coord) {
		var viewPoint = this._board.viewPoint;
		return coord.isInBorder(com_sq_m3lib_math_CoreMathUtils.maxInt(viewPoint.x,0),com_sq_m3lib_math_CoreMathUtils.maxInt(viewPoint.y,0),viewPoint.x + this._board.viewPortSize.width,viewPoint.y + this._board.viewPortSize.height);
	}
	,prepareNeighbours: function(cells) {
		var i = cells.length;
		var cell;
		var directions = com_sq_m3lib_board_CellBorder.CELL_DIRECTIONS;
		var directionsLength = directions.length;
		var j = -1;
		var nearCell;
		while(--i >= 0) {
			cell = cells[i];
			j = -1;
			while(++j < directionsLength) {
				nearCell = this._board.getCellByCoords(cell.coords.x + directions[j][0],cell.coords.y + directions[j][1],true);
				if(nearCell == null || nearCell.isVoid) {
					continue;
				}
				cell.addNeighbour(nearCell);
			}
		}
	}
	,fromViewPortToGlobalCoord: function(coord) {
		var viewPoint = this._board.viewPoint;
		return new com_sq_m3lib_geometry_Coord(coord.x + viewPoint.x,coord.y + viewPoint.y);
	}
	,getItemsFromCellArray: function(cells) {
		var result = [];
		var _g = 0;
		while(_g < cells.length) {
			var c = cells[_g];
			++_g;
			if(c.getItem() != null) {
				result.push(c.getItem());
			}
		}
		return result;
	}
	,__class__: com_sq_m3lib_board_BoardUtils
};
var com_sq_m3lib_board_BorderFactory = function() {
};
$hxClasses["com.sq.m3lib.board.BorderFactory"] = com_sq_m3lib_board_BorderFactory;
com_sq_m3lib_board_BorderFactory.__name__ = true;
com_sq_m3lib_board_BorderFactory.prototype = {
	init: function(board) {
		this._board = board;
	}
	,createBorders: function(concateBorders) {
		if(concateBorders == null) {
			concateBorders = true;
		}
		this._borderCorners = [];
		this.borders = [];
		var cellsTmp = this._board.getNonVoidCells(false);
		var cellLength = cellsTmp.length;
		var x;
		var y;
		var i = -1;
		while(++i < cellLength) {
			x = cellsTmp[i].viewPortCoords.x;
			y = cellsTmp[i].viewPortCoords.y;
			if(cellsTmp[i] == null || cellsTmp[i].isVoid) {
				continue;
			}
			if(this.borders[x] == null) {
				this.borders[x] = [];
			}
			this.borders[x][y] = [];
			this.addCornerBorderTiles(new com_sq_m3lib_geometry_Coord(x,y));
			this.addLineToMatrix(x,y,this.getRequiredTile(new com_sq_m3lib_geometry_Coord(x,y),com_sq_m3lib_board_CellBorder.CELL_DIRECTIONS));
		}
		if(concateBorders) {
			this.concateAdjoiningLineBorders();
		}
		var _g = 0;
		var _g1 = this._borderCorners;
		while(_g < _g1.length) {
			var cornersX = _g1[_g];
			++_g;
			if(cornersX == null) {
				continue;
			}
			var _g2 = 0;
			while(_g2 < cornersX.length) {
				var cornersY = cornersX[_g2];
				++_g2;
				if(cornersY == null) {
					continue;
				}
				var ii = this._borderCorners.indexOf(cornersX);
				var jj = cornersX.indexOf(cornersY);
				if(this.borders[ii] == null) {
					this.borders[ii] = [];
				}
				if(this.borders[ii][jj] == null) {
					this.borders[ii][jj] = [];
				}
				this.borders[ii][jj] = this.borders[ii][jj].concat(cornersY);
			}
		}
	}
	,getRequiredTile: function(coords,directions) {
		var requiredType = 0;
		var val = 0;
		var nearCell;
		var directionLength = directions.length;
		var i = -1;
		while(++i < directionLength) {
			nearCell = this._board.getCellByCoords(coords.x + directions[i][0],coords.y + directions[i][1]);
			new com_sq_m3lib_board_CellBorder().setCoords(new com_sq_m3lib_geometry_Coord(coords.x,coords.y));
			if(nearCell == null || nearCell.isVoid) {
				val = 1;
			} else {
				val = 0;
			}
			requiredType |= val << i;
		}
		return requiredType;
	}
	,addCornerBorderTiles: function(coords) {
		var requiredType = 0;
		var x = 0;
		var y = 0;
		var _g1 = 0;
		var _g = com_sq_m3lib_board_CellBorder.CELL_DIAGONAL_DIRECTIONS.length;
		while(_g1 < _g) {
			var i = _g1++;
			x = coords.x + com_sq_m3lib_board_CellBorder.CELL_DIAGONAL_DIRECTIONS[i][0];
			y = coords.y + com_sq_m3lib_board_CellBorder.CELL_DIAGONAL_DIRECTIONS[i][1];
			x = Math.min(x,coords.x) | 0;
			y = Math.min(y,coords.y) | 0;
			var borderX = x + com_sq_m3lib_board_CellBorder.CELL_DIAGONAL_CHECK_DIRECTIONS[0][0];
			var borderY = y + com_sq_m3lib_board_CellBorder.CELL_DIAGONAL_CHECK_DIRECTIONS[0][1];
			if(this._borderCorners[borderX] == null) {
				this._borderCorners[borderX] = [];
			}
			if(this._borderCorners[borderX][borderY] == null) {
				this._borderCorners[borderX][borderY] = [];
			} else {
				continue;
			}
			requiredType = this.getRequiredTile(new com_sq_m3lib_geometry_Coord(x,y),com_sq_m3lib_board_CellBorder.CELL_DIAGONAL_CHECK_DIRECTIONS);
			this.addCornerToMatrix(borderX,borderY,requiredType);
		}
	}
	,addCornerToMatrix: function(borderX,borderY,requiredType) {
		var nonNullBytesCount = this.getNonNullBytesCount(requiredType);
		if(nonNullBytesCount % 2 == 0) {
			if(com_sq_m3lib_board_CellBorder.POSSIBLE_DOUBLE_CORNERS.indexOf(requiredType) == -1) {
				return;
			}
			this.addCornerToMatrix(borderX,borderY,requiredType & 12);
			this.addCornerToMatrix(borderX,borderY,requiredType & 3);
			return;
		}
		if(nonNullBytesCount > 1) {
			requiredType ^= 15;
		}
		var border = new com_sq_m3lib_board_CellBorder();
		border.setCoords(new com_sq_m3lib_geometry_Coord(borderX,borderY));
		border.setBorderType(com_sq_m3lib_board_BorderType.corner);
		border.setType(requiredType);
		switch(nonNullBytesCount) {
		case 1:
			border.setCornerDirection(com_sq_m3lib_board_CornerDirection.inner);
			break;
		case 3:
			border.setCornerDirection(com_sq_m3lib_board_CornerDirection.outer);
			break;
		}
		var n = 0;
		var tmpValue = requiredType;
		while(tmpValue != 0) {
			++n;
			if((tmpValue & 1) > 0) {
				this.addCornerLineDirectionsByBytePosition(n,border);
				break;
			}
			tmpValue >>= 1;
		}
		this._borderCorners[borderX][borderY].push(border);
	}
	,addLineToMatrix: function(borderX,borderY,requiredType) {
		var n = 0;
		var tmpValue = requiredType;
		while(tmpValue != 0) {
			++n;
			if((tmpValue & 1) > 0) {
				var border = new com_sq_m3lib_board_CellBorder();
				border.setBorderType(com_sq_m3lib_board_BorderType.line);
				border.setType(requiredType);
				var cornerCells = [];
				var lineDirection;
				var shiftedCoords = new com_sq_m3lib_geometry_Coord(borderX,borderY);
				if(n % 2 == 0) {
					if(n - 2 > 0) {
						shiftedCoords = new com_sq_m3lib_geometry_Coord(shiftedCoords.x,shiftedCoords.y + 1);
						lineDirection = com_sq_m3lib_board_LineDirection.down;
					} else {
						lineDirection = com_sq_m3lib_board_LineDirection.up;
					}
					cornerCells.push(new com_sq_m3lib_geometry_Coord(shiftedCoords.x + 1,shiftedCoords.y));
				} else {
					if(n - 2 > 0) {
						shiftedCoords = new com_sq_m3lib_geometry_Coord(shiftedCoords.x + 1,shiftedCoords.y);
						lineDirection = com_sq_m3lib_board_LineDirection.right;
					} else {
						lineDirection = com_sq_m3lib_board_LineDirection.left;
					}
					cornerCells.push(new com_sq_m3lib_geometry_Coord(shiftedCoords.x,shiftedCoords.y + 1));
				}
				border.setCoords(new com_sq_m3lib_geometry_Coord(shiftedCoords.x,shiftedCoords.y));
				border.addLineDirection(lineDirection);
				cornerCells.push(shiftedCoords);
				var cornerCellsLength = cornerCells.length;
				var i = -1;
				while(++i < cornerCellsLength) {
					var _g = 0;
					var _g1 = this._borderCorners[cornerCells[i].x][cornerCells[i].y];
					while(_g < _g1.length) {
						var corner = _g1[_g];
						++_g;
						if(this._borderCorners[cornerCells[i].x][cornerCells[i].y].length > 1) {
							if(corner.getLineDirection().indexOf(lineDirection) == -1) {
								continue;
							}
							corner = corner.cloneReversedCorner(border.isHorizonal());
						}
						var _g2 = 0;
						var _g3 = corner.getLineDirection();
						while(_g2 < _g3.length) {
							var direction = _g3[_g2];
							++_g2;
							if(direction == lineDirection || direction == border.getReversedDirection(lineDirection)) {
								continue;
							}
							border.addNearCornerDirection(direction);
						}
					}
				}
				border.setLineSize(1);
				this.borders[borderX][borderY].push(border);
			}
			tmpValue >>= 1;
		}
	}
	,addCornerLineDirectionsByBytePosition: function(n,border) {
		if(n % 2 == 0) {
			border.addLineDirection(com_sq_m3lib_board_LineDirection.right);
		} else {
			border.addLineDirection(com_sq_m3lib_board_LineDirection.left);
		}
		if(n > 2) {
			border.addLineDirection(com_sq_m3lib_board_LineDirection.down);
		} else {
			border.addLineDirection(com_sq_m3lib_board_LineDirection.up);
		}
	}
	,concateAdjoiningLineBorders: function() {
		var bordersCopy = this.cloneBorderMatrix();
		var cellsTmp = this._board.getNonVoidCells(false);
		var cellLength = cellsTmp.length;
		var i = -1;
		var x;
		var y;
		var cellBoders;
		while(++i < cellLength) {
			x = cellsTmp[i].viewPortCoords.x;
			y = cellsTmp[i].viewPortCoords.y;
			if(bordersCopy[x][y] == null) {
				continue;
			}
			var _g = 0;
			var _g1 = bordersCopy[x][y];
			while(_g < _g1.length) {
				var lineBorder = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = com_sq_m3lib_board_CellBorder.CELL_BORDER_DIRECTION;
				while(_g2 < _g3.length) {
					var checkDirection = _g3[_g2];
					++_g2;
					if(bordersCopy[x + checkDirection[0]] == null || bordersCopy[x + checkDirection[0]][y + checkDirection[1]] == null) {
						continue;
					}
					cellBoders = bordersCopy[x + checkDirection[0]][y + checkDirection[1]];
					var _g4 = 0;
					while(_g4 < cellBoders.length) {
						var oneBorder = cellBoders[_g4];
						++_g4;
						if(lineBorder.isLineDirectionsEqual(oneBorder)) {
							oneBorder.setCoords(lineBorder.getCoords());
							oneBorder.setLineSize(oneBorder.getLineSize() + lineBorder.getLineSize());
							oneBorder.concatNeardirections(lineBorder.getNearCornersDirection());
							var tmp = this.borders[x];
							var tmp1 = this.borders[x][y].indexOf(lineBorder);
							tmp[y].splice(tmp1,1);
							break;
						}
					}
				}
			}
		}
	}
	,cloneBorderMatrix: function() {
		var clone = [];
		var bordersLength = this.borders.length;
		var i = -1;
		var bordersWidth;
		var j;
		while(++i < bordersLength) {
			clone[i] = [];
			bordersWidth = this.borders[i].length;
			j = -1;
			while(++j < bordersWidth) {
				if(this.borders[i][j] == null) {
					continue;
				}
				clone[i][j] = this.borders[i][j].slice();
			}
		}
		return clone;
	}
	,getNonNullBytesCount: function(val) {
		var nonNullBytesCount = val;
		nonNullBytesCount = (val & 85) + (val >> 1 & 85);
		nonNullBytesCount = (nonNullBytesCount & 51) + (nonNullBytesCount >> 2 & 51);
		nonNullBytesCount = nonNullBytesCount + (nonNullBytesCount >> 4) & 15;
		return nonNullBytesCount;
	}
	,__class__: com_sq_m3lib_board_BorderFactory
};
var com_sq_m3lib_board_CaptureCellsManager = function(engine) {
	this._gameEngine = engine;
};
$hxClasses["com.sq.m3lib.board.CaptureCellsManager"] = com_sq_m3lib_board_CaptureCellsManager;
com_sq_m3lib_board_CaptureCellsManager.__name__ = true;
com_sq_m3lib_board_CaptureCellsManager.prototype = {
	init: function() {
		this.removeListeners();
		this.addListeners();
	}
	,onSpecialCombo: function(cell,switchCell) {
		if(this.isCaptured(cell) != this.isCaptured(switchCell)) {
			this.captureCell(cell);
			this.captureCell(switchCell);
		}
	}
	,onDestroyCombo: function(e) {
		if(!js_Boot.__instanceof(e,com_sq_m3lib_events_CoreComboEvent)) {
			return;
		}
		var combo = (js_Boot.__cast(e , com_sq_m3lib_events_CoreComboEvent)).getCombo();
		if(combo.comboTemplate.scenario != null) {
			this.onSpecialCombo(combo.cells[0],combo.cells[1]);
			return;
		}
		var starter = combo.scoreCell;
		if(this.isCaptured(starter)) {
			return;
		}
		if(this.hasCapturedCellInArray(combo.cells)) {
			this.captureCell(starter);
		}
	}
	,onItemDestroyed: function(e) {
		if(!js_Boot.__instanceof(e,com_sq_m3lib_events_CoreItemDestroyEvent)) {
			return;
		}
		this.tryCaptureItem((js_Boot.__cast(e , com_sq_m3lib_events_CoreItemDestroyEvent)).getItem());
	}
	,tryCaptureItem: function(item) {
		var cell = item.destroyInfo.cell;
		if(this.isCaptured(cell)) {
			return;
		}
		var starter = item.destroyInfo.starter;
		if(starter == null) {
			return;
		}
		if(this.isCaptured(starter) && starter.getBlocker().isEmpty()) {
			this.captureCell(cell);
			return;
		}
	}
	,onCellHit: function(e) {
		if(!js_Boot.__instanceof(e,com_sq_m3lib_events_CoreCellHitEvent)) {
			return;
		}
		var event = js_Boot.__cast(e , com_sq_m3lib_events_CoreCellHitEvent);
		if(this.isCaptured(event.cell)) {
			return;
		}
		if(event.starter == null) {
			return;
		}
		if(!this.isCaptured(event.starter)) {
			var scenario = event.scenario;
			if(scenario == null || !js_Boot.__instanceof(scenario,com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario)) {
				return;
			}
			if(this.hasCapturedCellInArray((js_Boot.__cast(scenario , com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario)).getDestroyedCells()) && event.starter.getBlocker().isEmpty()) {
				this.captureCell(event.cell);
			}
			return;
		}
		if(event.starter.getBlocker().isEmpty()) {
			this.captureCell(event.cell);
		}
	}
	,hasCapturedCellInArray: function(cells) {
		var i = cells.length;
		while(--i >= 0) if(this.isCaptured(cells[i])) {
			return true;
		}
		return false;
	}
	,isCaptured: function(cell) {
		if(cell.captured != null) {
			return cell.captured.type == this.getCurrentCaptureType();
		} else {
			return false;
		}
	}
	,captureCell: function(cell) {
		if(!this.isCaptured(cell) && cell.getBlocker().isEmpty()) {
			cell.captured = new com_sq_m3lib_board_CellCaptureParams(this.getCurrentCaptureType());
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreCaptureCellEvent(cell));
		}
	}
	,getCurrentCaptureType: function() {
		return "player_captured";
	}
	,addListeners: function() {
		this._onCellHitCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("cell_hit",$bind(this,this.onCellHit),-50);
		this._onDestroyComboCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("destroyed",$bind(this,this.onDestroyCombo),-50);
		this._onDestroyItemCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("destroy_items",$bind(this,this.onItemDestroyed),-50);
		this._onActivateItemCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("set_items_in_action",$bind(this,this.onItemDestroyed),-50);
	}
	,removeListeners: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("destroyed",this._onDestroyComboCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("destroy_items",this._onDestroyItemCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("set_items_in_action",this._onActivateItemCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("cell_hit",this._onCellHitCallback);
	}
	,__class__: com_sq_m3lib_board_CaptureCellsManager
};
var com_sq_m3lib_board_Cell = function() {
	this.hiddenObject = null;
	this.hasGravityChanger = false;
	this.noBaseFill = false;
	this.promissedFill = false;
	this._sodaDirection = 0;
	this._moveDirection = 0;
	this.fromCells = [];
	this.blockerSet = new com_sq_m3lib_board_cellBlockers_BlockersSet();
	this._teleports = [];
	this.teleportsFromCell = [];
	this.teleportsToCell = [];
	this.neighbours = [];
};
$hxClasses["com.sq.m3lib.board.Cell"] = com_sq_m3lib_board_Cell;
com_sq_m3lib_board_Cell.__name__ = true;
com_sq_m3lib_board_Cell.prototype = {
	setCoords: function(val) {
		this.coords = val.clone();
		this.viewPortCoords = val;
	}
	,loadAttributes: function(attributes) {
		this._attributes = attributes;
		this.hasGravityChanger = com_sq_m3lib_math_CoreMathUtils.intToBool(attributes.gravityChanged);
		if(typeof(attributes.isVoid) == "boolean") {
			this.isVoid = js_Boot.__cast(attributes.isVoid , Bool);
		} else {
			this.isVoid = com_sq_m3lib_math_CoreMathUtils.intToBool(attributes.isVoid);
		}
		if(attributes.captured != null) {
			this.captured = new com_sq_m3lib_board_CellCaptureParams(attributes.captured.type);
		}
	}
	,addNeighbour: function(cell) {
		this.neighbours.push(cell);
	}
	,areNeighbours: function(cell) {
		return this.neighbours.indexOf(cell) != -1;
	}
	,setMoveDirection: function(val) {
		this._moveDirection = val;
		this._moveVector = com_sq_m3lib_coreSettings_CoreSettings.getVectorByDirection(val);
	}
	,setSodaMoveDirection: function(val) {
		this._sodaDirection = val != -1?val:com_sq_m3lib_coreSettings_CoreSettings.getOppositeDirection(this._moveDirection);
		this._sodaVector = com_sq_m3lib_coreSettings_CoreSettings.getVectorByDirection(this._sodaDirection);
	}
	,getPresetMoveDirection: function() {
		return this._moveDirection;
	}
	,getCurrentMoveVector: function() {
		if(this.hasGravityChanger) {
			return this._sodaVector;
		} else {
			return this._moveVector;
		}
	}
	,setHiddenObject: function(value) {
		this.hiddenObject = value;
	}
	,hasHiddenObject: function() {
		return this.hiddenObject != null;
	}
	,setTeleport: function(val) {
		this._teleports.push(val);
		if(val.fromCell == this) {
			this.teleportsFromCell.push(val);
		} else {
			this.teleportsToCell.push(val);
		}
	}
	,hasTeleport: function() {
		if(this.teleportsFromCell.length <= 0) {
			return this.teleportsToCell.length > 0;
		} else {
			return true;
		}
	}
	,addFromCell: function(cell) {
		if(this.fromCells == null) {
			this.fromCells = [];
		}
		if(this.fromCells.indexOf(cell) >= 0) {
			return;
		}
		var length = this.fromCells.length;
		this.fromCells[length] = cell;
		++length;
		if(length > 1) {
			haxe_ds_ArraySort.sort(this.fromCells,function(cell1,cell2) {
				if(cell1.coords.x != cell2.coords.x) {
					return cell1.coords.x - cell2.coords.x;
				} else {
					return cell1.coords.y - cell2.coords.y;
				}
			});
		}
	}
	,removeFromCell: function(cell) {
		if(this.fromCells == null) {
			return;
		}
		HxOverrides.remove(this.fromCells,cell);
	}
	,setToCell: function(cell) {
		this.toCell = cell;
	}
	,getItem: function() {
		return this.item;
	}
	,setItem: function(val) {
		if(this.item != null && this.item.cell == this) {
			this.item.cell = null;
		}
		this.item = val;
		if(this.item != null) {
			this.item.cell = this;
			this.wasChanged = true;
		}
	}
	,getBlocker: function() {
		return this.blockerSet;
	}
	,destroyBlocker: function() {
		this.blockerSet.destroyBlocker();
		this.wasChanged = true;
	}
	,addBlocker: function(val,destroyOnNear) {
		if(destroyOnNear == null) {
			destroyOnNear = false;
		}
		this.blockerSet.addBlocker(val,destroyOnNear);
		this.wasChanged = true;
	}
	,getCellCover: function() {
		return this.cover;
	}
	,setCellCover: function(val) {
		this.cover = val;
	}
	,getCoords: function() {
		return this.coords;
	}
	,hasItemInCell: function() {
		if(this.hasDestroyableItem()) {
			return !this.item.inAction;
		} else {
			return false;
		}
	}
	,hasDestroyableItem: function() {
		if(!this.isVoid && this.item != null) {
			return !this.item.disabled;
		} else {
			return false;
		}
	}
	,canHitCell: function() {
		if(!(!this.hasStableBlocker())) {
			return this.blockerSet.isDestroyed();
		} else {
			return true;
		}
	}
	,hasExplosionDestroybleElement: function() {
		if(this.isVoid) {
			return false;
		}
		if(this.hasComboBlocker()) {
			return !this.blockerSet.priorityBlocker.isDestroyed();
		}
		if(this.hasStableBlocker()) {
			if(this.item == null || this.hasItemInCell()) {
				return !this.blockerSet.priorityBlocker.isDestroyed();
			} else {
				return false;
			}
		}
		if(this.item != null) {
			if(this.hasItemInCell() && !this.item.isMoving && this.item.canSelect() && this.item.canExplode()) {
				return this.canMoveItem();
			} else {
				return false;
			}
		}
		if(!this.blockerSet.isEmpty()) {
			return !this.blockerSet.priorityBlocker.isDestroyed();
		}
		return this.hasCover();
	}
	,canHaveItem: function() {
		if(!this.isVoid) {
			return this.canMoveItem();
		} else {
			return false;
		}
	}
	,canMoveItem: function() {
		return !this.blockerSet.hasStableBlocker;
	}
	,hasStableBlocker: function() {
		return this.blockerSet.hasStableBlocker;
	}
	,hasComboBlocker: function() {
		return this.blockerSet.hasComboBlocker;
	}
	,canPlaceSpecialComboItem: function() {
		if(this.hasItemInCell() && this.canMoveItem()) {
			return !js_Boot.__instanceof(this.item,com_sq_m3lib_board_items_IBomb);
		} else {
			return false;
		}
	}
	,hasExplosionStopper: function() {
		if(this.canMoveItem() && this.item != null) {
			return this.item.isExplosionStopper();
		} else {
			return false;
		}
	}
	,needCheckOnNearDestroyed: function() {
		if(!(this.item != null && this.item.destroyOnNearDestroyed())) {
			return this.blockerSet.destroyOnNearCellItemDestroyed;
		} else {
			return true;
		}
	}
	,clearComboCheckParams: function() {
		this.wasChecked = false;
		this.inCombination = false;
	}
	,getCaptured: function() {
		return this.captured;
	}
	,hasCover: function() {
		if(this.cover != null) {
			return !this.cover.isDestroyed();
		} else {
			return false;
		}
	}
	,cloneAttributes: function() {
		var result = { };
		var _g = 0;
		var _g1 = Reflect.fields(this._attributes);
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			var o = this._attributes;
			var tmp;
			var tmp1;
			if(o == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(o.__properties__) {
					tmp = o.__properties__["get_" + param];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = o[tmp]();
				} else {
					tmp1 = o[param];
				}
			}
			if(tmp1 != null) {
				var o1 = this._attributes;
				var tmp3;
				var value;
				if(o1 == null) {
					value = null;
				} else {
					var tmp4;
					if(o1.__properties__) {
						tmp3 = o1.__properties__["get_" + param];
						tmp4 = tmp3;
					} else {
						tmp4 = false;
					}
					if(tmp4) {
						value = o1[tmp3]();
					} else {
						value = o1[param];
					}
				}
				result[param] = value;
			}
		}
		return result;
	}
	,getSodaDirection: function() {
		return this._sodaDirection;
	}
	,__class__: com_sq_m3lib_board_Cell
};
var com_sq_m3lib_board_BorderType = { __ename__ : true, __constructs__ : ["line","corner"] };
com_sq_m3lib_board_BorderType.line = ["line",0];
com_sq_m3lib_board_BorderType.line.toString = $estr;
com_sq_m3lib_board_BorderType.line.__enum__ = com_sq_m3lib_board_BorderType;
com_sq_m3lib_board_BorderType.corner = ["corner",1];
com_sq_m3lib_board_BorderType.corner.toString = $estr;
com_sq_m3lib_board_BorderType.corner.__enum__ = com_sq_m3lib_board_BorderType;
var com_sq_m3lib_board_CornerDirection = { __ename__ : true, __constructs__ : ["inner","outer"] };
com_sq_m3lib_board_CornerDirection.inner = ["inner",0];
com_sq_m3lib_board_CornerDirection.inner.toString = $estr;
com_sq_m3lib_board_CornerDirection.inner.__enum__ = com_sq_m3lib_board_CornerDirection;
com_sq_m3lib_board_CornerDirection.outer = ["outer",1];
com_sq_m3lib_board_CornerDirection.outer.toString = $estr;
com_sq_m3lib_board_CornerDirection.outer.__enum__ = com_sq_m3lib_board_CornerDirection;
var com_sq_m3lib_board_LineDirection = { __ename__ : true, __constructs__ : ["left","up","right","down"] };
com_sq_m3lib_board_LineDirection.left = ["left",0];
com_sq_m3lib_board_LineDirection.left.toString = $estr;
com_sq_m3lib_board_LineDirection.left.__enum__ = com_sq_m3lib_board_LineDirection;
com_sq_m3lib_board_LineDirection.up = ["up",1];
com_sq_m3lib_board_LineDirection.up.toString = $estr;
com_sq_m3lib_board_LineDirection.up.__enum__ = com_sq_m3lib_board_LineDirection;
com_sq_m3lib_board_LineDirection.right = ["right",2];
com_sq_m3lib_board_LineDirection.right.toString = $estr;
com_sq_m3lib_board_LineDirection.right.__enum__ = com_sq_m3lib_board_LineDirection;
com_sq_m3lib_board_LineDirection.down = ["down",3];
com_sq_m3lib_board_LineDirection.down.toString = $estr;
com_sq_m3lib_board_LineDirection.down.__enum__ = com_sq_m3lib_board_LineDirection;
var com_sq_m3lib_board_CellBorder = function() {
	this._lineSize = 0;
};
$hxClasses["com.sq.m3lib.board.CellBorder"] = com_sq_m3lib_board_CellBorder;
com_sq_m3lib_board_CellBorder.__name__ = true;
com_sq_m3lib_board_CellBorder.prototype = {
	setType: function(val) {
		this._type = val;
	}
	,getType: function() {
		return this._type;
	}
	,setBorderType: function(val) {
		this._borderType = val;
	}
	,getBorderType: function() {
		return this._borderType;
	}
	,setCornerDirection: function(val) {
		this._cornerDirection = val;
	}
	,getCornerDirection: function() {
		return this._cornerDirection;
	}
	,addLineDirection: function(val) {
		if(this._lineDirection == null) {
			this._lineDirection = [];
		}
		this._lineDirection.push(val);
	}
	,getLineDirection: function() {
		return this._lineDirection;
	}
	,setCoords: function(val) {
		this._coords = val;
	}
	,getCoords: function() {
		return this._coords;
	}
	,setLineSize: function(val) {
		this._lineSize = val;
	}
	,getLineSize: function() {
		return this._lineSize;
	}
	,addNearCornerDirection: function(val) {
		if(this._nearCorners == null) {
			this._nearCorners = [];
		}
		this._nearCorners.push(val);
	}
	,concatNeardirections: function(val) {
		if(this._nearCorners == null) {
			this._nearCorners = [];
			this._nearCorners = this._nearCorners.concat(val);
		} else {
			var _g = 0;
			while(_g < val.length) {
				var direction = val[_g];
				++_g;
				if(this._nearCorners.indexOf(direction) == -1) {
					this._nearCorners.push(direction);
				}
			}
		}
	}
	,getNearCornersDirection: function() {
		return this._nearCorners;
	}
	,isHorizonal: function() {
		if(this._lineDirection.indexOf(com_sq_m3lib_board_LineDirection.up) <= -1) {
			return this._lineDirection.indexOf(com_sq_m3lib_board_LineDirection.down) > -1;
		} else {
			return true;
		}
	}
	,isEqual: function(compareBorder) {
		var result = this._coords.isEqual(compareBorder.getCoords()) && this.getBorderType() == compareBorder.getBorderType() && this.getCornerDirection() == compareBorder.getCornerDirection();
		if(result) {
			result = this.isLineDirectionsEqual(compareBorder);
		}
		return result;
	}
	,cloneReversedCorner: function(horizonalLine) {
		var border = new com_sq_m3lib_board_CellBorder();
		border.setCoords(this._coords);
		border.setType(this._type);
		border.setBorderType(this._borderType);
		var i = this._lineDirection.length;
		while(--i >= 0) if(horizonalLine) {
			switch(this._lineDirection[i][1]) {
			case 0:
				border.addLineDirection(com_sq_m3lib_board_LineDirection.right);
				break;
			case 2:
				border.addLineDirection(com_sq_m3lib_board_LineDirection.left);
				break;
			default:
			}
		} else {
			switch(this._lineDirection[i][1]) {
			case 1:
				border.addLineDirection(com_sq_m3lib_board_LineDirection.down);
				break;
			case 3:
				border.addLineDirection(com_sq_m3lib_board_LineDirection.up);
				break;
			default:
			}
		}
		return border;
	}
	,isLineDirectionsEqual: function(compareBorder) {
		if(compareBorder.getLineDirection().length != this.getLineDirection().length) {
			return false;
		}
		var _g = 0;
		var _g1 = this.getLineDirection();
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			if(compareBorder.getLineDirection().indexOf(line) == -1) {
				return false;
			}
		}
		return true;
	}
	,getReversedDirection: function(lineDirection) {
		switch(lineDirection[1]) {
		case 0:
			return com_sq_m3lib_board_LineDirection.right;
		case 1:
			return com_sq_m3lib_board_LineDirection.down;
		case 2:
			return com_sq_m3lib_board_LineDirection.left;
		case 3:
			return com_sq_m3lib_board_LineDirection.up;
		}
	}
	,__class__: com_sq_m3lib_board_CellBorder
};
var com_sq_m3lib_board_CellCaptureParams = function(type) {
	this.type = type;
};
$hxClasses["com.sq.m3lib.board.CellCaptureParams"] = com_sq_m3lib_board_CellCaptureParams;
com_sq_m3lib_board_CellCaptureParams.__name__ = true;
com_sq_m3lib_board_CellCaptureParams.prototype = {
	getType: function() {
		return this.type;
	}
	,getDescription: function() {
		var result = { };
		result.type = this.type;
		return result;
	}
	,__class__: com_sq_m3lib_board_CellCaptureParams
};
var com_sq_m3lib_board_CellTeleport = function(from,to,vector) {
	this.fromCell = from;
	this.toCell = to;
	this.vector = vector;
	this.oppositeTeleport = null;
};
$hxClasses["com.sq.m3lib.board.CellTeleport"] = com_sq_m3lib_board_CellTeleport;
com_sq_m3lib_board_CellTeleport.__name__ = true;
com_sq_m3lib_board_CellTeleport.prototype = {
	getFromCell: function() {
		return this.fromCell;
	}
	,getToCell: function() {
		return this.toCell;
	}
	,setOppositeTeleport: function(val) {
		this.oppositeTeleport = val;
	}
	,__class__: com_sq_m3lib_board_CellTeleport
};
var com_sq_m3lib_board_CellWeight = function(cell) {
	this.cell = null;
	this.weight = 0;
	this.cell = cell;
};
$hxClasses["com.sq.m3lib.board.CellWeight"] = com_sq_m3lib_board_CellWeight;
com_sq_m3lib_board_CellWeight.__name__ = true;
com_sq_m3lib_board_CellWeight.prototype = {
	__class__: com_sq_m3lib_board_CellWeight
};
var com_sq_m3lib_board_CollectableItemsManager = function(engine) {
	this.inited = false;
	this._gameEngine = engine;
	this.cellsOnCollectableWay = [];
};
$hxClasses["com.sq.m3lib.board.CollectableItemsManager"] = com_sq_m3lib_board_CollectableItemsManager;
com_sq_m3lib_board_CollectableItemsManager.__name__ = true;
com_sq_m3lib_board_CollectableItemsManager.prototype = {
	loadConfig: function(params,description) {
		this.removeListeners();
		this.inited = true;
		this.cellsOnCollectableWay = [];
		if(params.targetCells == null) {
			return;
		}
		this.targetCells = (js_Boot.__cast(this._gameEngine.targetsManager.getTargetById("reach_target_cell") , com_sq_m3lib_game_gameTargets_targetProgress_ReachTargetCellsTargetProgress)).targetCells;
		this._itemDescription = com_sq_m3lib_board_ItemFactoryDescription.fromJson(description);
	}
	,recalculateCellsOnCollectableWay: function() {
		if(this._itemDescription == null) {
			return;
		}
		this.cellsOnCollectableWay = [];
		var cellsOnWayCount = 0;
		var collectables = this._gameEngine.board.boardUtils.getItemsOnBoard([this._itemDescription]);
		var count = collectables.length;
		if(count == 0) {
			return;
		}
		var item;
		var collectableCell;
		var targetCell;
		while(--count >= 0) {
			item = collectables[count];
			collectableCell = item.cell;
			targetCell = collectableCell;
			while(this._gameEngine.board.boardUtils.isCellInViewPort(targetCell.toCell)) {
				targetCell = targetCell.toCell;
				if(this.cellsOnCollectableWay.indexOf(targetCell) == -1) {
					this.cellsOnCollectableWay[cellsOnWayCount] = targetCell;
					++cellsOnWayCount;
				}
			}
		}
	}
	,isCellOnCollectableWay: function(cell) {
		if(this.cellsOnCollectableWay == null) {
			return false;
		}
		return this.cellsOnCollectableWay.indexOf(cell) >= 0;
	}
	,removeListeners: function() {
		this.inited = false;
	}
	,getItemsOnCollectableWay: function() {
		var result = [];
		var count = this.cellsOnCollectableWay.length;
		while(--count >= 0) result.push(this.cellsOnCollectableWay[count].getItem());
		return result;
	}
	,__class__: com_sq_m3lib_board_CollectableItemsManager
};
var com_sq_m3lib_board_CommonFactoryDictionary = function() {
};
$hxClasses["com.sq.m3lib.board.CommonFactoryDictionary"] = com_sq_m3lib_board_CommonFactoryDictionary;
com_sq_m3lib_board_CommonFactoryDictionary.__name__ = true;
com_sq_m3lib_board_CommonFactoryDictionary.getByAlias = function(classDictionary,alias) {
	if(__map_reserved[alias] != null?classDictionary.existsReserved(alias):classDictionary.h.hasOwnProperty(alias)) {
		return __map_reserved[alias] != null?classDictionary.getReserved(alias):classDictionary.h[alias];
	}
	return null;
};
com_sq_m3lib_board_CommonFactoryDictionary.getByClass = function(classDictionary,classDef) {
	var tmp = classDictionary.keys();
	while(tmp.hasNext()) {
		var alias = tmp.next();
		if((__map_reserved[alias] != null?classDictionary.getReserved(alias):classDictionary.h[alias]) == classDef) {
			return alias;
		}
	}
	return null;
};
com_sq_m3lib_board_CommonFactoryDictionary.prototype = {
	__class__: com_sq_m3lib_board_CommonFactoryDictionary
};
var com_sq_m3lib_board_CreateInfo = function(cell,combo) {
	this.cell = cell;
	this.combo = combo;
};
$hxClasses["com.sq.m3lib.board.CreateInfo"] = com_sq_m3lib_board_CreateInfo;
com_sq_m3lib_board_CreateInfo.__name__ = true;
com_sq_m3lib_board_CreateInfo.prototype = {
	getCell: function() {
		return this.cell;
	}
	,getCombo: function() {
		return this.combo;
	}
	,__class__: com_sq_m3lib_board_CreateInfo
};
var com_sq_m3lib_board_DestroyInfo = function(cell,cause,starter,scenario,newItem,combo) {
	this.cell = cell;
	this.cause = cause;
	this.starter = starter;
	this.newItem = newItem;
	this.setScenario(scenario);
};
$hxClasses["com.sq.m3lib.board.DestroyInfo"] = com_sq_m3lib_board_DestroyInfo;
com_sq_m3lib_board_DestroyInfo.__name__ = true;
com_sq_m3lib_board_DestroyInfo.prototype = {
	setScenario: function(scenario) {
		if(scenario != null) {
			this.actualScenario = scenario;
			this.scenario = this.actualScenario.mainScenario != null?this.actualScenario.mainScenario:this.actualScenario;
		}
	}
	,getCell: function() {
		return this.cell;
	}
	,getCause: function() {
		return this.cause;
	}
	,getStarter: function() {
		return this.starter;
	}
	,getNewItem: function() {
		return this.newItem;
	}
	,getScenario: function() {
		return this.scenario;
	}
	,getCombo: function() {
		return this.combo;
	}
	,__class__: com_sq_m3lib_board_DestroyInfo
};
var com_sq_m3lib_board_DestructionCause = function() { };
$hxClasses["com.sq.m3lib.board.DestructionCause"] = com_sq_m3lib_board_DestructionCause;
com_sq_m3lib_board_DestructionCause.__name__ = true;
var com_sq_m3lib_board_GravityChangeFactory = function(engine) {
	this._changedCount = 0;
	this._totalCellsToFill = 0;
	this._autoFillPerItem = 0;
	this._isAutoFill = false;
	this.inited = false;
	this._gameEngine = engine;
	this._onItemDestroyedCallback = null;
};
$hxClasses["com.sq.m3lib.board.GravityChangeFactory"] = com_sq_m3lib_board_GravityChangeFactory;
com_sq_m3lib_board_GravityChangeFactory.__name__ = true;
com_sq_m3lib_board_GravityChangeFactory.prototype = {
	loadConfig: function(gravityParams) {
		this.removeListeners();
		if(gravityParams == null) {
			com_sq_m3lib_log_CoreLog.log("CorError_NULL_NOT_ALLOWED");
			return;
		}
		if(gravityParams.autoFillPerItem <= 0 && gravityParams.fillMap == null || gravityParams.fillMap.length == 0) {
			return;
		}
		this.inited = true;
		this._gravityParams = gravityParams;
		this._onItemDestroyedCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("destroy_items",$bind(this,this.onItemDestroyed),-50);
		this._onUserMoveCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreItemsSwitchEvent.ITEM_SWITCH_SUCCESS,$bind(this,this.onUserMove),100);
		this._totalCellsToFill = this._gameEngine.board.getNonVoidCells(true).length;
		this.fillSpawnersInfo();
		this.fillMap();
	}
	,fillMap: function() {
		this._isAutoFill = false;
		this._changedCount = this._gameEngine.board.getGravityChangedCells().length;
		if(this._gravityParams == null) {
			return;
		}
		if(this._gravityParams.fillMap == null || this._gravityParams.fillMap.length == 0) {
			this._isAutoFill = true;
			this._autoFillPerItem = this._gravityParams.autoFillPerItem;
			return;
		}
		var i = -1;
		var length = this._gravityParams.fillMap.length;
		this.fillCells = new List();
		while(++i < length) this.fillCells.add(this._gravityParams.fillMap[i]);
	}
	,fillSpawnersInfo: function() {
		var spawner = this._gameEngine.spawnFactory.getSpecialSpawnersByClass(com_sq_m3lib_board_spawners_GravityChangerSpecialSpawner);
		if(spawner == null) {
			return;
		}
		this._specialGravitySpawner = js_Boot.__cast(spawner , com_sq_m3lib_board_spawners_GravityChangerSpecialSpawner);
		this._itemToSpawnDescriptions = this._specialGravitySpawner.spawnItemDescription;
	}
	,onItemDestroyed: function(e) {
		if(!js_Boot.__instanceof(e,com_sq_m3lib_events_CoreItemDestroyEvent)) {
			return;
		}
		var event = js_Boot.__cast(e , com_sq_m3lib_events_CoreItemDestroyEvent);
		if(!js_Boot.__instanceof(event.getItem(),com_sq_m3lib_board_items_ColorGravityChanger)) {
			return;
		}
		this.changeNextCellsGravity(event.getItem().destroyInfo.cell);
		if(this.fillFinished()) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreEvent(com_sq_m3lib_events_CoreCellGravityUpdateEvent.FIELD_FULL));
			return;
		}
		this.checkForcedSpawn(event.getItem().destroyInfo.cell);
	}
	,checkForcedSpawn: function(cell) {
		if(this._specialGravitySpawner == null) {
			return;
		}
		if(!this._specialGravitySpawner.needForcedSpawn()) {
			return;
		}
		if(this.canSpawnFromCommonSpawner()) {
			return;
		}
		var cellToChangeItem = this.getForcedSpawnCell(cell);
		if(cellToChangeItem != null) {
			var description = this._gameEngine.itemsFactory.cloneAttributes(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_GRAVITY_CHANGER_ITEM_DESCRIPTION);
			description.color = cellToChangeItem.item.getCurrentItemDescription().color;
			this._gameEngine.board.changeItemInCell(this._gameEngine.itemsFactory.getItem(description,cellToChangeItem.item.position,false),cellToChangeItem);
			this._specialGravitySpawner.forcedSpawnCount++;
		}
	}
	,getForcedSpawnCell: function(targetCell) {
		var fromCells = targetCell.fromCells;
		var j = fromCells.length;
		var oneCell;
		var checkResult = null;
		while(--j >= 0) {
			oneCell = fromCells[j];
			if(this._gameEngine.board.boardUtils.isCellInViewPort(oneCell)) {
				checkResult = this.getForcedSpawnCell(oneCell);
				if(checkResult != null) {
					return checkResult;
				}
			} else if(oneCell.hasItemInCell() && !oneCell.hasStableBlocker() && com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualItems(oneCell.item.getItemDescription(),com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_ITEM_DESCRIPTION)) {
				return oneCell;
			}
		}
		return null;
	}
	,canSpawnFromCommonSpawner: function() {
		var spawners = this._gameEngine.spawnFactory.spawners;
		var i = spawners.length;
		var spawner;
		while(--i >= 0) {
			spawner = spawners[i];
			if(!this._gameEngine.board.boardUtils.isCoordInViewPoint(spawner.coord)) {
				continue;
			}
			if(spawner.canSpecialSpawn(this._itemToSpawnDescriptions)) {
				return true;
			}
		}
		return false;
	}
	,changeNextCellsGravity: function(removedCell) {
		var cellsToFill = this._isAutoFill?this.getCellsToAutoFill(removedCell):this.fillCells.pop();
		if(cellsToFill == null) {
			return;
		}
		var i = cellsToFill.length;
		var cell;
		var changedCells = [];
		var changedLength = 0;
		while(--i >= 0) {
			cell = this._gameEngine.board.getCellByCoords(cellsToFill[i].x,cellsToFill[i].y,true);
			if(cell == null || cell.isVoid) {
				continue;
			}
			cell.hasGravityChanger = true;
			this._changedCount++;
			this._gameEngine.board.getMoveFactory().updateOnCellDirectionChanged(cell);
			changedCells[changedLength] = cell;
			++changedLength;
		}
		if(changedLength > 0) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreCellGravityUpdateEvent(changedCells));
		}
	}
	,fillFinished: function() {
		if(!(this._isAutoFill && this._totalCellsToFill <= this._changedCount)) {
			if(this.fillCells != null) {
				return this.fillCells.length == 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,getItemDescription: function() {
		var description = new com_sq_m3lib_board_ItemFactoryDescription();
		description.className = com_sq_m3lib_board_ItemsFactoryDictionary.getByClass(com_sq_m3lib_board_items_ColorGravityChanger);
		return description;
	}
	,getCellsToAutoFill: function(cell) {
		var nearestGravityChangedCell;
		var candidates = [];
		var cellToChangeGravity = null;
		var changedViewPoints = [];
		var changedCells = [];
		var changedLength = 0;
		var i = this._autoFillPerItem;
		while(--i >= 0) {
			cellToChangeGravity = null;
			nearestGravityChangedCell = this.getNearestGravityChangedCell(cell);
			if(!nearestGravityChangedCell.hasGravityChanger && changedCells.indexOf(nearestGravityChangedCell) == -1) {
				candidates = [nearestGravityChangedCell];
			} else {
				candidates = this.getChangeGravityCandidates(nearestGravityChangedCell,changedCells,[]);
			}
			if(candidates.length > 0) {
				cellToChangeGravity = candidates[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(candidates.length)];
			}
			if(cellToChangeGravity != null) {
				changedCells[changedLength] = cellToChangeGravity;
				changedViewPoints[changedLength] = cellToChangeGravity.coords.toViewPoint();
				++changedLength;
			} else {
				break;
			}
		}
		return changedViewPoints;
	}
	,getNearestGravityChangedCell: function(cell,step) {
		if(step == null) {
			step = 0;
		}
		++step;
		var cellCoords = cell.coords;
		var candidate;
		var hasNonVoidCandidate = false;
		var checkDirections = [[-step,0],[0,step],[-step,step]];
		var checkIndex = checkDirections.length;
		while(--checkIndex >= 0) {
			candidate = this._gameEngine.board.getCellByCoords(cellCoords.x + checkDirections[checkIndex][0],cellCoords.y + checkDirections[checkIndex][1],true);
			if(candidate != null && !candidate.isVoid) {
				hasNonVoidCandidate = true;
				if(candidate.hasGravityChanger) {
					return candidate;
				}
			}
		}
		if(!hasNonVoidCandidate) {
			return cell;
		}
		return this.getNearestGravityChangedCell(cell,step);
	}
	,getChangeGravityCandidates: function(cell,currentCandidates,checkedCandidates) {
		if(checkedCandidates.indexOf(cell) >= 0) {
			return [];
		}
		checkedCandidates.push(cell);
		var result = [];
		var candidatesWithGravityChanger = [];
		var candidate;
		var nearCells = this._gameEngine.board.getNearCells(cell);
		var checkIndex = nearCells.length;
		while(--checkIndex >= 0) {
			candidate = nearCells[checkIndex];
			if(currentCandidates.indexOf(candidate) >= 0) {
				continue;
			}
			if(checkedCandidates.indexOf(candidate) >= 0) {
				continue;
			}
			if(!candidate.hasGravityChanger) {
				result.push(candidate);
				checkedCandidates.push(candidate);
			} else {
				candidatesWithGravityChanger.push(candidate);
			}
		}
		var candidatesWithGravityIndex = candidatesWithGravityChanger.length;
		while(--candidatesWithGravityIndex >= 0) result = result.concat(this.getChangeGravityCandidates(candidatesWithGravityChanger[candidatesWithGravityIndex],currentCandidates,checkedCandidates));
		return result;
	}
	,onBoardReadyToStabilize: function() {
		if(this.fillFinished() && this._gameEngine.board.getItemOnBoardCount(this.getItemDescription()) > 0) {
			this._gameEngine.board.convertToSimpleItems(this.getItemDescription());
		}
	}
	,onUserMove: function(e) {
		if(this._specialGravitySpawner != null) {
			this._specialGravitySpawner.resetForcedSpawnCount();
		}
	}
	,removeListeners: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("destroy_items",this._onItemDestroyedCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreItemsSwitchEvent.ITEM_SWITCH_SUCCESS,this._onUserMoveCallback);
		this._onItemDestroyedCallback = null;
		this._changedGravityCells = [];
		this._gravityParams = null;
		this._itemToSpawnDescriptions = null;
		this._specialGravitySpawner = null;
		this.inited = false;
		this._isAutoFill = false;
	}
	,__class__: com_sq_m3lib_board_GravityChangeFactory
};
var com_sq_m3lib_board_HiddenObjectsFactoryDictionary = function() {
};
$hxClasses["com.sq.m3lib.board.HiddenObjectsFactoryDictionary"] = com_sq_m3lib_board_HiddenObjectsFactoryDictionary;
com_sq_m3lib_board_HiddenObjectsFactoryDictionary.__name__ = true;
com_sq_m3lib_board_HiddenObjectsFactoryDictionary.getByAlias = function(alias) {
	return com_sq_m3lib_board_CommonFactoryDictionary.getByAlias(com_sq_m3lib_coreSettings_CoreClassesDictionary.hiddenObjectsClassesDictionary,alias);
};
com_sq_m3lib_board_HiddenObjectsFactoryDictionary.getByClass = function(classDef) {
	return com_sq_m3lib_board_CommonFactoryDictionary.getByClass(com_sq_m3lib_coreSettings_CoreClassesDictionary.hiddenObjectsClassesDictionary,classDef);
};
com_sq_m3lib_board_HiddenObjectsFactoryDictionary.prototype = {
	__class__: com_sq_m3lib_board_HiddenObjectsFactoryDictionary
};
var com_sq_m3lib_board_HiddenObjectsManager = function(gameEngine) {
	this._lastChangesIndex = 0;
	this._gameEngine = gameEngine;
	this._inited = false;
};
$hxClasses["com.sq.m3lib.board.HiddenObjectsManager"] = com_sq_m3lib_board_HiddenObjectsManager;
com_sq_m3lib_board_HiddenObjectsManager.__name__ = true;
com_sq_m3lib_board_HiddenObjectsManager.prototype = {
	loadConfig: function(params) {
		this.removeListeners();
		this._inited = true;
		this._cellsToDiscover = new haxe_ds_ObjectMap();
		this._destroyingCovers = [];
		var i = -1;
		var count = params.length;
		var object;
		this._possiblePlacement = [];
		while(++i < count) {
			object = this.createByConfig(params[i].description);
			this._possiblePlacement[i] = new com_sq_m3lib_board_cellHiddenObjects_PossiblePlacementData(object,params[i]);
		}
		this.placeHiddenObjects();
		if(this._placedObjects.keys().hasNext()) {
			this._gameEngine.board.placeHiddenObjects(this._placedObjects);
			this.fillHiddenCellsArray();
			this._onCellCoverBlownCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreHiddenObjectEvent.DESTROYED,$bind(this,this.onCellCoverBlown),-50);
		}
	}
	,createByConfig: function(objectParams) {
		return Type.createInstance(com_sq_m3lib_board_HiddenObjectsFactoryDictionary.getByAlias(objectParams.classname),[objectParams]);
	}
	,placeHiddenObjects: function() {
		this._changes = [];
		this._checkedPlacementsOnChangesIndex = [];
		this._lastChangesIndex = 0;
		this._placedObjects = new haxe_ds_ObjectMap();
		var placementCount = this._possiblePlacement.length;
		var i = -1;
		var placementItem;
		while(++i < placementCount) {
			placementItem = this._possiblePlacement[i];
			if(!this.placeOneHiddenType(placementItem,i)) {
				if(this._placedObjects.h[this._possiblePlacement[i].hiddenObject.__id__].length == 0) {
					--i;
				}
				if(i < 0) {
					break;
				}
				if(!this.restoreLastChanges(this._possiblePlacement[i],placementItem)) {
					break;
				}
				--i;
			}
		}
		if(i != placementCount) {
			com_sq_m3lib_log_CoreLog.log("CoreError_NOT_VALID_HIDDEN_OBJECTS_PLACEMENT");
			var tmp = this._placedObjects.keys();
			while(tmp.hasNext()) this._placedObjects.remove(tmp.next());
		}
	}
	,placeOneHiddenType: function(placementItem,index) {
		if(this._placedObjects.h[placementItem.hiddenObject.__id__] == null) {
			this._placedObjects.set(placementItem.hiddenObject,[]);
		}
		var placedCount = this._placedObjects.h[placementItem.hiddenObject.__id__].length;
		var randomPlaces;
		var needCount = placementItem.count;
		if(needCount == 0) {
			return true;
		}
		var randomPlacement;
		while(placedCount < needCount) {
			randomPlaces = placementItem.placement.length;
			if(randomPlaces == 0) {
				return false;
			}
			randomPlacement = placementItem.placement[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(randomPlaces)];
			HxOverrides.remove(placementItem.placement,randomPlacement);
			this._placedObjects.h[placementItem.hiddenObject.__id__][placedCount] = randomPlacement;
			++placedCount;
			this.cutTakenCoords(this._possiblePlacement,placementItem.hiddenObject.getTakenCoords(randomPlacement),index);
			this._lastChangesIndex++;
			if(!this.canPlaceOtherObjects(this._possiblePlacement,index)) {
				return false;
			}
		}
		return true;
	}
	,cutTakenCoords: function(params,takenCoords,index) {
		if(takenCoords == null) {
			return;
		}
		var i = params.length;
		var paramItem;
		var resultPlacement = null;
		var changePlacement = null;
		var placementCoord;
		var j;
		var takenCount = takenCoords.length;
		var k;
		while(--i >= index) {
			resultPlacement = [];
			changePlacement = [];
			paramItem = params[i];
			j = paramItem.placement.length;
			while(--j >= 0) {
				placementCoord = paramItem.placement[j];
				k = takenCount;
				while(--k >= 0) if(paramItem.hiddenObject.isOverlapCoordOnPlacement(placementCoord,takenCoords[k])) {
					changePlacement.push(placementCoord);
					break;
				}
				if(k >= 0) {
					continue;
				}
				resultPlacement.push(placementCoord);
			}
			paramItem.placement = resultPlacement;
			if(changePlacement.length > 0) {
				if(this._changes[this._lastChangesIndex] == null) {
					this._changes[this._lastChangesIndex] = new haxe_ds_ObjectMap();
				}
				this._changes[this._lastChangesIndex].set(paramItem.hiddenObject,changePlacement);
			}
		}
	}
	,restoreLastChanges: function(placementItem,lastPlacementItem) {
		if(this._checkedPlacementsOnChangesIndex[this._lastChangesIndex] != null) {
			lastPlacementItem.placement = lastPlacementItem.placement.concat(this._checkedPlacementsOnChangesIndex[this._lastChangesIndex]);
			this._checkedPlacementsOnChangesIndex[this._lastChangesIndex] = [];
		}
		this._lastChangesIndex--;
		if(this._lastChangesIndex < 0) {
			return false;
		}
		if(this._placedObjects.h[placementItem.hiddenObject.__id__].length > 0) {
			var wasPlacedAt = this._placedObjects.h[placementItem.hiddenObject.__id__].pop();
			if(this._checkedPlacementsOnChangesIndex[this._lastChangesIndex] == null) {
				this._checkedPlacementsOnChangesIndex[this._lastChangesIndex] = [];
			}
			this._checkedPlacementsOnChangesIndex[this._lastChangesIndex].push(wasPlacedAt);
		}
		if(this._changes[this._lastChangesIndex] == null) {
			return true;
		}
		var changes;
		var tmp = this._changes[this._lastChangesIndex].keys();
		while(tmp.hasNext()) {
			var hiddenObject = tmp.next();
			changes = this._changes[this._lastChangesIndex].get(hiddenObject);
			this._changes[this._lastChangesIndex].remove(hiddenObject);
			var index = this.getPlacementIndexByObject(hiddenObject);
			this._possiblePlacement[index].placement = this._possiblePlacement[index].placement.concat(changes);
		}
		return true;
	}
	,canPlaceOtherObjects: function(params,index) {
		var i = params.length;
		while(--i > index) if(params[i].placement.length == 0) {
			return false;
		}
		return true;
	}
	,getPlacementIndexByObject: function(hiddenObject) {
		var i = this._possiblePlacement.length;
		while(--i >= 0) if(this._possiblePlacement[i].hiddenObject == hiddenObject) {
			return i;
		}
		return -1;
	}
	,onCellCoverBlown: function(e) {
		if(!js_Boot.__instanceof(e,com_sq_m3lib_events_CoreHiddenObjectEvent)) {
			return;
		}
		var eventCell = (js_Boot.__cast(e , com_sq_m3lib_events_CoreHiddenObjectEvent)).getCell();
		if(eventCell == null) {
			return;
		}
		if(eventCell.cover == null || !eventCell.cover.isDestroyed()) {
			return;
		}
		if(this._cellsToDiscover.h.__keys__[eventCell.__id__] != null) {
			this._destroyingCovers.push(eventCell);
		}
	}
	,checkDiscoveredObjects: function() {
		if(!this._inited) {
			return;
		}
		var boardHiddenObject;
		var destroyingCount = this._destroyingCovers.length;
		var i = destroyingCount;
		var cell;
		while(--i >= 0) {
			cell = this._destroyingCovers[i];
			if(cell.cover == null || cell.cover.isAnimationStable()) {
				boardHiddenObject = cell.hiddenObject;
				boardHiddenObject.onCellDiscovered(cell);
				this._cellsToDiscover.remove(cell);
				--destroyingCount;
				this._destroyingCovers[i] = this._destroyingCovers[destroyingCount];
				this._destroyingCovers.pop();
				cell.hiddenObject = null;
			}
		}
		var hiddenObjects = this._gameEngine.board.hiddenObjects;
		var length = hiddenObjects.length;
		i = length;
		while(--i >= 0) {
			boardHiddenObject = hiddenObjects[i];
			if(boardHiddenObject.isDiscovered()) {
				this._gameEngine.scoreFactory.addHiddenObjectScore(boardHiddenObject,"hiddenObjectFound");
				com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreHiddenObjectEvent(com_sq_m3lib_events_CoreHiddenObjectEvent.DISCOVERED,null,boardHiddenObject));
				this._gameEngine.destroyFactory.destroyCellItems(boardHiddenObject.getCells(),"hiddenObjectFound");
				if(i < length - 1) {
					hiddenObjects[i] = hiddenObjects[length - 1];
				}
				hiddenObjects.pop();
				--length;
			}
		}
	}
	,fillHiddenCellsArray: function() {
		this._cellsToDiscover = new haxe_ds_ObjectMap();
		var hiddenObjects = this._gameEngine.board.hiddenObjects;
		var boardHiddenObject;
		var i = hiddenObjects.length;
		var j;
		var cells;
		while(--i >= 0) {
			boardHiddenObject = hiddenObjects[i];
			cells = boardHiddenObject.getCellsLeft();
			j = cells.length;
			while(--j >= 0) {
				var cell = cells[j];
				if(this._cellsToDiscover.h.__keys__[cell.__id__] != null) {
					com_sq_m3lib_log_CoreLog.log("CoreError_NOT_VALID_HIDDEN_OBJECTS_PLACEMENT");
					return;
				}
				cell.hiddenObject = boardHiddenObject;
				this._cellsToDiscover.set(cell,boardHiddenObject);
			}
		}
	}
	,removeListeners: function() {
		if(this._onCellCoverBlownCallback != null) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreHiddenObjectEvent.DESTROYED,this._onCellCoverBlownCallback);
		}
		this._inited = false;
	}
	,__class__: com_sq_m3lib_board_HiddenObjectsManager
};
var com_sq_m3lib_board_ItemAnimationFactory = function() { };
$hxClasses["com.sq.m3lib.board.ItemAnimationFactory"] = com_sq_m3lib_board_ItemAnimationFactory;
com_sq_m3lib_board_ItemAnimationFactory.__name__ = true;
com_sq_m3lib_board_ItemAnimationFactory.getLength = function(animationName) {
	var _this = com_sq_m3lib_coreSettings_CoreSettings.animationParams;
	if(__map_reserved[animationName] != null?_this.existsReserved(animationName):_this.h.hasOwnProperty(animationName)) {
		var _this1 = com_sq_m3lib_coreSettings_CoreSettings.animationParams;
		return (__map_reserved[animationName] != null?_this1.getReserved(animationName):_this1.h[animationName]).animationLength;
	}
	return 0;
};
var com_sq_m3lib_board_ItemFactoryDescription = function() {
	this.viewPortPriority = 0;
	this.color = -1;
};
$hxClasses["com.sq.m3lib.board.ItemFactoryDescription"] = com_sq_m3lib_board_ItemFactoryDescription;
com_sq_m3lib_board_ItemFactoryDescription.__name__ = true;
com_sq_m3lib_board_ItemFactoryDescription.fromJson = function(data) {
	var result = null;
	if(data != null) {
		result = new com_sq_m3lib_board_ItemFactoryDescription();
		result.className = data.className;
		result.color = data.color;
		result.viewPortPriority = data.viewPortPriority;
	}
	return result;
};
com_sq_m3lib_board_ItemFactoryDescription.prototype = {
	clone: function() {
		var result = new com_sq_m3lib_board_ItemFactoryDescription();
		result.className = this.className;
		result.color = this.color;
		result.viewPortPriority = this.viewPortPriority;
		return result;
	}
	,__class__: com_sq_m3lib_board_ItemFactoryDescription
};
var com_sq_m3lib_board_ItemMoveFactory = function() {
};
$hxClasses["com.sq.m3lib.board.ItemMoveFactory"] = com_sq_m3lib_board_ItemMoveFactory;
com_sq_m3lib_board_ItemMoveFactory.__name__ = true;
com_sq_m3lib_board_ItemMoveFactory.setSpeed = function(speed,diagonalSpeed) {
	com_sq_m3lib_coreSettings_CoreSettings.moveParams.commonAcceleration = speed;
	com_sq_m3lib_coreSettings_CoreSettings.moveParams.diagonalAcceleration = diagonalSpeed;
};
com_sq_m3lib_board_ItemMoveFactory.prototype = {
	init: function(board) {
		this._board = board;
	}
	,switchCellByCoords: function(coord,switchCoord) {
		var cell = this._board.getCellByCoords(coord.x,coord.y,true);
		var switchCell = this._board.getCellByCoords(switchCoord.x,switchCoord.y,true);
		this.switchItems(cell,switchCell,cell.item,switchCell.item);
	}
	,switchByCombinationCandidate: function(candidate) {
		var cell = candidate.cell;
		var switchCell = candidate.switchCell;
		this.switchItems(cell,switchCell,cell.item,switchCell.item);
	}
	,switchByCellsWithCheck: function(cell,switchCell) {
		var item = cell.item;
		var switchItem = switchCell.item;
		if(!this.canSwitchItems(item,switchItem)) {
			return;
		}
		this.switchItems(cell,switchCell,item,switchItem);
	}
	,switchItems: function(cell,switchCell,item,switchItem,moveSubtraction) {
		if(moveSubtraction == null) {
			moveSubtraction = true;
		}
		com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.switchCells(cell,switchCell,this._board.gameEngine.comboFactory.combinationCandidateList.length));
		this.resetItemToCell(item,switchCell);
		this.resetItemToCell(switchItem,cell);
		if(moveSubtraction) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemsSwitchEvent(com_sq_m3lib_events_CoreItemsSwitchEvent.ITEM_SWITCH_SUCCESS,item,switchItem));
		}
		var comboToBe = this._board.gameEngine.comboFactory.getComboByCandidates(cell,switchCell);
		if(comboToBe != null && comboToBe.combination.comboTemplate.scenario != null) {
			comboToBe.combination.cells = [cell,switchCell];
			this._board.gameEngine.destroyFactory.queueUserSpecialCombo(comboToBe.combination);
			this._board.resetCellCheckParams();
		}
		this._board.unstabilize();
	}
	,canSwitchItems: function(item,switchItem) {
		var cell = item.cell;
		var switchCell = switchItem.cell;
		if(!this._board.areNeighbours(cell,switchCell)) {
			return false;
		}
		if(!cell.canMoveItem() || !switchCell.canMoveItem()) {
			return false;
		}
		if(!item.canSelect() || !switchItem.canSelect()) {
			return false;
		}
		return this._board.gameEngine.comboFactory.getComboByCandidates(cell,switchCell) != null;
	}
	,moveItemsOnTick: function() {
		var isMovingActive = false;
		var isMovingDiagonal = false;
		var movedItems = [];
		if(this._board.items.length > 0) {
			isMovingActive = this.moveActiveItems(movedItems);
			isMovingDiagonal = this.tryFillEmptyCells(movedItems);
		}
		return new com_sq_m3lib_board_ItemsMoveResult(isMovingActive || isMovingDiagonal,movedItems);
	}
	,moveActiveItems: function(movedItems) {
		var item;
		var wasCoords;
		var isMoving = false;
		var items = this._board.items;
		var itemsLength = items.length;
		var i = -1;
		while(++i < itemsLength) {
			item = items[i];
			if(item.isMoving) {
				wasCoords = item.position.clone();
				this.moveCellItem(item.cell);
				if(!item.position.isEqual(wasCoords)) {
					isMoving = true;
					movedItems.push(item);
				}
			}
		}
		return isMoving;
	}
	,tryFillEmptyCells: function(movedItems) {
		var emptyCells = this._board.boardUtils.getEmptyCells(false);
		var emptyCount = emptyCells.length;
		if(emptyCount == 0) {
			return this.resetStoppedItemsToCells(movedItems);
		}
		var isMoving = false;
		var item;
		var cell;
		var tryDiagonalFill = [];
		var possibleFill = [];
		var fromCells = [];
		var fromLength;
		var cellSpawner;
		var moveItem;
		var i = -1;
		var j = -1;
		while(++i < emptyCount) {
			cell = emptyCells[i];
			cellSpawner = cell.spawner;
			if(cellSpawner != null && com_sq_m3lib_geometry_CellVector.ofSameDirection(cellSpawner.spawnVector,cell.getCurrentMoveVector())) {
				continue;
			}
			fromCells = cell.fromCells.slice();
			fromLength = fromCells.length;
			var teleportsToCell = cell.teleportsToCell;
			j = teleportsToCell.length;
			while(--j >= 0) if(this.isTeleportEnabledFromCell(teleportsToCell[j])) {
				fromCells[fromLength] = teleportsToCell[j].fromCell;
				++fromLength;
			}
			j = -1;
			var possibleCell;
			var possibleFillLength = 0;
			while(++j < fromLength) {
				possibleCell = fromCells[j];
				if(this.hasItemInCell(possibleCell) && possibleCell.canMoveItem()) {
					possibleFill[possibleFillLength] = possibleCell;
					++possibleFillLength;
				}
			}
			if(possibleFillLength > 0) {
				var moveCell = possibleFill[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(possibleFillLength)];
				if(this.canMoveCellItem(moveCell)) {
					moveItem = moveCell.item;
					var wasCoords = moveItem.position.clone();
					this.moveCellItem(moveCell);
					if(!moveItem.position.isEqual(wasCoords)) {
						isMoving = true;
						movedItems.push(moveItem);
					}
					if(!moveCell.hasItemInCell()) {
						emptyCells[emptyCount] = moveCell;
						++emptyCount;
					}
				}
			} else {
				tryDiagonalFill.push(cell);
			}
		}
		if(!this.resetStoppedItemsToCells(movedItems)) {
			isMoving = isMoving;
		} else {
			isMoving = true;
		}
		emptyCount = tryDiagonalFill.length;
		if(emptyCount == 0) {
			return isMoving;
		}
		i = -1;
		while(++i < emptyCount) {
			cell = tryDiagonalFill[i];
			var needDiagonalFill = this.checkDiagonalMove(cell);
			if(needDiagonalFill != null && needDiagonalFill.length > 0) {
				var fromCell = this.getCellForDiagonalFill(cell,needDiagonalFill);
				if(fromCell == null) {
					continue;
				}
				this.fillDiagonalCell(fromCell,cell);
				item = cell.item;
				if(item != null) {
					this.moveCellItem(cell);
					isMoving = true;
					movedItems.push(item);
				}
				if(!fromCell.hasItemInCell()) {
					tryDiagonalFill[emptyCount] = fromCell;
					++emptyCount;
				}
			}
		}
		if(!this.resetStoppedItemsToCells(movedItems)) {
			return isMoving;
		} else {
			return true;
		}
	}
	,resetStoppedItemsToCells: function(movedItems) {
		var items = this._board.getItems(true);
		var item;
		var wasCoords;
		var itemsLength = items.length;
		var isMoving = false;
		var i = -1;
		while(++i < itemsLength) {
			item = items[i];
			if(!item.isMoving && !item.isStable()) {
				wasCoords = item.position.clone();
				this.resetItemToCell(item,item.cell);
				if(!item.position.isEqual(wasCoords)) {
					isMoving = true;
					movedItems.push(item);
				}
			}
		}
		return isMoving;
	}
	,pushToChangesArray: function(item,wasCoords,movedItems) {
		movedItems.push(item);
	}
	,moveCellItem: function(cell) {
		var newItemX = 0;
		var newItemY = 0;
		var coordsDeltaX = 0;
		var coordsDeltaY = 0;
		var currentCell = cell;
		var item = cell.item;
		var currentSpeed = item.speed;
		var currentItemVector = item.currentMoveVector;
		var isInCurrentCell = this.checkCell(cell,currentItemVector,item.position.x,item.position.y);
		var targetCell = cell.toCell;
		var possibleTeleport = this.needTeleport(item,cell);
		if(possibleTeleport != null) {
			if(this.isInTeleportPosition(item,possibleTeleport.fromCell,possibleTeleport.vector)) {
				this.makeTeleport(item,possibleTeleport);
				return;
			}
			targetCell = possibleTeleport.toCell;
		}
		if(!this.canMoveToCell(targetCell) && !item.isMoving) {
			if(isInCurrentCell) {
				this.resetItemToCell(item,cell);
				return;
			} else {
				targetCell = cell;
			}
		}
		cell.setItem(null);
		if(currentItemVector == null || isInCurrentCell) {
			currentItemVector = cell.getCurrentMoveVector();
		}
		currentSpeed = this.increaseSpeed(currentSpeed,currentItemVector != null && currentItemVector.getAxisLengthSumm() > 1);
		newItemX = item.position.x + currentItemVector.x * currentSpeed;
		newItemY = item.position.y + currentItemVector.y * currentSpeed;
		var cellBoardCoords = this._board.getCellBoardCoords(cell);
		coordsDeltaX = newItemX - cellBoardCoords.x;
		coordsDeltaY = newItemY - cellBoardCoords.y;
		while(this.checkCell(currentCell,currentItemVector,newItemX,newItemY)) {
			if(currentItemVector.getAxisLengthSumm() > 1) {
				this.resetItemToCell(item,currentCell);
				return;
			}
			if(!this.canMoveToCell(targetCell)) {
				this.pauseItemInCell(item,currentCell);
				return;
			}
			var currentCellVector = currentCell.getCurrentMoveVector();
			if(com_sq_m3lib_geometry_CellVector.multiply(currentItemVector,currentCellVector) == 0) {
				var rotateResult = com_sq_m3lib_geometry_CellVector.rotateCoords(coordsDeltaX,coordsDeltaY,currentItemVector,currentCellVector);
				coordsDeltaX = rotateResult.x;
				coordsDeltaY = rotateResult.y;
			}
			currentItemVector = currentCellVector;
			cellBoardCoords = this._board.getCellBoardCoords(currentCell);
			newItemX = cellBoardCoords.x + coordsDeltaX;
			newItemY = cellBoardCoords.y + coordsDeltaY;
			possibleTeleport = this.needTeleport(item,currentCell);
			if(possibleTeleport != null) {
				if(this.isInTeleportPosition(item,possibleTeleport.fromCell,possibleTeleport.vector)) {
					this.makeTeleport(item,possibleTeleport);
					return;
				} else {
					currentCell = targetCell;
					break;
				}
			}
			currentCell = targetCell;
			targetCell = currentCell.toCell;
			isInCurrentCell = this.checkCell(currentCell,currentItemVector,newItemX,newItemY);
			currentCellVector = currentCell.getCurrentMoveVector();
			if(isInCurrentCell) {
				if(!this.canMoveToCell(targetCell)) {
					this.resetItemToCell(item,currentCell);
					return;
				}
			} else {
				targetCell = currentCell;
			}
			if(currentCellVector != null) {
				var targetCellCoords = this._board.getCellBoardCoords(currentCell);
				coordsDeltaX = newItemX - targetCellCoords.x;
				coordsDeltaY = newItemY - targetCellCoords.y;
			} else {
				item.position = this._board.getCellBoardCoords(targetCell);
			}
		}
		item.position = new com_sq_m3lib_geometry_Coord(newItemX,newItemY);
		currentCell.setItem(item);
		item.speed = currentSpeed;
		item.currentMoveVector = currentItemVector;
		item.isMoving = true;
	}
	,increaseSpeed: function(speed,isDiagonal) {
		if(isDiagonal == null) {
			isDiagonal = false;
		}
		if(isDiagonal) {
			speed += com_sq_m3lib_coreSettings_CoreSettings.moveParams.diagonalAcceleration;
		} else {
			speed += com_sq_m3lib_coreSettings_CoreSettings.moveParams.commonAcceleration;
		}
		if(speed > com_sq_m3lib_coreSettings_CoreSettings.moveParams.maxSpeed) {
			speed = com_sq_m3lib_coreSettings_CoreSettings.moveParams.maxSpeed;
		}
		return speed;
	}
	,makeTeleport: function(item,teleport) {
		var currentCell = teleport.fromCell;
		var targetCell = teleport.toCell;
		if(this.hasItemInCell(targetCell) && targetCell.item != item) {
			return;
		}
		var cellBoardCoords = this._board.getCellBoardCoords(currentCell);
		var coordsDeltaX = item.position.x - cellBoardCoords.x;
		var coordsDeltaY = item.position.y - cellBoardCoords.y;
		var currentMoveVector = item.currentMoveVector;
		var teleportMoveVector = targetCell.getCurrentMoveVector();
		if(teleportMoveVector != null) {
			if(currentMoveVector != null) {
				if(com_sq_m3lib_geometry_CellVector.multiply(currentMoveVector,teleportMoveVector) == 0) {
					var rotateResult = com_sq_m3lib_geometry_CellVector.rotateCoords(coordsDeltaX,coordsDeltaY,currentMoveVector,teleportMoveVector);
					coordsDeltaX = -rotateResult.x;
					coordsDeltaY = -rotateResult.y;
				} else {
					coordsDeltaX *= -currentMoveVector.x * teleportMoveVector.x;
					coordsDeltaY *= -currentMoveVector.y * teleportMoveVector.y;
				}
			}
			item.currentMoveVector = teleportMoveVector;
		}
		var targetCellBoardCoord = this._board.getCellBoardCoords(targetCell);
		item.position = new com_sq_m3lib_geometry_Coord(targetCellBoardCoord.x + coordsDeltaX,targetCellBoardCoord.y + coordsDeltaY);
		if(currentCell.item == item) {
			currentCell.setItem(null);
		}
		targetCell.setItem(item);
		this.moveCellItem(targetCell);
	}
	,isInTeleportPosition: function(item,teleportCell,teleportVector) {
		var teleportCellCoord = this._board.getCellBoardCoords(teleportCell);
		var teleportPosition = new com_sq_m3lib_geometry_Coord(teleportCellCoord.x + com_sq_m3lib_coreSettings_CoreSettings.moveParams.teleportSize * teleportVector.x,teleportCellCoord.y + com_sq_m3lib_coreSettings_CoreSettings.moveParams.teleportSize * teleportVector.y);
		var coordsDifference = teleportPosition.getDifferenceVector(item.position.x,item.position.y);
		if(!this.checkTeleportCell(teleportCell,item.currentMoveVector,item.position.x,item.position.y)) {
			return false;
		}
		if(teleportPosition.x == item.position.x && teleportPosition.y == item.position.y) {
			return true;
		}
		if(coordsDifference.getSignedAxisLength() * teleportCell.getCurrentMoveVector().getSignedAxisLength() < 0) {
			return true;
		}
		return false;
	}
	,needTeleport: function(item,cell) {
		if(!cell.hasTeleport()) {
			return null;
		}
		var possibleTeleports = cell.teleportsFromCell;
		var i = possibleTeleports.length;
		var cellTeleport;
		while(--i >= 0) {
			cellTeleport = possibleTeleports[i];
			if(!this.isTeleportEnabledForItem(item,cellTeleport)) {
				continue;
			}
			return cellTeleport;
		}
		possibleTeleports = cell.teleportsToCell;
		i = possibleTeleports.length;
		while(--i >= 0) {
			cellTeleport = possibleTeleports[i];
			if(!this.isTeleportEnabledForItem(item,cellTeleport)) {
				continue;
			}
			return cellTeleport;
		}
		return null;
	}
	,isTeleportEnabledForItem: function(item,cellTeleport) {
		if(item == null) {
			return false;
		}
		if(!this.checkTeleportCell(cellTeleport.fromCell,item.currentMoveVector,item.position.x,item.position.y)) {
			return false;
		}
		if(!com_sq_m3lib_geometry_CellVector.ofSameDirection(cellTeleport.vector,item.currentMoveVector)) {
			return false;
		}
		return this.isTeleportEnabledFromCell(cellTeleport);
	}
	,isTeleportEnabledFromCell: function(cellTeleport) {
		if(cellTeleport.fromCell.hasGravityChanger != cellTeleport.toCell.hasGravityChanger) {
			return false;
		}
		if(!com_sq_m3lib_geometry_CellVector.ofSameDirection(cellTeleport.vector,cellTeleport.fromCell.getCurrentMoveVector())) {
			return false;
		}
		if(cellTeleport.oppositeTeleport != null && com_sq_m3lib_geometry_CellVector.ofSameDirection(cellTeleport.toCell.getCurrentMoveVector(),cellTeleport.oppositeTeleport.vector)) {
			return false;
		}
		return true;
	}
	,getCellForDiagonalFill: function(cell,possibleFill) {
		var possibleLength = possibleFill.length;
		if(possibleLength == 0) {
			return null;
		}
		return possibleFill[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(possibleLength)];
	}
	,fillDiagonalCell: function(cellFrom,cell) {
		var item = cellFrom.item;
		if(item.isMoving) {
			return;
		}
		item.isMoving = true;
		item.currentMoveVector = new com_sq_m3lib_geometry_CellVector(cell.coords.x - cellFrom.coords.x,cell.coords.y - cellFrom.coords.y);
		cellFrom.setItem(null);
		cell.setItem(item);
	}
	,checkDiagonalMove: function(cell) {
		if(this.canFillByBaseDirections(cell)) {
			return null;
		}
		return this.getPossibleSlidesToCell(cell);
	}
	,canFillByBaseDirections: function(cell) {
		var fromCells = cell.fromCells.slice();
		var fromLength = fromCells.length;
		var teleportsToCell = cell.teleportsToCell;
		var j = teleportsToCell.length;
		while(--j >= 0) if(this.isTeleportEnabledFromCell(teleportsToCell[j])) {
			fromCells[fromLength] = teleportsToCell[j].fromCell;
			++fromLength;
		}
		var index = fromCells != null?fromCells.length:0;
		var oneCell;
		var result = false;
		if(index != 0) {
			var _g1 = 0;
			var _g = index;
			while(_g1 < _g) {
				oneCell = fromCells[_g1++];
				if(!oneCell.canMoveItem()) {
					result = false;
					break;
				}
				if(this.hasItemInCell(oneCell)) {
					result = true;
					break;
				}
				if(oneCell.item != null) {
					if(oneCell.item.inAction || oneCell.item.disabled) {
						result = false;
						break;
					}
				}
				if(oneCell.promissedFill) {
					result = true;
					break;
				}
				if(oneCell.noBaseFill) {
					continue;
				}
				result = this.canFillByBaseDirections(oneCell);
				if(!result) {
					oneCell.noBaseFill = true;
				} else {
					break;
				}
			}
		}
		if(result) {
			cell.promissedFill = true;
		} else {
			cell.noBaseFill = true;
		}
		return result;
	}
	,checkSimpleSlide: function(cell) {
		var fromCells = cell.fromCells.slice();
		var fromLength = fromCells.length;
		var teleportsToCell = cell.teleportsToCell;
		var j = teleportsToCell.length;
		while(--j >= 0) if(this.isTeleportEnabledFromCell(teleportsToCell[j])) {
			fromCells[fromLength] = teleportsToCell[j].fromCell;
			++fromLength;
		}
		var index = fromCells != null?fromCells.length:0;
		var oneCell;
		if(index != 0) {
			while(--index >= 0) {
				oneCell = fromCells[index];
				if(this.hasItemInCell(oneCell)) {
					return null;
				}
			}
		}
		var possibleDiagonalMoves = this.getPossibleSlidesToCell(cell);
		index = possibleDiagonalMoves.length;
		var resultPossibleMoves = [];
		var i = -1;
		while(++i < index) {
			oneCell = possibleDiagonalMoves[i];
			if(this.canMoveCellItem(oneCell)) {
				resultPossibleMoves.push(oneCell);
			}
		}
		if(resultPossibleMoves.length > 0) {
			return resultPossibleMoves;
		} else {
			return null;
		}
	}
	,getPossibleSlidesToCell: function(cell) {
		var directionsLength;
		var slideCandidate;
		var slideVector;
		var possibleDiagonalMoves = [];
		var toCellVector = cell.getCurrentMoveVector();
		var directions = com_sq_m3lib_geometry_CellVector.getNormals(toCellVector);
		directionsLength = directions.length;
		var i = -1;
		var direction;
		var nearCell;
		var possibleSlideToNearCell;
		while(++i < directionsLength) {
			slideVector = com_sq_m3lib_geometry_CellVector.substract(directions[i],toCellVector);
			slideCandidate = this._board.getCellByCoords(cell.coords.x + slideVector.x,cell.coords.y + slideVector.y,true);
			if(slideCandidate == null || slideCandidate.isVoid) {
				continue;
			}
			if(slideCandidate.item == null || slideCandidate.item.isMoving) {
				continue;
			}
			if(!this.hasItemInCell(slideCandidate) || !slideCandidate.canMoveItem()) {
				continue;
			}
			if(!this.isStableCell(slideCandidate.toCell)) {
				continue;
			}
			if(!this.canSlideToCell(slideCandidate,cell)) {
				continue;
			}
			direction = cell.coords.getDifferenceVector(slideCandidate.coords.x,slideCandidate.coords.y);
			nearCell = this._board.getCellByCoords(slideCandidate.coords.x + direction.x - slideCandidate.getCurrentMoveVector().x,slideCandidate.coords.y + direction.y - slideCandidate.getCurrentMoveVector().y,true);
			possibleSlideToNearCell = this._board.getCellByCoords(nearCell.coords.x - direction.x,nearCell.coords.y - direction.y,true);
			if(!this.canMoveCellItem(possibleSlideToNearCell) || !this.canFillCell(nearCell)) {
				possibleDiagonalMoves.push(slideCandidate);
			}
		}
		return possibleDiagonalMoves;
	}
	,canSlideToCell: function(slideCandidate,targetCell) {
		if(slideCandidate.getCurrentMoveVector() == null) {
			return false;
		}
		if(slideCandidate.hasGravityChanger != targetCell.hasGravityChanger) {
			return false;
		}
		var tmpCell;
		var directions = com_sq_m3lib_geometry_CellVector.getNormals(slideCandidate.getCurrentMoveVector());
		var index = directions.length;
		while(--index >= 0) {
			var slideVector = com_sq_m3lib_geometry_CellVector.add(directions[index],slideCandidate.getCurrentMoveVector());
			tmpCell = this._board.getCellByCoords(slideCandidate.coords.x + slideVector.x,slideCandidate.coords.y + slideVector.y,true);
			if(tmpCell == targetCell) {
				return true;
			}
		}
		return false;
	}
	,resetItemToCell: function(item,cell) {
		this.pauseItemInCell(item,cell);
		item.position = this._board.getCellBoardCoords(cell);
	}
	,pauseItemInCell: function(item,cell) {
		item.isMoving = false;
		cell.setItem(item);
	}
	,canFillCell: function(cell) {
		if(cell != null && cell.canHaveItem()) {
			return cell.item == null;
		} else {
			return false;
		}
	}
	,checkCell: function(cell,vector,coordX,coordY) {
		var cellBoardCoord = this._board.getCellBoardCoords(cell);
		if(cellBoardCoord.x == coordX && cellBoardCoord.y == coordY) {
			return true;
		}
		var coordsDifference = cellBoardCoord.getDifferenceVector(coordX,coordY);
		if(coordsDifference.getAxisLengthSumm() >= com_sq_m3lib_coreSettings_CoreSettings.moveParams.cellSize) {
			return false;
		}
		if(vector == null || coordsDifference.x * vector.x <= 0 && coordsDifference.y * vector.y <= 0) {
			return true;
		}
		return false;
	}
	,checkTeleportCell: function(cell,vector,coordX,coordY) {
		if(this._board.getCellBoardCoords(cell).getDifferenceVector(coordX,coordY).getAxisLengthSumm() >= com_sq_m3lib_coreSettings_CoreSettings.moveParams.cellSize) {
			return false;
		}
		return this.checkCell(cell,vector,coordX,coordY);
	}
	,willPassCell: function(cell,item) {
		var vector = item.currentMoveVector;
		if(!item.isMoving || item.speed == 0 || vector == null) {
			return this.checkCell(cell,vector,item.position.x,item.position.y);
		}
		var toBeCoords = com_sq_m3lib_geometry_Coord.add(item.position,new com_sq_m3lib_geometry_Coord(vector.x * item.speed,vector.y * item.speed));
		return this.checkCell(cell,vector,toBeCoords.x,toBeCoords.y);
	}
	,canMoveToCell: function(oneCell) {
		if(oneCell != null && oneCell.canHaveItem()) {
			return oneCell.item == null;
		} else {
			return false;
		}
	}
	,canMoveCellItem: function(oneCell) {
		if(this.hasItemInCell(oneCell) && !oneCell.item.isMoving) {
			return oneCell.canMoveItem();
		} else {
			return false;
		}
	}
	,hasItemInCell: function(oneCell) {
		if(oneCell != null) {
			return oneCell.hasItemInCell();
		} else {
			return false;
		}
	}
	,isStableCell: function(oneCell) {
		if(!(oneCell == null || oneCell.isVoid || oneCell.hasStableBlocker())) {
			return this.canMoveCellItem(oneCell);
		} else {
			return true;
		}
	}
	,organizeCellDirection: function(cells) {
		var currentCell;
		var targetCell;
		var i = cells.length;
		var j;
		while(--i >= 0) {
			j = cells[i].length;
			while(--j >= 0) {
				currentCell = cells[i][j];
				if(currentCell == null || currentCell.isVoid) {
					continue;
				}
				if(currentCell.getCurrentMoveVector() == null) {
					currentCell.setToCell(null);
					continue;
				}
				targetCell = this._board.getCellByCoords(i + currentCell.getCurrentMoveVector().x,j + currentCell.getCurrentMoveVector().y,true);
				if(this.checkCanMoveFromCell(targetCell,currentCell)) {
					targetCell.addFromCell(currentCell);
					currentCell.setToCell(targetCell);
				}
			}
		}
	}
	,checkCanMoveFromCell: function(targetCell,currentCell) {
		if(targetCell != null && com_sq_m3lib_geometry_CellVector.ofSameDirection(targetCell.getCurrentMoveVector(),currentCell.getCurrentMoveVector())) {
			return currentCell.hasGravityChanger == targetCell.hasGravityChanger;
		} else {
			return false;
		}
	}
	,updateOnCellDirectionChanged: function(cell) {
		var targetCell;
		var tmpCells;
		var tmpCellsIndex;
		var cellMoveVector = cell.getCurrentMoveVector();
		var cellCoords = cell.coords;
		targetCell = cell.toCell;
		if(targetCell != null) {
			targetCell.removeFromCell(cell);
			cell.setToCell(null);
		}
		targetCell = this._board.getCellByCoords(cellCoords.x + cellMoveVector.x,cellCoords.y + cellMoveVector.y,true);
		if(this.checkCanMoveFromCell(targetCell,cell)) {
			targetCell.addFromCell(cell);
			cell.setToCell(targetCell);
		}
		tmpCells = cell.fromCells;
		if(tmpCells == null) {
			tmpCellsIndex = 0;
		} else {
			tmpCellsIndex = tmpCells.length;
		}
		while(--tmpCellsIndex >= 0) {
			targetCell = tmpCells[tmpCellsIndex];
			if(!this.checkCanMoveFromCell(targetCell,cell)) {
				targetCell.setToCell(null);
				cell.removeFromCell(targetCell);
			}
		}
		tmpCells = this._board.getNearCells(cell);
		if(tmpCells == null) {
			tmpCellsIndex = 0;
		} else {
			tmpCellsIndex = tmpCells.length;
		}
		while(--tmpCellsIndex >= 0) {
			targetCell = tmpCells[tmpCellsIndex];
			if(!this.checkCanMoveFromCell(targetCell,cell)) {
				continue;
			}
			if(cell.fromCells.indexOf(targetCell) >= 0) {
				continue;
			}
			if(targetCell.getCurrentMoveVector().x != cellCoords.x - targetCell.coords.x || targetCell.getCurrentMoveVector().y != cellCoords.y - targetCell.coords.y) {
				continue;
			}
			targetCell.setToCell(cell);
			cell.addFromCell(targetCell);
		}
	}
	,readTeleports: function(teleports) {
		this._teleports = teleports;
		if(teleports == null || teleports.length == 0) {
			return;
		}
		var tmpTeleportsMap = new haxe_ds_ObjectMap();
		var i = teleports.length;
		while(--i >= 0) {
			var fromCell = this._board.getCellByCoords(teleports[i].from.x,teleports[i].from.y,true);
			var targetCell = this._board.getCellByCoords(teleports[i].to.x,teleports[i].to.y,true);
			if(fromCell != null && targetCell != null) {
				var teleport = new com_sq_m3lib_board_CellTeleport(fromCell,targetCell,com_sq_m3lib_coreSettings_CoreSettings.getVectorByDirection(teleports[i].direction));
				fromCell.setTeleport(teleport);
				targetCell.setTeleport(teleport);
				if(tmpTeleportsMap.h[fromCell.__id__] == null) {
					tmpTeleportsMap.set(fromCell,new haxe_ds_ObjectMap());
				}
				tmpTeleportsMap.h[fromCell.__id__].set(targetCell,teleport);
			}
		}
		var teleport1;
		var cellTeleports;
		var tmp = tmpTeleportsMap.keys();
		while(tmp.hasNext()) {
			var cell = tmp.next();
			cellTeleports = tmpTeleportsMap.h[cell.__id__];
			var tmp1 = cellTeleports.keys();
			while(tmp1.hasNext()) {
				var targetCell1 = tmp1.next();
				if(tmpTeleportsMap.h[targetCell1.__id__] != null) {
					teleport1 = cellTeleports.h[targetCell1.__id__];
					teleport1.setOppositeTeleport(tmpTeleportsMap.h[targetCell1.__id__].get(cell));
				}
			}
		}
	}
	,getTeleports: function() {
		return this._teleports;
	}
	,__class__: com_sq_m3lib_board_ItemMoveFactory
};
var com_sq_m3lib_board_ItemsDestroyFactory = function(engine) {
	this._gameEngine = engine;
	this.scenarioFactory = new com_sq_m3lib_board_ScenarioFactory(this._gameEngine,this);
	this.explodeOnStable = [];
	this._explodedItemCells = [];
	this._queuedCombos = [];
};
$hxClasses["com.sq.m3lib.board.ItemsDestroyFactory"] = com_sq_m3lib_board_ItemsDestroyFactory;
com_sq_m3lib_board_ItemsDestroyFactory.__name__ = true;
com_sq_m3lib_board_ItemsDestroyFactory.prototype = {
	makeDestruction: function() {
		this.destroyCombos();
		this.scenarioFactory.playExplosionScenario();
		this.destroyNearActivated();
	}
	,queueUserSpecialCombo: function(combo) {
		this._queuedCombos.push(combo);
	}
	,addScenarioToList: function(scenario) {
		this.scenarioFactory.addScenarioToList(scenario);
	}
	,explodeOnBoardStable: function() {
		var explodeLength = this.explodeOnStable.length;
		if(explodeLength == 0) {
			return;
		}
		var i = -1;
		var itemCell;
		while(++i < explodeLength) {
			itemCell = this.explodeOnStable[i].cell;
			this.destroyItemInCell(itemCell,"boardStabilize",itemCell);
		}
		this.explodeOnStable = [];
		this._gameEngine.board.unstabilize();
	}
	,destroyCombos: function() {
		var queuedLength = this._queuedCombos.length;
		if(queuedLength > 0) {
			while(--queuedLength >= 0) this.destroySpecialCombo(this._queuedCombos[queuedLength]);
			this._queuedCombos = [];
		}
		if(this._gameEngine.comboFactory.haveCombos()) {
			var combos = this._gameEngine.comboFactory.getComboToDestroy();
			var combosLength = combos.length;
			var i = -1;
			while(++i < combosLength) this.destroyOneCombo(combos[i]);
		}
	}
	,destroySpecialCombo: function(combo) {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreComboEvent(combo));
		this.addScenarioToList(Type.createInstance(com_sq_m3lib_board_explosionScenarios_ScenarioDictionary.getByAlias(combo.comboTemplate.scenario),[combo.cells[1],combo.cells[0],this._gameEngine]));
		com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.simple("CombinationDestroy"));
	}
	,destroyOneCombo: function(combo) {
		var cells;
		var starter;
		var newComboItem;
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreComboEvent(combo));
		cells = combo.cells;
		starter = combo.scoreCell;
		var cellLength = cells.length;
		var hasNewItem = !combo.isTemplateItemEmpty();
		var j = -1;
		while(++j < cellLength) {
			newComboItem = null;
			if(hasNewItem && cells[j] == combo.newComboItemCell) {
				newComboItem = this._gameEngine.itemsFactory.getNewComboItem(combo);
				combo.newComboItem = newComboItem;
			}
			this.destroyItemInCell(cells[j],"combo",starter,null,combo,newComboItem,hasNewItem);
		}
		com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.simple("CombinationDestroy"));
		this._gameEngine.scoreFactory.addComboScore(combo,starter);
	}
	,destroySingleItemAndAddScore: function(cell,item,cause) {
		if(this.destroyItemInCell(cell,cause,cell)) {
			this._gameEngine.scoreFactory.addSimpleItemScore(item,item.getScore(),cause);
		}
		this._gameEngine.board.unstabilize();
	}
	,destroySingleItemNoScore: function(cell,item,cause) {
		this.destroyItemInCell(cell,cause,cell);
		this._gameEngine.board.unstabilize();
	}
	,destroyItemInCell: function(cell,cause,starterCell,scenario,combo,newItem,hasNewItemInCombo) {
		if(hasNewItemInCombo == null) {
			hasNewItemInCombo = false;
		}
		var item = cell.item;
		if(item == null) {
			return false;
		}
		var bombItem = null;
		if(js_Boot.__instanceof(item,com_sq_m3lib_board_items_IBomb)) {
			bombItem = js_Boot.__cast(item , com_sq_m3lib_board_items_IBomb);
		}
		var result = false;
		var replaceItem;
		if(bombItem != null && this.isCellItemFree(cell) && item.hasExplosionScenario() && !item.inAction) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreCellHitEvent(cell,starterCell,cause,scenario));
			var bombScenario = Type.createInstance(bombItem.getExplosionScenarioClass(),[cell,starterCell,this._gameEngine]);
			this.scenarioFactory.addScenarioToList(bombScenario);
			com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.scenarioActivated(bombScenario,item,cell));
			replaceItem = bombScenario.getItemToPlaceInsteadStarter();
			if(replaceItem == null) {
				item.setInAction(cell,cause,starterCell,bombScenario,newItem);
			} else {
				item.setInAction(cell,cause,starterCell,bombScenario,replaceItem);
			}
			return false;
		} else {
			if(this.isCellItemFree(cell)) {
				this._explodedItemCells.push(cell);
				var destroyInfo = new com_sq_m3lib_board_DestroyInfo();
				destroyInfo.cell = cell;
				destroyInfo.starter = starterCell;
				destroyInfo.cause = cause;
				destroyInfo.setScenario(scenario);
				destroyInfo.newItem = newItem;
				destroyInfo.combo = combo;
				item.setDestroy(destroyInfo,hasNewItemInCombo);
				var cellCover = cell.cover;
				if(cellCover != null) {
					this.destroyCellCover(cellCover,cell,cause);
				}
				result = true;
			} else if(hasNewItemInCombo && newItem != null && !js_Boot.__instanceof(newItem,com_sq_m3lib_board_items_HomingBombItem)) {
				this._gameEngine.board.changeItemInCell(newItem,cell);
			}
			if(cause == "viralBlocker") {
				var destroyInfo1 = new com_sq_m3lib_board_DestroyInfo();
				destroyInfo1.cell = cell;
				destroyInfo1.starter = starterCell;
				destroyInfo1.cause = cause;
				destroyInfo1.setScenario(scenario);
				destroyInfo1.newItem = newItem;
				destroyInfo1.combo = combo;
				item.setDestroy(destroyInfo1,hasNewItemInCombo);
				item.viewAnimationEnd = 0;
				result = true;
			} else {
				var blocker = cell.blockerSet;
				if(!blocker.isEmpty()) {
					this.destroyBlockerOnCombo(blocker,cause,starterCell,scenario);
				}
			}
			if(!result) {
				item.resetInAction();
				item.resetDestroyInfo();
			}
			if(result) {
				com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemDestroyEvent("destroy_items",item,cause,hasNewItemInCombo?combo.newComboItemCell:null));
			}
			return result;
		}
	}
	,isCellItemFree: function(cell) {
		var blocker = cell.blockerSet;
		if(cell.hasItemInCell() && cell.getItem().getItemAlias() == com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SPECIAL_LOCKED_ITEM) {
			if(!(blocker.isEmpty() || blocker.isDestroyed())) {
				return cell.canMoveItem();
			} else {
				return true;
			}
		}
		if(!cell.hasStableBlocker()) {
			if(!(blocker.isEmpty() || blocker.isDestroyed())) {
				return cell.canMoveItem();
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,destroyBlockerOnCombo: function(blocker,cause,starter,scenario) {
		if(blocker.priorityBlocker != null && blocker.destroyOnCellItemDestroy) {
			this.destroyBlocker(blocker.priorityBlocker,cause,starter,scenario);
		}
	}
	,destroyActivatedBlocker: function(cell,cause) {
		var blocker = cell.blockerSet;
		if(blocker.priorityBlocker != null && blocker.destroyOnNearCellItemDestroyed) {
			this.destroyBlocker(blocker.priorityBlocker,cause);
		}
	}
	,destroyBlocker: function(blocker,cause,starter,scenario) {
		if(blocker.isAnimationStable() && !blocker.isDestroyed()) {
			var cell = blocker.cell;
			var destroyInfo = new com_sq_m3lib_board_DestroyInfo(cell,cause,starter,scenario);
			blocker.destroyStep(destroyInfo);
			cell.blockerSet.recalculateBlockerParams(cell.item != null && cell.item.getItemAlias() == com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER);
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreBlockerEvent("destroy_blocker",blocker,cause,destroyInfo));
			if(blocker.isDestroyed()) {
				this._gameEngine.scoreFactory.addBlockerScore(blocker,cause);
			}
		}
	}
	,destroyCellCover: function(cover,cell,cause) {
		if(cause == "nearItemExploded") {
			return;
		}
		if(!cover.isAnimationStable() || cover.isDestroyed()) {
			return;
		}
		cover.destroyStep();
		if(cover.isDestroyed()) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreHiddenObjectEvent(com_sq_m3lib_events_CoreHiddenObjectEvent.DESTROYED,cell,null));
		} else {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreHiddenObjectEvent(com_sq_m3lib_events_CoreHiddenObjectEvent.CHANGED,cell,null));
		}
	}
	,destroyNearActivated: function() {
		var activated = this.calculateNearActivated(this._explodedItemCells);
		this._explodedItemCells = [];
		var i = activated.length;
		if(i == 0) {
			return;
		}
		var cell;
		var j;
		while(--i >= 0) {
			cell = activated[i].cell;
			j = activated[i].nearCells.length;
			while(--j >= 0) if(!activated[i].nearCells[j].hasExplosionStopper()) {
				break;
			}
			if(j < 0) {
				continue;
			}
			if(!cell.needCheckOnNearDestroyed()) {
				continue;
			}
			if(cell.hasItemInCell() && cell.canMoveItem() && cell.item.destroyOnNearDestroyed()) {
				this.destroyCellItemOnActivation(cell,activated[i].nearCells);
			} else if(!cell.blockerSet.isEmpty()) {
				if(!this.canActivateBlockerOnEvent(cell,activated[i].nearCells)) {
					continue;
				}
				this.destroyActivatedBlocker(cell,"nearItemExploded");
			}
		}
	}
	,canActivateBlockerOnEvent: function(cellWithBlocker,activationCells) {
		var destroyInfo;
		var blockersInCell;
		var scenarioName;
		var _g = 0;
		while(_g < activationCells.length) {
			var cell = activationCells[_g];
			++_g;
			destroyInfo = cell.item.destroyInfo;
			if(destroyInfo == null) {
				continue;
			}
			if(destroyInfo.cause == "combo") {
				return true;
			}
			if(destroyInfo.cause != "specialItem" && destroyInfo.cause != "specialCombo") {
				return false;
			}
			blockersInCell = cellWithBlocker.blockerSet.blockers;
			var _g1 = 0;
			while(_g1 < blockersInCell.length) {
				var blocker = blockersInCell[_g1];
				++_g1;
				var _this = this._blockersActivationRule;
				var key = blocker.alias;
				if(!(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key))) {
					continue;
				}
				if(destroyInfo.actualScenario == null) {
					continue;
				}
				if(destroyInfo.actualScenario.willDestroySomethingInCell(cellWithBlocker)) {
					continue;
				}
				var o = destroyInfo.actualScenario;
				scenarioName = com_sq_m3lib_board_explosionScenarios_ScenarioDictionary.getByClass(o == null?null:js_Boot.getClass(o));
				var _this1 = this._blockersActivationRule;
				var key1 = blocker.alias;
				if((__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]).indexOf(scenarioName) >= 0) {
					return true;
				}
			}
		}
		return false;
	}
	,destroyCellItemOnActivation: function(cell,nearCells) {
		var j = nearCells.length;
		var nextCellItem;
		while(--j >= 0) {
			nextCellItem = nearCells[j].item;
			if(nextCellItem == null || nextCellItem.destroyInfo == null) {
				continue;
			}
			if(nextCellItem.destroyInfo.cause != "combo") {
				continue;
			}
			this.destroyItemInCell(cell,"nearItemExploded",nearCells[j]);
			return;
		}
	}
	,destroyCellItems: function(cells,cause) {
		var i = cells.length;
		var cell;
		while(--i >= 0) {
			cell = cells[i];
			if(!cell.hasExplosionDestroybleElement()) {
				continue;
			}
			if(cell.inCombination) {
				continue;
			}
			this.hitCell(cell,cause);
		}
		this._gameEngine.board.unstabilize();
	}
	,hitCell: function(cell,cause,starter,scenario) {
		var item = cell.item;
		if(cell.hasStableBlocker()) {
			this.destroyBlocker(cell.blockerSet.priorityBlocker,cause,starter,scenario);
			if(item != null) {
				item.resetInAction();
				item.resetDestroyInfo();
			}
		} else if(item != null) {
			if(this.destroyItemInCell(cell,cause,starter,scenario)) {
				if(item.destroyInfo.cause == "specialItem") {
					this._gameEngine.scoreFactory.addItemScore(item,"specialItem");
				}
			}
		} else if(!cell.blockerSet.isEmpty() && !cell.blockerSet.priorityBlocker.isDestroyed()) {
			this.destroyBlocker(cell.blockerSet.priorityBlocker,cause,starter,scenario);
		} else if(cell.cover != null) {
			this.destroyCellCover(cell.cover,cell,cause);
		}
		if(cell.canHitCell()) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreCellHitEvent(cell,starter,cause,scenario));
		}
	}
	,calculateNearActivated: function(destroyCells) {
		return this._gameEngine.board.getNearNotEmptyCells(destroyCells);
	}
	,addItemToExplodeOnStable: function(item) {
		this.explodeOnStable.push(item);
	}
	,free: function() {
		this.reset();
	}
	,reset: function() {
		this.scenarioFactory.reset();
		this.explodeOnStable = [];
		this._explodedItemCells = [];
		this._queuedCombos = [];
	}
	,loadActivationRules: function(rules) {
		this._blockersActivationRule = new haxe_ds_StringMap();
		if(rules == null) {
			return;
		}
		var _g = 0;
		while(_g < rules.length) {
			var rule = rules[_g];
			++_g;
			var v = [];
			var _this = this._blockersActivationRule;
			var key = rule.blockerName;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,v);
			} else {
				_this.h[key] = v;
			}
			var _g1 = 0;
			var _g2 = rule.specialsName;
			while(_g1 < _g2.length) {
				var activationItem = _g2[_g1];
				++_g1;
				var _this1 = this._blockersActivationRule;
				var key1 = rule.blockerName;
				(__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]).push(activationItem);
			}
		}
	}
	,__class__: com_sq_m3lib_board_ItemsDestroyFactory
};
var com_sq_m3lib_board_ItemsFactory = function(engine) {
	this.comboItemsCreatedCounter = 0;
	this._gameEngine = engine;
};
$hxClasses["com.sq.m3lib.board.ItemsFactory"] = com_sq_m3lib_board_ItemsFactory;
com_sq_m3lib_board_ItemsFactory.__name__ = true;
com_sq_m3lib_board_ItemsFactory.prototype = {
	init: function(levelConfig,shuffleColors) {
		if(shuffleColors == null) {
			shuffleColors = true;
		}
		this.setColors(levelConfig.itemsColors,shuffleColors);
		this.comboItemsCreatedCounter = 0;
	}
	,getItem: function(attributes,coords,fillRandomAttributes) {
		if(fillRandomAttributes == null) {
			fillRandomAttributes = true;
		}
		var itemAttributes = this.cloneAttributes(attributes);
		var result = Type.createInstance(com_sq_m3lib_board_ItemsFactoryDictionary.getByAlias(itemAttributes.className),[]);
		result.setInitialAttributes(itemAttributes);
		if(fillRandomAttributes) {
			this.checkAttributes(result,itemAttributes);
		}
		result.setAttributes(itemAttributes);
		result.position = coords;
		return result;
	}
	,getByClass: function(itemClass,coords) {
		var result = Type.createInstance(itemClass,[]);
		result.position = coords;
		return result;
	}
	,cloneAttributes: function(attributes) {
		var result = { };
		var tmp;
		var tmp1;
		if(attributes == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(attributes.__properties__) {
				tmp = attributes.__properties__["get_" + "clone"];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = attributes[tmp]();
			} else {
				tmp1 = attributes.clone;
			}
		}
		if(tmp1) {
			result = Reflect.field(attributes,"clone").apply(attributes,[]);
			return result;
		}
		var _g = 0;
		var _g1 = Reflect.fields(attributes);
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			var tmp3;
			var tmp4;
			if(attributes == null) {
				tmp4 = null;
			} else {
				var tmp5;
				if(attributes.__properties__) {
					tmp3 = attributes.__properties__["get_" + param];
					tmp5 = tmp3;
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					tmp4 = attributes[tmp3]();
				} else {
					tmp4 = attributes[param];
				}
			}
			result[param] = tmp4;
		}
		return result;
	}
	,checkAttributes: function(item,attributes) {
		if(attributes.color == -1) {
			this.colorFill(attributes);
		}
	}
	,colorFill: function(attributes) {
		attributes.color = this._shuffledColors[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(this._maxColors)];
	}
	,shuffleColors: function() {
		this._shuffledColors = com_sq_m3lib_core_Mersenne.getInstance().shuffleArray(this._shuffledColors);
	}
	,getMaxColors: function() {
		return this._maxColors;
	}
	,setMaxColors: function(count) {
		this._maxColors = count;
	}
	,getShuffledColors: function() {
		return this._shuffledColors;
	}
	,setShuffledColors: function(colors) {
		this._shuffledColors = colors;
	}
	,setColors: function(allowedColors,shiftColors) {
		this._maxColors = allowedColors.length;
		if(shiftColors) {
			this._shuffledColors = com_sq_m3lib_core_Mersenne.getInstance().safeShuffleArray(allowedColors);
		} else {
			this._shuffledColors = allowedColors.concat([]);
		}
	}
	,initialColorReroll: function(fullFieldCheck) {
		if(fullFieldCheck == null) {
			fullFieldCheck = false;
		}
		var params = new com_sq_m3lib_board_combinations_CombinationFinderParams();
		params.fullBoardCheck = fullFieldCheck;
		params.needComboStarter = !fullFieldCheck;
		this._gameEngine.comboFactory.fullCheckTemplates(params);
		var counter = 0;
		var recoloredCells = null;
		while((this._gameEngine.comboFactory.haveCombos() || !this._gameEngine.comboFactory.hasMoveCandidates()) && counter < com_sq_m3lib_coreSettings_CoreSettings.maxRerollTries) {
			++counter;
			if(this._gameEngine.comboFactory.haveCombos()) {
				recoloredCells = this.recolorComboItems();
			} else {
				this.recolorNeighbourItemsOnNoPossibleMoves(recoloredCells);
				recoloredCells = null;
			}
			this._gameEngine.comboFactory.clearNeighbours();
			this._gameEngine.comboFactory.resetOnMove();
			this._gameEngine.board.markCellsChanged();
			this._gameEngine.comboFactory.fullCheckTemplates(params);
		}
	}
	,canRecolor: function(item) {
		if(item != null && js_Boot.__instanceof(item,com_sq_m3lib_board_items_IColorItem)) {
			return (js_Boot.__cast(item , com_sq_m3lib_board_items_IColorItem)).isRandomConfigColor();
		} else {
			return false;
		}
	}
	,reColorItem: function(item,excludeColors) {
		if(!this.canRecolor(item)) {
			return;
		}
		var colorItem = js_Boot.__cast(item , com_sq_m3lib_board_items_IColorItem);
		var possibleColors = [];
		if(excludeColors.length == 0) {
			possibleColors = this._shuffledColors.slice();
		} else {
			var i = -1;
			while(++i < this._maxColors) if(excludeColors.indexOf(this._shuffledColors[i]) == -1) {
				possibleColors.push(this._shuffledColors[i]);
			}
			if(possibleColors.length == 0) {
				possibleColors = this._shuffledColors.slice();
			}
		}
		colorItem.color = possibleColors[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(possibleColors.length)];
	}
	,recolorItems: function() {
		var cells = this._gameEngine.comboFactory.cellsToDestroy.slice();
		var excludeColors = [];
		var cellLength = cells.length;
		var tmpCell;
		var tmpItem;
		var i = -1;
		while(++i < cellLength) {
			excludeColors = [(js_Boot.__cast(cells[i].item , com_sq_m3lib_board_items_IColorItem)).color];
			var directions = com_sq_m3lib_board_CellBorder.CELL_DIRECTIONS;
			var directionLength = directions.length;
			var j = -1;
			while(++j < directionLength) {
				tmpCell = this._gameEngine.board.getCellByCoords(cells[i].coords.x + directions[j][0],cells[i].coords.y + directions[j][1]);
				if(tmpCell == null) {
					continue;
				}
				tmpItem = js_Boot.__cast(tmpCell.item , com_sq_m3lib_board_items_IColorItem);
				if(tmpItem == null) {
					continue;
				}
				if(excludeColors.indexOf(tmpItem.color) == -1) {
					excludeColors.push(tmpItem.color);
				}
			}
			this.reColorItem(cells[i].item,excludeColors);
		}
	}
	,recolorComboItems: function() {
		var combo = this._gameEngine.comboFactory.getComboToDestroy().slice();
		var combosLength = combo.length;
		var cells;
		var excludeColors;
		var i = -1;
		var recoloredCells = new haxe_ds_ObjectMap();
		var cell;
		while(++i < combosLength) {
			cells = combo[i].cells;
			excludeColors = [combo[i].getColor()];
			cell = cells[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(cells.length)];
			recoloredCells.set(cell,combo[i].getColor());
			this.reColorItem(cell.item,excludeColors);
		}
		return recoloredCells;
	}
	,recolorNeighbourItemsOnNoPossibleMoves: function(cells) {
		if(cells == null) {
			this.recolorBoard();
			return;
		}
		var possibleCellsToRecolor = new haxe_ds_ObjectMap();
		var possibleCells = [];
		var i;
		var tmp = cells.keys();
		while(tmp.hasNext()) {
			var cell = tmp.next();
			i = cell.neighbours.length;
			while(--i >= 0) if(this.canRecolor(cell.neighbours[i].item) && !cell.neighbours[i].hasComboBlocker() && cell.neighbours[i].item.getColor() != cells.h[cell.__id__] && this._gameEngine.board.boardUtils.isCellInViewPort(cell.neighbours[i])) {
				possibleCellsToRecolor.set(cell.neighbours[i],cells.h[cell.__id__]);
				possibleCells.push(cell.neighbours[i]);
			}
		}
		i = possibleCells.length;
		if(i == 0) {
			this.recolorBoard();
			return;
		}
		var possibleCell = possibleCells[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(i)];
		(js_Boot.__cast(possibleCell.item , com_sq_m3lib_board_items_IColorItem)).color = possibleCellsToRecolor.h[possibleCell.__id__];
	}
	,recolorBoard: function() {
		var cells = this._gameEngine.board.getNonVoidCells(false).slice();
		var i = cells.length;
		var length = i;
		while(--i >= 0) if(!this.canRecolor(cells[i].item)) {
			cells[i] = cells[length - 1];
			--length;
			cells.pop();
		}
		i = length;
		var empty = [];
		while(--i >= 0) this.reColorItem(cells[i].item,empty);
	}
	,shuffle: function() {
		var counter = 0;
		var changedItems = [];
		var params = new com_sq_m3lib_board_combinations_CombinationFinderParams();
		while((this._gameEngine.comboFactory.haveCombos() || !this._gameEngine.comboFactory.hasMoveCandidates()) && ++counter < com_sq_m3lib_coreSettings_CoreSettings.maxShuffleTries) {
			changedItems = this.shuffleBoard(this._gameEngine.board.getNonVoidCells(false));
			this._gameEngine.comboFactory.resetOnMove();
			this._gameEngine.comboFactory.fullCheckTemplates(params);
		}
		if(counter >= com_sq_m3lib_coreSettings_CoreSettings.maxShuffleTries) {
			this._gameEngine.targetsManager.onShuffleFailed();
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreTargetUpdateEvent("target_failed",null,com_sq_m3lib_events_TargetFailReason.NO_POSSIBLE_COMBOS));
			return false;
		}
		if(counter > 0) {
			com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.shuffle(counter));
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreShuffleEvent(changedItems));
		}
		return true;
	}
	,shuffleBoard: function(cells) {
		var shuffleItems = [];
		var shuffleCells = [];
		var cell;
		var cellItem;
		var width = cells.length;
		var i = -1;
		while(++i < width) {
			cell = cells[i];
			cellItem = cell.getItem();
			if(!cell.hasItemInCell() || cell.hasStableBlocker() || !cellItem.canShuffle()) {
				continue;
			}
			shuffleItems.push(cellItem);
			shuffleCells.push(cell);
		}
		var shuffleLength = shuffleItems.length;
		if(shuffleLength > 1) {
			shuffleItems = com_sq_m3lib_core_Mersenne.getInstance().shuffleArray(shuffleItems);
		}
		i = -1;
		var shuffleItem;
		var shuffledCell;
		while(++i < shuffleLength) {
			shuffleItem = shuffleItems[i];
			shuffledCell = shuffleCells[i];
			shuffledCell.setItem(shuffleItem);
			shuffleItem.position = this._gameEngine.board.getCellBoardCoords(shuffledCell);
		}
		return shuffleItems;
	}
	,getComboItemsCount: function() {
		return this.comboItemsCreatedCounter;
	}
	,setComboItemsCount: function(val) {
		this.comboItemsCreatedCounter = val;
	}
	,getNewComboItem: function(combo) {
		if(combo.isTemplateItemEmpty()) {
			return null;
		}
		var newItemDescription = combo.cells[0].item.getCurrentItemDescription().clone();
		newItemDescription.className = combo.comboTemplate.item;
		this.comboItemsCreatedCounter++;
		com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.newComboItem(this.comboItemsCreatedCounter));
		return this.getItem(newItemDescription,this._gameEngine.board.getCellBoardCoords(combo.newComboItemCell),false);
	}
	,__class__: com_sq_m3lib_board_ItemsFactory
};
var com_sq_m3lib_board_ItemsFactoryDictionary = function() {
};
$hxClasses["com.sq.m3lib.board.ItemsFactoryDictionary"] = com_sq_m3lib_board_ItemsFactoryDictionary;
com_sq_m3lib_board_ItemsFactoryDictionary.__name__ = true;
com_sq_m3lib_board_ItemsFactoryDictionary.getByAlias = function(alias) {
	return com_sq_m3lib_board_CommonFactoryDictionary.getByAlias(com_sq_m3lib_coreSettings_CoreClassesDictionary.itemClassDictionary,alias);
};
com_sq_m3lib_board_ItemsFactoryDictionary.getByClass = function(classDef) {
	return com_sq_m3lib_board_CommonFactoryDictionary.getByClass(com_sq_m3lib_coreSettings_CoreClassesDictionary.itemClassDictionary,classDef);
};
com_sq_m3lib_board_ItemsFactoryDictionary.getRandomLineBombClassName = function() {
	return com_sq_m3lib_coreSettings_CoreClassesDictionary.lineBombClassDictionary[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(com_sq_m3lib_coreSettings_CoreClassesDictionary.lineBombClassDictionary.length)];
};
com_sq_m3lib_board_ItemsFactoryDictionary.getRandomBombClassByItem = function(item) {
	if(js_Boot.__instanceof(item,com_sq_m3lib_board_items_ColorBombHorizonal) || js_Boot.__instanceof(item,com_sq_m3lib_board_items_ColorBombVertical)) {
		return com_sq_m3lib_board_ItemsFactoryDictionary.getRandomLineBombClassName();
	}
	return null;
};
com_sq_m3lib_board_ItemsFactoryDictionary.prototype = {
	__class__: com_sq_m3lib_board_ItemsFactoryDictionary
};
var com_sq_m3lib_board_ItemsMoveResult = function(isMoving,movedItems) {
	this.isMoving = isMoving;
	this.movedItems = movedItems;
};
$hxClasses["com.sq.m3lib.board.ItemsMoveResult"] = com_sq_m3lib_board_ItemsMoveResult;
com_sq_m3lib_board_ItemsMoveResult.__name__ = true;
com_sq_m3lib_board_ItemsMoveResult.prototype = {
	__class__: com_sq_m3lib_board_ItemsMoveResult
};
var com_sq_m3lib_board_LevelConfig = function() {
};
$hxClasses["com.sq.m3lib.board.LevelConfig"] = com_sq_m3lib_board_LevelConfig;
com_sq_m3lib_board_LevelConfig.__name__ = true;
com_sq_m3lib_board_LevelConfig.getEmptyLevelConfig = function(fieldHeight,fieldWidth) {
	var result = new com_sq_m3lib_board_LevelConfig();
	result.viewPoints = [com_sq_m3lib_coreSettings_CoreSettingsDefault.DEFAULT_VIEW_POINT];
	result.boardAttributes = [];
	var j;
	while(--fieldHeight >= 0) {
		result.boardAttributes[fieldHeight] = [];
		j = fieldWidth;
		while(--j >= 0) result.boardAttributes[fieldHeight][j] = { isVoid : 0, gravityChanged : 0, item : null, blocker : null, cover : null, captured : null};
	}
	result.targets = [];
	result.specialSpawns = [];
	result.spawns = [];
	result.directions = [];
	result.teleports = [];
	result.scoreTargets = [];
	result.itemsColors = [];
	return result;
};
com_sq_m3lib_board_LevelConfig.DEFAULT_CELL_ATTRIBUTE = function() {
	return { isVoid : 0, gravityChanged : 0, item : null, blocker : null, cover : null, captured : null};
};
com_sq_m3lib_board_LevelConfig.prototype = {
	loadFromJSON: function(source) {
		var parsed = JSON.parse(source);
		this.loadFromParsedConfig(parsed);
	}
	,loadFromParsedConfig: function(parsed) {
		this.boardAttributes = parsed.map;
		this.itemsColors = parsed.itemsColors;
		this.directions = parsed.directions;
		this.sodaDirections = parsed.sodaDirections;
		this.teleports = parsed.teleports;
		this.spawns = parsed.spawns;
		this.specialSpawns = parsed.specialSpawnConfig;
		this.moves = parsed.moves;
		this.targets = parsed.targets;
		this.viewPoints = parsed.viewPoints;
		this.viralIncreaseProbability = parsed.viralIncreaseProbability;
		this.difficulty = parsed.difficulty;
		this.tutorial = parsed.tutorial;
		this.carma = parsed.carma;
		this.scoreTargets = parsed.scoreTargets;
		this.forbiddenMoves = parsed.forbiddenMoves;
		if(this.scoreTargets != null) {
			haxe_ds_ArraySort.sort(this.scoreTargets,function(a,b) {
				return a - b;
			});
		}
	}
	,toJsonConfig: function() {
		return { map : this.boardAttributes, directions : this.directions, sodaDirections : this.sodaDirections, teleports : this.teleports, spawns : this.spawns, specialSpawnConfig : this.specialSpawns, moves : this.moves, targets : this.targets, viewPoints : this.viewPoints, viralIncreaseProbability : this.viralIncreaseProbability, difficulty : this.difficulty, tutorial : this.tutorial, carma : this.carma, scoreTargets : this.scoreTargets, itemsColors : this.itemsColors, forbiddenMoves : this.forbiddenMoves};
	}
	,getDirectionInCell: function(i,j) {
		if(this.directions != null && this.directions[i] != null) {
			return this.directions[i][j];
		}
		return com_sq_m3lib_coreSettings_CoreSettings.baseGravityDirection;
	}
	,getSodaDirectionInCell: function(i,j) {
		if(this.sodaDirections != null && this.sodaDirections[i] != null) {
			return this.sodaDirections[i][j];
		}
		return -1;
	}
	,__class__: com_sq_m3lib_board_LevelConfig
};
var com_sq_m3lib_board_NearCellDescription = function() {
};
$hxClasses["com.sq.m3lib.board.NearCellDescription"] = com_sq_m3lib_board_NearCellDescription;
com_sq_m3lib_board_NearCellDescription.__name__ = true;
com_sq_m3lib_board_NearCellDescription.prototype = {
	__class__: com_sq_m3lib_board_NearCellDescription
};
var com_sq_m3lib_board_ScenarioFactory = function(gameEngine,destroyFactory) {
	this.boosted = false;
	this._gameEngine = gameEngine;
	this._destroyFactory = destroyFactory;
	this.scenarios = [];
	this._newScenarios = [];
	this._pausedScenarios = [];
	this._startScenarios = [];
};
$hxClasses["com.sq.m3lib.board.ScenarioFactory"] = com_sq_m3lib_board_ScenarioFactory;
com_sq_m3lib_board_ScenarioFactory.__name__ = true;
com_sq_m3lib_board_ScenarioFactory.prototype = {
	addScenarioToList: function(scenario) {
		this._newScenarios.push(scenario);
	}
	,addStartScenarioToList: function(scenario) {
		this._startScenarios.push(scenario);
	}
	,playStartScenarios: function() {
		if(this._startScenarios.length == 0) {
			return;
		}
		var scenariosLength = this._startScenarios.length;
		var i = -1;
		while(++i < scenariosLength) this.applyOneScenario(this._startScenarios[i]);
		var copy = this._startScenarios.slice();
		i = -1;
		while(++i < scenariosLength) if(copy[i].isComplete()) {
			if(copy[i].needEvent()) {
				com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.FINISHED,copy[i]));
			}
			HxOverrides.remove(this._startScenarios,copy[i]);
			copy[i].free();
		} else if(copy[i].isPaused()) {
			this._pausedScenarios.push(copy[i]);
			HxOverrides.remove(this._startScenarios,copy[i]);
		}
	}
	,playExplosionScenario: function() {
		if(this.scenarios.length == 0 && this._newScenarios.length == 0) {
			return;
		}
		var scenariosLength = this.scenarios.length;
		var i = -1;
		while(++i < scenariosLength) this.applyOneScenario(this.scenarios[i]);
		var newScenario;
		i = -1;
		while(++i < this._newScenarios.length) {
			newScenario = this._newScenarios[i];
			newScenario.init();
			if(newScenario.needEvent()) {
				com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.INITED,newScenario));
			}
			this.scenarios.unshift(newScenario);
			++scenariosLength;
		}
		var copy = this._newScenarios.slice();
		this._newScenarios = [];
		while(--i >= 0) {
			newScenario = copy[i];
			this.applyOneScenario(newScenario);
		}
		var copy1 = this.scenarios.slice();
		i = -1;
		while(++i < scenariosLength) if(copy1[i].isComplete()) {
			if(copy1[i].needEvent()) {
				com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.FINISHED,copy1[i]));
			}
			HxOverrides.remove(this.scenarios,copy1[i]);
			copy1[i].free();
		} else if(copy1[i].isPaused()) {
			this._pausedScenarios.push(copy1[i]);
			HxOverrides.remove(this.scenarios,copy1[i]);
		}
	}
	,destroyByExplosionScenario: function(cells,scenario,starter) {
		var cellLength = cells.length;
		var j = -1;
		var cell;
		while(++j < cellLength) {
			cell = cells[j];
			if(this.canExplodeCellByScenario(cell,starter)) {
				this._destroyFactory.hitCell(cell,"specialItem",starter,scenario);
			} else if(cell.canHitCell()) {
				com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreCellHitEvent(cell,starter,"specialItem",scenario));
			}
		}
	}
	,changedByExplosionScenario: function(cells,scenario,starter) {
		var cellLength = cells.length;
		var j = -1;
		var item;
		var newItem;
		while(++j < cellLength) {
			item = cells[j].item;
			if(item != null && item.destroyInfo != null) {
				newItem = item.destroyInfo.newItem;
				this._gameEngine.board.changeItemInCell(newItem,cells[j]);
			}
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreCellHitEvent(cells[j],starter,"specialItem",scenario));
		}
	}
	,activateByExplosionScenario: function(cells) {
		var cellLength = cells.length;
		var j = -1;
		var item;
		while(++j < cellLength) {
			item = cells[j].item;
			if(item != null && item.inAction) {
				com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemDestroyEvent("set_items_in_action",item,item.destroyInfo.cause));
			}
		}
	}
	,canExplodeCellByScenario: function(cell,starter) {
		if(cell.hasExplosionDestroybleElement()) {
			return true;
		}
		if(cell.item != null && cell.item.inAction && starter != null) {
			if(cell.item.destroyInfo.starter != starter) {
				return cell.item == starter.item;
			} else {
				return true;
			}
		}
		return false;
	}
	,applyOneScenario: function(scenario) {
		var scenarioResult = scenario.apply();
		if(scenarioResult == null) {
			return;
		}
		var starter = null;
		if(scenario.getStarterCoord() != null) {
			starter = this._gameEngine.board.getCellByCoords(scenario.getStarterCoord().x,scenario.getStarterCoord().y,true);
		}
		this.applyScenarioResult(scenarioResult,starter);
	}
	,applyScenarioResult: function(scenarioResult,starter) {
		var changed = scenarioResult.changedCells;
		if(changed != null && changed.length > 0) {
			this.changedByExplosionScenario(changed,scenarioResult.scenario,starter);
		}
		var activatedCells = scenarioResult.activatedCells;
		if(activatedCells != null && activatedCells.length > 0) {
			this.activateByExplosionScenario(activatedCells);
		}
		var destroyedCells = scenarioResult.destroyedCells;
		if(destroyedCells != null && destroyedCells.length > 0) {
			this.destroyByExplosionScenario(destroyedCells,scenarioResult.scenario,starter);
		}
	}
	,scenariosCompleted: function() {
		if(this.scenarios.length == 0) {
			return this._newScenarios.length == 0;
		} else {
			return false;
		}
	}
	,tryStabilizeByReason: function(reason) {
		var i = this._pausedScenarios.length;
		if(i == 0) {
			return true;
		}
		var result = true;
		while(--i >= 0) if(this._pausedScenarios[i].paused == reason) {
			result = false;
			this._pausedScenarios[i].resetPausedState();
			this.scenarios.push(this._pausedScenarios[i]);
			var length = this._pausedScenarios.length - 1;
			if(i < length) {
				this._pausedScenarios[i] = this._pausedScenarios[length];
			}
			this._pausedScenarios.pop();
		}
		return result;
	}
	,reset: function() {
		this.scenarios = [];
		this._newScenarios = [];
		this._pausedScenarios = [];
		this.homingBombScenariosCount = com_sq_m3lib_coreSettings_CoreSettings.homingBombParams.noBoostCount;
		this.boosted = false;
	}
	,onLevelFinish: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreFinishLevelBoostEvent("finish_level_boost_started"));
		this.addScenarioToList(new com_sq_m3lib_board_explosionScenarios_finishLevel_FinishLevelBoostScenario(this._gameEngine));
		this._gameEngine.board.unstabilize();
	}
	,__class__: com_sq_m3lib_board_ScenarioFactory
};
var com_sq_m3lib_board_ScenarioPauseReason = { __ename__ : true, __constructs__ : ["WAIT_STABILIZATION","WAIT_STABILIZATION_EXPLOSION","NONE"] };
com_sq_m3lib_board_ScenarioPauseReason.WAIT_STABILIZATION = ["WAIT_STABILIZATION",0];
com_sq_m3lib_board_ScenarioPauseReason.WAIT_STABILIZATION.toString = $estr;
com_sq_m3lib_board_ScenarioPauseReason.WAIT_STABILIZATION.__enum__ = com_sq_m3lib_board_ScenarioPauseReason;
com_sq_m3lib_board_ScenarioPauseReason.WAIT_STABILIZATION_EXPLOSION = ["WAIT_STABILIZATION_EXPLOSION",1];
com_sq_m3lib_board_ScenarioPauseReason.WAIT_STABILIZATION_EXPLOSION.toString = $estr;
com_sq_m3lib_board_ScenarioPauseReason.WAIT_STABILIZATION_EXPLOSION.__enum__ = com_sq_m3lib_board_ScenarioPauseReason;
com_sq_m3lib_board_ScenarioPauseReason.NONE = ["NONE",2];
com_sq_m3lib_board_ScenarioPauseReason.NONE.toString = $estr;
com_sq_m3lib_board_ScenarioPauseReason.NONE.__enum__ = com_sq_m3lib_board_ScenarioPauseReason;
var com_sq_m3lib_board_ScoreDictionary = function() {
};
$hxClasses["com.sq.m3lib.board.ScoreDictionary"] = com_sq_m3lib_board_ScoreDictionary;
com_sq_m3lib_board_ScoreDictionary.__name__ = true;
com_sq_m3lib_board_ScoreDictionary.loadConfig = function(scoreConfig) {
	var configLength = scoreConfig.length;
	com_sq_m3lib_board_ScoreDictionary.scores = new haxe_ds_StringMap();
	var oneConfig;
	while(--configLength >= 0) {
		oneConfig = scoreConfig[configLength];
		var value = oneConfig.score;
		var _this = com_sq_m3lib_board_ScoreDictionary.scores;
		var key = oneConfig.className;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
};
com_sq_m3lib_board_ScoreDictionary.prototype = {
	__class__: com_sq_m3lib_board_ScoreDictionary
};
var com_sq_m3lib_board_ScoreFactory = function(engine) {
	this._score = 0;
	this.comboCount = 0;
	this._gameEngine = engine;
};
$hxClasses["com.sq.m3lib.board.ScoreFactory"] = com_sq_m3lib_board_ScoreFactory;
com_sq_m3lib_board_ScoreFactory.__name__ = true;
com_sq_m3lib_board_ScoreFactory.prototype = {
	addComboScore: function(combo,starter) {
		var comboLength = combo.cells.length;
		var comboCoeff;
		var comboCoeffDivider;
		var comboLengthString = comboLength > com_sq_m3lib_coreSettings_CoreSettings.scoreParams.maxBonusMutiplier?Std.string(com_sq_m3lib_coreSettings_CoreSettings.scoreParams.maxBonusMutiplier):comboLength == null?"null":"" + comboLength;
		var _this = com_sq_m3lib_coreSettings_CoreSettings.scoreParams.comboScoreDictionary;
		comboCoeff = (__map_reserved[comboLengthString] != null?_this.getReserved(comboLengthString):_this.h[comboLengthString]).multiplier;
		var _this1 = com_sq_m3lib_coreSettings_CoreSettings.scoreParams.comboScoreDictionary;
		comboCoeffDivider = (__map_reserved[comboLengthString] != null?_this1.getReserved(comboLengthString):_this1.h[comboLengthString]).divider;
		var itemsCost = 0;
		while(--comboLength >= 0) itemsCost += combo.cells[comboLength].item.getScore();
		var result = itemsCost * (this.comboCount + 1) * comboCoeff / comboCoeffDivider | 0;
		this.comboCount++;
		this._score += result;
		if(result > 0) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreAddScoreEvent(result,starter,"combo"));
		}
	}
	,addItemScore: function(item,cause) {
		var itemScore = item.getScore() * com_sq_m3lib_coreSettings_CoreSettings.scoreParams.minCombo;
		if(itemScore > 0) {
			this._score += itemScore;
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreAddScoreEvent(itemScore,item.cell,cause));
		}
	}
	,addSimpleItemScore: function(item,score,cause) {
		this._score += score;
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreAddScoreEvent(score,item.cell,cause));
	}
	,addBlockerScore: function(blocker,cause) {
		var score = blocker.getScore();
		if(score > 0) {
			this._score += score;
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreAddScoreEvent(score,blocker.cell,cause));
		}
	}
	,addHiddenObjectScore: function(object,cause) {
		var score = object.getScore();
		if(score > 0) {
			this._score += score;
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreAddScoreEvent(score,object.getFistCell(),cause));
		}
	}
	,getScore: function() {
		return this._score;
	}
	,onBoardStable: function() {
		this.comboCount = 0;
	}
	,reset: function() {
		this._score = 0;
		this.comboCount = 0;
	}
	,free: function() {
		this.reset();
	}
	,__class__: com_sq_m3lib_board_ScoreFactory
};
var com_sq_m3lib_board_ViewPointsData = function(points) {
	this._currentIndex = 0;
	this.viewPoints = [];
	if(points != null) {
		var count = points.length;
		var i = -1;
		while(++i < count) this.viewPoints[i] = com_sq_m3lib_geometry_Coord.fromViewPoint(points[i]);
	} else {
		this.viewPoints.push(new com_sq_m3lib_geometry_Coord(0,0));
	}
	this._viewPointsLength = this.viewPoints.length;
};
$hxClasses["com.sq.m3lib.board.ViewPointsData"] = com_sq_m3lib_board_ViewPointsData;
com_sq_m3lib_board_ViewPointsData.__name__ = true;
com_sq_m3lib_board_ViewPointsData.prototype = {
	getFirst: function() {
		return this.viewPoints[0];
	}
	,getCurrent: function() {
		return this.viewPoints[this._currentIndex];
	}
	,pop: function() {
		this._currentIndex++;
		if(this._currentIndex >= this._viewPointsLength) {
			this._currentIndex = this._viewPointsLength - 1;
		}
	}
	,toViewPoints: function() {
		var result = [];
		var count = this._viewPointsLength;
		var i = -1;
		while(++i < count) result[i] = this.viewPoints[i].toViewPoint();
		return result;
	}
	,getCurrentIndex: function() {
		return this._currentIndex;
	}
	,setCurrentIndex: function(val) {
		this._currentIndex = val;
		if(this._currentIndex >= this._viewPointsLength) {
			this._currentIndex = this._viewPointsLength - 1;
		}
	}
	,__class__: com_sq_m3lib_board_ViewPointsData
};
var com_sq_m3lib_board_ViralBlockerManager = function(engine) {
	this._needTrimOnStable = false;
	this._spawnEnabled = false;
	this._gameEngine = engine;
	this.inited = true;
	this._destroyedDictionary = new haxe_ds_StringMap();
	this._onRemovedCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("destroy_blocker",$bind(this,this.onBlockerRemoved));
	this._onAddedCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("spawn_blocker",$bind(this,this.onBlockerAdded));
	this._onMoveCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreItemsSwitchEvent.ITEM_SWITCH_SUCCESS,$bind(this,this.onUserMove),100);
	this._onViewPortChanged = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED,$bind(this,this.onViewPortChanged),100);
};
$hxClasses["com.sq.m3lib.board.ViralBlockerManager"] = com_sq_m3lib_board_ViralBlockerManager;
com_sq_m3lib_board_ViralBlockerManager.__name__ = true;
com_sq_m3lib_board_ViralBlockerManager.prototype = {
	loadPriorityRules: function(rules,viralIncreaseProbability) {
		com_sq_m3lib_board_ViralBlockerManager.defaultViralIncreaseProbability = viralIncreaseProbability;
		com_sq_m3lib_board_ViralBlockerManager.viralPriorityRules = new haxe_ds_StringMap();
		if(rules == null) {
			return;
		}
		var rulesCount = rules.length;
		var prioritiesCount;
		var rule;
		while(--rulesCount >= 0) {
			rule = rules[rulesCount];
			var v = new haxe_ds_StringMap();
			var _this = com_sq_m3lib_board_ViralBlockerManager.viralPriorityRules;
			var key = rule.blockerName;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,v);
			} else {
				_this.h[key] = v;
			}
			prioritiesCount = rule.priorities.length;
			while(--prioritiesCount >= 0) {
				var _this1 = com_sq_m3lib_board_ViralBlockerManager.viralPriorityRules;
				var key1 = rule.blockerName;
				(__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]).set(rule.priorities[prioritiesCount].className,rule.priorities[prioritiesCount].priority);
			}
		}
	}
	,onViewPortChanged: function(e) {
		this._blockerCells = new haxe_ds_StringMap();
		var blockers = this._gameEngine.board.getBlockers();
		var i = -1;
		var count = blockers.length;
		var blocker;
		var blockerAlias;
		while(++i < count) {
			if(!js_Boot.__instanceof(blockers[i],com_sq_m3lib_board_cellBlockers_IViralBlocker)) {
				continue;
			}
			blockerAlias = blockers[i].alias;
			blocker = js_Boot.__cast(blockers[i] , com_sq_m3lib_board_cellBlockers_IViralBlocker);
			var _this = this._blockerCells;
			if(!(__map_reserved[blockerAlias] != null?_this.existsReserved(blockerAlias):_this.h.hasOwnProperty(blockerAlias))) {
				var v = [];
				var _this1 = this._blockerCells;
				if(__map_reserved[blockerAlias] != null) {
					_this1.setReserved(blockerAlias,v);
				} else {
					_this1.h[blockerAlias] = v;
				}
			}
			var _this2 = this._blockerCells;
			(__map_reserved[blockerAlias] != null?_this2.getReserved(blockerAlias):_this2.h[blockerAlias]).push(blocker.cell);
		}
	}
	,onBlockerRemoved: function(e) {
		var event = js_Boot.__cast(e , com_sq_m3lib_events_CoreBlockerEvent);
		if(!js_Boot.__instanceof(event.getBlocker(),com_sq_m3lib_board_cellBlockers_IViralBlocker)) {
			return;
		}
		var blocker = event.getBlocker();
		var blockerAlias = blocker.alias;
		var _this = this._destroyedDictionary;
		if(!(__map_reserved[blockerAlias] != null?_this.existsReserved(blockerAlias):_this.h.hasOwnProperty(blockerAlias))) {
			var _this1 = this._destroyedDictionary;
			if(__map_reserved[blockerAlias] != null) {
				_this1.setReserved(blockerAlias,0);
			} else {
				_this1.h[blockerAlias] = 0;
			}
		}
		var _this2 = this._destroyedDictionary;
		var v = (__map_reserved[blockerAlias] != null?_this2.getReserved(blockerAlias):_this2.h[blockerAlias]) + 1;
		var _this3 = this._destroyedDictionary;
		if(__map_reserved[blockerAlias] != null) {
			_this3.setReserved(blockerAlias,v);
		} else {
			_this3.h[blockerAlias] = v;
		}
		if(!blocker.isDestroyed()) {
			return;
		}
		var _this4 = this._blockerCells;
		if(__map_reserved[blockerAlias] != null?_this4.existsReserved(blockerAlias):_this4.h.hasOwnProperty(blockerAlias)) {
			var _this5 = this._blockerCells;
			var cellIndex = (__map_reserved[blockerAlias] != null?_this5.getReserved(blockerAlias):_this5.h[blockerAlias]).indexOf(blocker.cell);
			if(cellIndex >= 0) {
				var _this6 = this._blockerCells;
				(__map_reserved[blockerAlias] != null?_this6.getReserved(blockerAlias):_this6.h[blockerAlias])[cellIndex] = null;
				this._needTrimOnStable = true;
			}
		}
	}
	,onBlockerAdded: function(e) {
		var event = js_Boot.__cast(e , com_sq_m3lib_events_CoreBlockerEvent);
		if(!js_Boot.__instanceof(event.getBlocker(),com_sq_m3lib_board_cellBlockers_IViralBlocker)) {
			return;
		}
		var blocker = event.getBlocker();
		var blockerAlias = blocker.alias;
		var _this = this._blockerCells;
		if(!(__map_reserved[blockerAlias] != null?_this.existsReserved(blockerAlias):_this.h.hasOwnProperty(blockerAlias))) {
			var v = [];
			var _this1 = this._blockerCells;
			if(__map_reserved[blockerAlias] != null) {
				_this1.setReserved(blockerAlias,v);
			} else {
				_this1.h[blockerAlias] = v;
			}
		}
		var _this2 = this._blockerCells;
		if((__map_reserved[blockerAlias] != null?_this2.getReserved(blockerAlias):_this2.h[blockerAlias]).indexOf(blocker.cell) == -1) {
			var _this3 = this._blockerCells;
			(__map_reserved[blockerAlias] != null?_this3.getReserved(blockerAlias):_this3.h[blockerAlias]).push(blocker.cell);
		}
	}
	,onUserMove: function(e) {
		var tmp = this._destroyedDictionary.keys();
		while(tmp.hasNext()) {
			var blocker = tmp.next();
			var _this = this._destroyedDictionary;
			if(__map_reserved[blocker] != null) {
				_this.setReserved(blocker,0);
			} else {
				_this.h[blocker] = 0;
			}
		}
		this._spawnEnabled = true;
	}
	,onBoardStable: function() {
		if(this._needTrimOnStable) {
			this.trimNullElements();
		}
		if(!this._spawnEnabled) {
			return;
		}
		var blocker;
		var viralScenarioResult;
		var result = null;
		var tmp = this._blockerCells.keys();
		while(tmp.hasNext()) {
			var blockerAlias = tmp.next();
			var _this = this._blockerCells;
			if((__map_reserved[blockerAlias] != null?_this.getReserved(blockerAlias):_this.h[blockerAlias]).length == 0) {
				continue;
			}
			var tmp1;
			var _this1 = this._destroyedDictionary;
			if(__map_reserved[blockerAlias] != null?_this1.existsReserved(blockerAlias):_this1.h.hasOwnProperty(blockerAlias)) {
				var _this2 = this._destroyedDictionary;
				tmp1 = (__map_reserved[blockerAlias] != null?_this2.getReserved(blockerAlias):_this2.h[blockerAlias]) > 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				continue;
			}
			var _this3 = this._blockerCells;
			blocker = (__map_reserved[blockerAlias] != null?_this3.getReserved(blockerAlias):_this3.h[blockerAlias])[0].getBlocker().viralBlocker;
			var tmp2 = blocker.getViralScenario();
			var _this4 = this._blockerCells;
			viralScenarioResult = Type.createInstance(tmp2,[blocker,__map_reserved[blockerAlias] != null?_this4.getReserved(blockerAlias):_this4.h[blockerAlias],this._gameEngine]).apply();
			if(viralScenarioResult != null) {
				var _this5 = this._destroyedDictionary;
				if(__map_reserved[blockerAlias] != null) {
					_this5.setReserved(blockerAlias,1);
				} else {
					_this5.h[blockerAlias] = 1;
				}
				result = viralScenarioResult;
				break;
			}
		}
		if(result != null && result.length != 0) {
			this._gameEngine.board.spawnNewBlockers(result);
		} else {
			this._spawnEnabled = false;
		}
	}
	,trimNullElements: function() {
		var tmpArray;
		var lengthCounter = 0;
		var count;
		var i;
		var cell;
		var tmp = this._blockerCells.keys();
		while(tmp.hasNext()) {
			var blocker = tmp.next();
			var _this = this._blockerCells;
			count = (__map_reserved[blocker] != null?_this.getReserved(blocker):_this.h[blocker]).length;
			if(count == 0) {
				continue;
			}
			var tmp1;
			var _this1 = this._destroyedDictionary;
			if(!(!(__map_reserved[blocker] != null?_this1.existsReserved(blocker):_this1.h.hasOwnProperty(blocker)))) {
				var _this2 = this._destroyedDictionary;
				tmp1 = (__map_reserved[blocker] != null?_this2.getReserved(blocker):_this2.h[blocker]) == 0;
			} else {
				tmp1 = true;
			}
			if(tmp1) {
				continue;
			}
			tmpArray = [];
			lengthCounter = 0;
			i = -1;
			while(++i < count) {
				var _this3 = this._blockerCells;
				cell = (__map_reserved[blocker] != null?_this3.getReserved(blocker):_this3.h[blocker])[i];
				if(cell != null) {
					tmpArray[lengthCounter] = cell;
					++lengthCounter;
				}
			}
			var _this4 = this._blockerCells;
			if(__map_reserved[blocker] != null) {
				_this4.setReserved(blocker,tmpArray);
			} else {
				_this4.h[blocker] = tmpArray;
			}
		}
	}
	,removeListeners: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("destroy_blocker",this._onRemovedCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("spawn_blocker",this._onAddedCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreItemsSwitchEvent.ITEM_SWITCH_SUCCESS,this._onMoveCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED,this._onViewPortChanged);
		this._needTrimOnStable = false;
		this._spawnEnabled = false;
	}
	,free: function() {
		this.inited = false;
		this.removeListeners();
	}
	,getCellsByBlockerAlias: function(alias) {
		var result = [];
		var _this = this._blockerCells;
		var cells = __map_reserved[alias] != null?_this.getReserved(alias):_this.h[alias];
		var _g = 0;
		while(_g < cells.length) {
			var c = cells[_g];
			++_g;
			if(!c.getItem().disabled && result.indexOf(c) == -1) {
				result.push(c);
				var _g1 = 0;
				var _g2 = c.neighbours;
				while(_g1 < _g2.length) {
					var n = _g2[_g1];
					++_g1;
					if(!n.getItem().disabled && result.indexOf(n) == -1) {
						result.push(n);
					}
				}
			}
		}
		return result;
	}
	,__class__: com_sq_m3lib_board_ViralBlockerManager
};
var com_sq_m3lib_board_boosters_BaseBooster = function(boosterAlias) {
	this.alias = boosterAlias;
};
$hxClasses["com.sq.m3lib.board.boosters.BaseBooster"] = com_sq_m3lib_board_boosters_BaseBooster;
com_sq_m3lib_board_boosters_BaseBooster.__name__ = true;
com_sq_m3lib_board_boosters_BaseBooster.prototype = {
	getScenarioClass: function() {
		return null;
	}
	,canApply: function(params) {
		return false;
	}
	,__class__: com_sq_m3lib_board_boosters_BaseBooster
};
var com_sq_m3lib_board_boosters_BoosterApplyParams = function(cell,switchCell,itemDescription,count) {
	this.cell = cell;
	this.switchCell = switchCell;
	this.itemDescription = itemDescription;
	this.count = count;
};
$hxClasses["com.sq.m3lib.board.boosters.BoosterApplyParams"] = com_sq_m3lib_board_boosters_BoosterApplyParams;
com_sq_m3lib_board_boosters_BoosterApplyParams.__name__ = true;
com_sq_m3lib_board_boosters_BoosterApplyParams.prototype = {
	__class__: com_sq_m3lib_board_boosters_BoosterApplyParams
};
var com_sq_m3lib_board_boosters_BoostersFactory = function(engine) {
	this._gameEngine = engine;
	this.boosters = new haxe_ds_StringMap();
};
$hxClasses["com.sq.m3lib.board.boosters.BoostersFactory"] = com_sq_m3lib_board_boosters_BoostersFactory;
com_sq_m3lib_board_boosters_BoostersFactory.__name__ = true;
com_sq_m3lib_board_boosters_BoostersFactory.prototype = {
	initBoosters: function() {
		var tmp = com_sq_m3lib_coreSettings_CoreClassesDictionary.boosterClassesDictionary.keys();
		while(tmp.hasNext()) {
			var key = tmp.next();
			var _this = com_sq_m3lib_coreSettings_CoreClassesDictionary.boosterClassesDictionary;
			var v = Type.createInstance(__map_reserved[key] != null?_this.getReserved(key):_this.h[key],[key]);
			var _this1 = this.boosters;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,v);
			} else {
				_this1.h[key] = v;
			}
		}
	}
	,setApplyQueue: function(applyQueue) {
		this.applyQueue = applyQueue;
	}
	,getBoosterByAlias: function(key) {
		var _this = this.boosters;
		return __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
	}
	,applyBoost: function(boost,boosterParams) {
		if(!this._gameEngine.board.isStable()) {
			return;
		}
		if(boost.canApply(boosterParams)) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreBoosterEvent(boost,boosterParams));
			this._gameEngine.destroyFactory.addScenarioToList(Type.createInstance(boost.getScenarioClass(),[this._gameEngine,boost,boosterParams]));
			this._gameEngine.board.unstabilize();
		}
	}
	,applyStartBoost: function(boost,boosterParams) {
		if(!this._gameEngine.board.isStable()) {
			return;
		}
		if(boost.canApply(boosterParams)) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreBoosterEvent(boost,boosterParams));
			this._gameEngine.destroyFactory.scenarioFactory.addStartScenarioToList(Type.createInstance(boost.getScenarioClass(),[this._gameEngine,boost,boosterParams]));
			this._gameEngine.board.unstabilize();
		}
	}
	,reset: function() {
		this.boosters = new haxe_ds_StringMap();
	}
	,applyQueued: function() {
		if(this.applyQueue != null) {
			return this.applyQueue.length > 0;
		} else {
			return false;
		}
	}
	,stepQueue: function() {
		if(this.applyQueue != null) {
			var data = this.applyQueue.shift();
			this.applyStartBoost(this.getBoosterByAlias(data.booster),data.params);
		}
	}
	,__class__: com_sq_m3lib_board_boosters_BoostersFactory
};
var com_sq_m3lib_board_boosters_SimpleItemRemoveBooster = function(boosterAlias) {
	com_sq_m3lib_board_boosters_BaseBooster.call(this,boosterAlias);
};
$hxClasses["com.sq.m3lib.board.boosters.SimpleItemRemoveBooster"] = com_sq_m3lib_board_boosters_SimpleItemRemoveBooster;
com_sq_m3lib_board_boosters_SimpleItemRemoveBooster.__name__ = true;
com_sq_m3lib_board_boosters_SimpleItemRemoveBooster.__super__ = com_sq_m3lib_board_boosters_BaseBooster;
com_sq_m3lib_board_boosters_SimpleItemRemoveBooster.prototype = $extend(com_sq_m3lib_board_boosters_BaseBooster.prototype,{
	getScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_boosterScenarios_ItemDestroyBoosterScenario;
	}
	,canApply: function(params) {
		if(!params.cell.hasExplosionDestroybleElement()) {
			return false;
		}
		return true;
	}
	,__class__: com_sq_m3lib_board_boosters_SimpleItemRemoveBooster
});
var com_sq_m3lib_board_boosters_ColorItemsRemoveBooster = function(boosterAlias) {
	com_sq_m3lib_board_boosters_SimpleItemRemoveBooster.call(this,boosterAlias);
};
$hxClasses["com.sq.m3lib.board.boosters.ColorItemsRemoveBooster"] = com_sq_m3lib_board_boosters_ColorItemsRemoveBooster;
com_sq_m3lib_board_boosters_ColorItemsRemoveBooster.__name__ = true;
com_sq_m3lib_board_boosters_ColorItemsRemoveBooster.__super__ = com_sq_m3lib_board_boosters_SimpleItemRemoveBooster;
com_sq_m3lib_board_boosters_ColorItemsRemoveBooster.prototype = $extend(com_sq_m3lib_board_boosters_SimpleItemRemoveBooster.prototype,{
	getScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_boosterScenarios_ColorDestroyedBoosterScenario;
	}
	,canApply: function(params) {
		if(!com_sq_m3lib_board_boosters_SimpleItemRemoveBooster.prototype.canApply.call(this,params)) {
			return false;
		}
		var cell = params.cell;
		if(cell.hasComboBlocker()) {
			return false;
		}
		var item = cell.item;
		if(js_Boot.__instanceof(item,com_sq_m3lib_board_items_IColorItem)) {
			return true;
		}
		if(js_Boot.__instanceof(item,com_sq_m3lib_board_items_ColorPickerBomb)) {
			return true;
		}
		return false;
	}
	,__class__: com_sq_m3lib_board_boosters_ColorItemsRemoveBooster
});
var com_sq_m3lib_board_boosters_CrossItemsRemoveBooster = function(boosterAlias) {
	com_sq_m3lib_board_boosters_SimpleItemRemoveBooster.call(this,boosterAlias);
};
$hxClasses["com.sq.m3lib.board.boosters.CrossItemsRemoveBooster"] = com_sq_m3lib_board_boosters_CrossItemsRemoveBooster;
com_sq_m3lib_board_boosters_CrossItemsRemoveBooster.__name__ = true;
com_sq_m3lib_board_boosters_CrossItemsRemoveBooster.__super__ = com_sq_m3lib_board_boosters_SimpleItemRemoveBooster;
com_sq_m3lib_board_boosters_CrossItemsRemoveBooster.prototype = $extend(com_sq_m3lib_board_boosters_SimpleItemRemoveBooster.prototype,{
	getScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_boosterScenarios_CrossDestroyBoosterScenario;
	}
	,__class__: com_sq_m3lib_board_boosters_CrossItemsRemoveBooster
});
var com_sq_m3lib_board_boosters_ExtraHomingBombBooster = function(boosterAlias) {
	com_sq_m3lib_board_boosters_BaseBooster.call(this,boosterAlias);
};
$hxClasses["com.sq.m3lib.board.boosters.ExtraHomingBombBooster"] = com_sq_m3lib_board_boosters_ExtraHomingBombBooster;
com_sq_m3lib_board_boosters_ExtraHomingBombBooster.__name__ = true;
com_sq_m3lib_board_boosters_ExtraHomingBombBooster.__super__ = com_sq_m3lib_board_boosters_BaseBooster;
com_sq_m3lib_board_boosters_ExtraHomingBombBooster.prototype = $extend(com_sq_m3lib_board_boosters_BaseBooster.prototype,{
	getScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_boosterScenarios_ExtraHomingBombBoosterScenario;
	}
	,canApply: function(params) {
		return true;
	}
	,__class__: com_sq_m3lib_board_boosters_ExtraHomingBombBooster
});
var com_sq_m3lib_board_boosters_FreeMoveBooster = function(boosterAlias) {
	com_sq_m3lib_board_boosters_BaseBooster.call(this,boosterAlias);
};
$hxClasses["com.sq.m3lib.board.boosters.FreeMoveBooster"] = com_sq_m3lib_board_boosters_FreeMoveBooster;
com_sq_m3lib_board_boosters_FreeMoveBooster.__name__ = true;
com_sq_m3lib_board_boosters_FreeMoveBooster.__super__ = com_sq_m3lib_board_boosters_BaseBooster;
com_sq_m3lib_board_boosters_FreeMoveBooster.prototype = $extend(com_sq_m3lib_board_boosters_BaseBooster.prototype,{
	getScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_boosterScenarios_FreeMoveBoosterScenario;
	}
	,canApply: function(params) {
		if(params.cell == null || params.switchCell == null) {
			return false;
		}
		if(!params.cell.hasItemInCell() || !params.cell.canMoveItem()) {
			return false;
		}
		if(!params.switchCell.hasItemInCell() || !params.switchCell.canMoveItem()) {
			return false;
		}
		return params.cell.areNeighbours(params.switchCell);
	}
	,__class__: com_sq_m3lib_board_boosters_FreeMoveBooster
});
var com_sq_m3lib_board_boosters_StartItemsPackBooster = function(boosterAlias) {
	com_sq_m3lib_board_boosters_BaseBooster.call(this,boosterAlias);
};
$hxClasses["com.sq.m3lib.board.boosters.StartItemsPackBooster"] = com_sq_m3lib_board_boosters_StartItemsPackBooster;
com_sq_m3lib_board_boosters_StartItemsPackBooster.__name__ = true;
com_sq_m3lib_board_boosters_StartItemsPackBooster.__super__ = com_sq_m3lib_board_boosters_BaseBooster;
com_sq_m3lib_board_boosters_StartItemsPackBooster.prototype = $extend(com_sq_m3lib_board_boosters_BaseBooster.prototype,{
	getScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_boosterScenarios_StartItemsPackBoosterScenario;
	}
	,canApply: function(params) {
		return true;
	}
	,__class__: com_sq_m3lib_board_boosters_StartItemsPackBooster
});
var com_sq_m3lib_board_cellBlockers_BaseCellBlocker = function(cell,attributes) {
	com_sq_m3lib_board_BaseBoardAnimatedObject.call(this);
	this.cell = cell;
	this.step = attributes.step;
	this.alias = attributes.className;
	this.priority = attributes.priority;
};
$hxClasses["com.sq.m3lib.board.cellBlockers.BaseCellBlocker"] = com_sq_m3lib_board_cellBlockers_BaseCellBlocker;
com_sq_m3lib_board_cellBlockers_BaseCellBlocker.__name__ = true;
com_sq_m3lib_board_cellBlockers_BaseCellBlocker.__super__ = com_sq_m3lib_board_BaseBoardAnimatedObject;
com_sq_m3lib_board_cellBlockers_BaseCellBlocker.prototype = $extend(com_sq_m3lib_board_BaseBoardAnimatedObject.prototype,{
	canMoveItem: function() {
		return false;
	}
	,destroyOnCellItemDestroy: function() {
		return true;
	}
	,destroyOnNearDestroyed: function() {
		return true;
	}
	,canCombineItem: function() {
		return false;
	}
	,preventOtherBlockerFromExpand: function() {
		return false;
	}
	,blockerStep: function() {
		return this.step;
	}
	,destroyStep: function(destroyInfo) {
		this.step--;
		this.setAnimationLength(com_sq_m3lib_board_ItemAnimationFactory.getLength("simple_collapse"));
		if(this.step < 0) {
			this.step = 0;
		}
		if(this.isDestroyed() && destroyInfo != null) {
			this.destroyInfo = destroyInfo;
		}
	}
	,increaseStep: function() {
	}
	,getCoords: function() {
		return this.cell.coords;
	}
	,isDestroyed: function() {
		return this.step == 0;
	}
	,getScore: function() {
		var scoreAlias = this.alias;
		var _this = com_sq_m3lib_board_ScoreDictionary.scores;
		var key = this.alias;
		if(!(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key))) {
			scoreAlias = "blocker_base";
		}
		if(this.destroyInfo.cause == "specialItem") {
			var _this1 = com_sq_m3lib_board_ScoreDictionary.scores;
			return 3 * (__map_reserved[scoreAlias] != null?_this1.getReserved(scoreAlias):_this1.h[scoreAlias]);
		} else {
			var _this2 = com_sq_m3lib_board_ScoreDictionary.scores;
			return __map_reserved[scoreAlias] != null?_this2.getReserved(scoreAlias):_this2.h[scoreAlias];
		}
	}
	,getBlockerTypeAlias: function() {
		return this.alias;
	}
	,getBlockerDescription: function() {
		var result = new com_sq_m3lib_board_cellBlockers_BlockerFactoryDescription();
		result.className = this.alias;
		result.step = this.step;
		result.priority = this.priority;
		return result;
	}
	,getCell: function() {
		return this.cell;
	}
	,getLogData: function() {
		return this.getBlockerDescription();
	}
	,__class__: com_sq_m3lib_board_cellBlockers_BaseCellBlocker
});
var com_sq_m3lib_board_cellBlockers_BlockerFactoryDescription = function() {
	this.priority = 0;
	this.maxStep = 0;
	this.step = 0;
};
$hxClasses["com.sq.m3lib.board.cellBlockers.BlockerFactoryDescription"] = com_sq_m3lib_board_cellBlockers_BlockerFactoryDescription;
com_sq_m3lib_board_cellBlockers_BlockerFactoryDescription.__name__ = true;
com_sq_m3lib_board_cellBlockers_BlockerFactoryDescription.fromJson = function(data) {
	var result = null;
	if(data != null) {
		result = new com_sq_m3lib_board_cellBlockers_BlockerFactoryDescription();
		result.className = data.className;
		result.step = data.step;
		result.maxStep = data.maxStep;
		result.priority = data.priority;
	}
	return result;
};
com_sq_m3lib_board_cellBlockers_BlockerFactoryDescription.prototype = {
	clone: function() {
		var result = new com_sq_m3lib_board_cellBlockers_BlockerFactoryDescription();
		result.className = this.className;
		result.step = this.step;
		result.maxStep = this.maxStep;
		result.priority = this.priority;
		return result;
	}
	,__class__: com_sq_m3lib_board_cellBlockers_BlockerFactoryDescription
};
var com_sq_m3lib_board_cellBlockers_BlockersFactoryDictionary = function() {
};
$hxClasses["com.sq.m3lib.board.cellBlockers.BlockersFactoryDictionary"] = com_sq_m3lib_board_cellBlockers_BlockersFactoryDictionary;
com_sq_m3lib_board_cellBlockers_BlockersFactoryDictionary.__name__ = true;
com_sq_m3lib_board_cellBlockers_BlockersFactoryDictionary.getByAlias = function(alias) {
	return com_sq_m3lib_board_CommonFactoryDictionary.getByAlias(com_sq_m3lib_coreSettings_CoreClassesDictionary.blockersClassDictionary,alias);
};
com_sq_m3lib_board_cellBlockers_BlockersFactoryDictionary.getByClass = function(classDef) {
	return com_sq_m3lib_board_CommonFactoryDictionary.getByClass(com_sq_m3lib_coreSettings_CoreClassesDictionary.blockersClassDictionary,classDef);
};
com_sq_m3lib_board_cellBlockers_BlockersFactoryDictionary.prototype = {
	__class__: com_sq_m3lib_board_cellBlockers_BlockersFactoryDictionary
};
var com_sq_m3lib_board_cellBlockers_BlockersSet = function() {
	this.destroyOnNearCellItemDestroyed = false;
	this.destroyOnCellItemDestroy = false;
	this.hasComboBlocker = false;
	this.hasStableBlocker = false;
	this._blockersCount = 0;
	this.blockers = [];
};
$hxClasses["com.sq.m3lib.board.cellBlockers.BlockersSet"] = com_sq_m3lib_board_cellBlockers_BlockersSet;
com_sq_m3lib_board_cellBlockers_BlockersSet.__name__ = true;
com_sq_m3lib_board_cellBlockers_BlockersSet.prototype = {
	getPriorityBlocker: function() {
		return this.priorityBlocker;
	}
	,hasBlocker: function(val) {
		return this.blockers.indexOf(val) >= 0;
	}
	,isEmpty: function() {
		return this._blockersCount == 0;
	}
	,isDestroyed: function() {
		var i = this._blockersCount;
		while(--i >= 0) if(!this.blockers[i].isDestroyed()) {
			return false;
		}
		return true;
	}
	,getAllBlockers: function() {
		return this.blockers;
	}
	,canViralBlockerExpand: function() {
		if(this.viralBlocker == null) {
			return false;
		}
		var viralBaseBlocker = js_Boot.__cast(this.viralBlocker , com_sq_m3lib_board_cellBlockers_BaseCellBlocker);
		var i = -1;
		while(++i < this._blockersCount) {
			if(this.blockers[i] == viralBaseBlocker) {
				return true;
			}
			if(this.blockers[i].preventOtherBlockerFromExpand()) {
				return false;
			}
		}
		return true;
	}
	,addBlocker: function(val,destroyOnNear) {
		if(destroyOnNear == null) {
			destroyOnNear = false;
		}
		if(this._blockersCount == 0) {
			this.blockers = [val];
		} else {
			var _g1 = 0;
			var _g = this._blockersCount;
			while(_g1 < _g) {
				var i = _g1++;
				if(i == this._blockersCount - 1 || val.priority >= this.blockers[i].priority) {
					this.blockers.splice(i,0,val);
					break;
				}
			}
		}
		this._blockersCount++;
		this.priorityBlocker = this.blockers[0];
		this.recalculateBlockerParams(destroyOnNear);
	}
	,destroyBlocker: function() {
		if(this._blockersCount == 0) {
			this.priorityBlocker = null;
			this.viralBlocker = null;
			return;
		}
		this.blockers.shift();
		this._blockersCount--;
		this.priorityBlocker = this._blockersCount > 0?this.blockers[0]:null;
		this.recalculateBlockerParams();
	}
	,recalculateBlockerParams: function(destroyOnNear) {
		if(destroyOnNear == null) {
			destroyOnNear = false;
		}
		this.hasStableBlocker = false;
		this.hasComboBlocker = false;
		this.destroyOnCellItemDestroy = false;
		this.destroyOnNearCellItemDestroyed = false;
		this.viralBlocker = null;
		var i = -1;
		var blocker;
		while(++i < this._blockersCount) {
			blocker = this.blockers[i];
			if(this.viralBlocker == null && js_Boot.__instanceof(blocker,com_sq_m3lib_board_cellBlockers_IViralBlocker)) {
				this.viralBlocker = js_Boot.__cast(blocker , com_sq_m3lib_board_cellBlockers_IViralBlocker);
			}
			if(!this.hasStableBlocker && !blocker.canMoveItem()) {
				this.hasStableBlocker = true;
			}
			if(!this.hasComboBlocker && !blocker.canCombineItem()) {
				this.hasComboBlocker = true;
			}
			if(!this.destroyOnCellItemDestroy && blocker.destroyOnCellItemDestroy()) {
				this.destroyOnCellItemDestroy = true;
			}
			if(destroyOnNear || !this.destroyOnNearCellItemDestroyed && blocker.destroyOnNearDestroyed()) {
				this.destroyOnNearCellItemDestroyed = true;
			}
		}
	}
	,__class__: com_sq_m3lib_board_cellBlockers_BlockersSet
};
var com_sq_m3lib_board_cellBlockers_IViralBlocker = function() { };
$hxClasses["com.sq.m3lib.board.cellBlockers.IViralBlocker"] = com_sq_m3lib_board_cellBlockers_IViralBlocker;
com_sq_m3lib_board_cellBlockers_IViralBlocker.__name__ = true;
com_sq_m3lib_board_cellBlockers_IViralBlocker.prototype = {
	__class__: com_sq_m3lib_board_cellBlockers_IViralBlocker
};
var com_sq_m3lib_board_cellBlockers_IceCellBlocker = function(cell,attributes) {
	com_sq_m3lib_board_cellBlockers_BaseCellBlocker.call(this,cell,attributes);
};
$hxClasses["com.sq.m3lib.board.cellBlockers.IceCellBlocker"] = com_sq_m3lib_board_cellBlockers_IceCellBlocker;
com_sq_m3lib_board_cellBlockers_IceCellBlocker.__name__ = true;
com_sq_m3lib_board_cellBlockers_IceCellBlocker.__super__ = com_sq_m3lib_board_cellBlockers_BaseCellBlocker;
com_sq_m3lib_board_cellBlockers_IceCellBlocker.prototype = $extend(com_sq_m3lib_board_cellBlockers_BaseCellBlocker.prototype,{
	destroyOnCellItemDestroy: function() {
		return false;
	}
	,destroyOnNearDestroyed: function() {
		return true;
	}
	,preventOtherBlockerFromExpand: function() {
		return true;
	}
	,__class__: com_sq_m3lib_board_cellBlockers_IceCellBlocker
});
var com_sq_m3lib_board_cellBlockers_ItemLockCellBlocker = function(cell,attributes) {
	com_sq_m3lib_board_cellBlockers_BaseCellBlocker.call(this,cell,attributes);
};
$hxClasses["com.sq.m3lib.board.cellBlockers.ItemLockCellBlocker"] = com_sq_m3lib_board_cellBlockers_ItemLockCellBlocker;
com_sq_m3lib_board_cellBlockers_ItemLockCellBlocker.__name__ = true;
com_sq_m3lib_board_cellBlockers_ItemLockCellBlocker.__super__ = com_sq_m3lib_board_cellBlockers_BaseCellBlocker;
com_sq_m3lib_board_cellBlockers_ItemLockCellBlocker.prototype = $extend(com_sq_m3lib_board_cellBlockers_BaseCellBlocker.prototype,{
	destroyOnNearDestroyed: function() {
		return false;
	}
	,canCombineItem: function() {
		return true;
	}
	,__class__: com_sq_m3lib_board_cellBlockers_ItemLockCellBlocker
});
var com_sq_m3lib_board_cellBlockers_SimpleCellBlocker = function(cell,attributes) {
	com_sq_m3lib_board_cellBlockers_BaseCellBlocker.call(this,cell,attributes);
};
$hxClasses["com.sq.m3lib.board.cellBlockers.SimpleCellBlocker"] = com_sq_m3lib_board_cellBlockers_SimpleCellBlocker;
com_sq_m3lib_board_cellBlockers_SimpleCellBlocker.__name__ = true;
com_sq_m3lib_board_cellBlockers_SimpleCellBlocker.__super__ = com_sq_m3lib_board_cellBlockers_BaseCellBlocker;
com_sq_m3lib_board_cellBlockers_SimpleCellBlocker.prototype = $extend(com_sq_m3lib_board_cellBlockers_BaseCellBlocker.prototype,{
	destroyOnNearDestroyed: function() {
		return true;
	}
	,destroyOnCellItemDestroy: function() {
		return false;
	}
	,__class__: com_sq_m3lib_board_cellBlockers_SimpleCellBlocker
});
var com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker = function(cell,attributes) {
	com_sq_m3lib_board_cellBlockers_BaseCellBlocker.call(this,cell,attributes);
	this.maxStep = attributes.maxStep;
};
$hxClasses["com.sq.m3lib.board.cellBlockers.SimpleViralCellBlocker"] = com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker;
com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker.__name__ = true;
com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker.__interfaces__ = [com_sq_m3lib_board_cellBlockers_IViralBlocker];
com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker.__super__ = com_sq_m3lib_board_cellBlockers_BaseCellBlocker;
com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker.prototype = $extend(com_sq_m3lib_board_cellBlockers_BaseCellBlocker.prototype,{
	increaseStep: function() {
		this.step++;
		this.setAnimationLength(com_sq_m3lib_board_ItemAnimationFactory.getLength("viral_increase_step"));
	}
	,getViralScenario: function() {
		return com_sq_m3lib_board_cellBlockers_viralScenarios_SimpleViralBlockerScenario;
	}
	,getMaxStep: function() {
		return this.maxStep;
	}
	,getBlockerDescription: function() {
		var result = com_sq_m3lib_board_cellBlockers_BaseCellBlocker.prototype.getBlockerDescription.call(this);
		result.maxStep = this.maxStep;
		return result;
	}
	,__class__: com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker
});
var com_sq_m3lib_board_cellBlockers_SpecialItemLockCellBlocker = function(cell,attributes) {
	com_sq_m3lib_board_cellBlockers_BaseCellBlocker.call(this,cell,attributes);
};
$hxClasses["com.sq.m3lib.board.cellBlockers.SpecialItemLockCellBlocker"] = com_sq_m3lib_board_cellBlockers_SpecialItemLockCellBlocker;
com_sq_m3lib_board_cellBlockers_SpecialItemLockCellBlocker.__name__ = true;
com_sq_m3lib_board_cellBlockers_SpecialItemLockCellBlocker.__super__ = com_sq_m3lib_board_cellBlockers_BaseCellBlocker;
com_sq_m3lib_board_cellBlockers_SpecialItemLockCellBlocker.prototype = $extend(com_sq_m3lib_board_cellBlockers_BaseCellBlocker.prototype,{
	preventOtherBlockerFromExpand: function() {
		return true;
	}
	,__class__: com_sq_m3lib_board_cellBlockers_SpecialItemLockCellBlocker
});
var com_sq_m3lib_board_cellBlockers_ViralGumCellBlocker = function(cell,attributes) {
	com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker.call(this,cell,attributes);
};
$hxClasses["com.sq.m3lib.board.cellBlockers.ViralGumCellBlocker"] = com_sq_m3lib_board_cellBlockers_ViralGumCellBlocker;
com_sq_m3lib_board_cellBlockers_ViralGumCellBlocker.__name__ = true;
com_sq_m3lib_board_cellBlockers_ViralGumCellBlocker.__super__ = com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker;
com_sq_m3lib_board_cellBlockers_ViralGumCellBlocker.prototype = $extend(com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker.prototype,{
	canMoveItem: function() {
		return this.step <= com_sq_m3lib_coreSettings_CoreSettings.viralParams.viralGumCanMoveStep;
	}
	,destroyOnCellItemDestroy: function() {
		return true;
	}
	,destroyOnNearDestroyed: function() {
		return false;
	}
	,canCombineItem: function() {
		return true;
	}
	,getViralScenario: function() {
		return com_sq_m3lib_board_cellBlockers_viralScenarios_GumViralBlockerScenario;
	}
	,__class__: com_sq_m3lib_board_cellBlockers_ViralGumCellBlocker
});
var com_sq_m3lib_board_cellBlockers_viralScenarios_BaseViralBlockerScenario = function(blocker,blockerCells,gameEngine) {
	this._gameEngine = gameEngine;
	this._blockerCells = blockerCells;
	this._blocker = blocker;
};
$hxClasses["com.sq.m3lib.board.cellBlockers.viralScenarios.BaseViralBlockerScenario"] = com_sq_m3lib_board_cellBlockers_viralScenarios_BaseViralBlockerScenario;
com_sq_m3lib_board_cellBlockers_viralScenarios_BaseViralBlockerScenario.__name__ = true;
com_sq_m3lib_board_cellBlockers_viralScenarios_BaseViralBlockerScenario.prototype = {
	apply: function() {
		return null;
	}
	,needIncreaseStep: function() {
		return false;
	}
	,__class__: com_sq_m3lib_board_cellBlockers_viralScenarios_BaseViralBlockerScenario
};
var com_sq_m3lib_board_cellBlockers_viralScenarios_SimpleViralBlockerScenario = function(blocker,blockerCells,gameEngine) {
	com_sq_m3lib_board_cellBlockers_viralScenarios_BaseViralBlockerScenario.call(this,blocker,blockerCells,gameEngine);
};
$hxClasses["com.sq.m3lib.board.cellBlockers.viralScenarios.SimpleViralBlockerScenario"] = com_sq_m3lib_board_cellBlockers_viralScenarios_SimpleViralBlockerScenario;
com_sq_m3lib_board_cellBlockers_viralScenarios_SimpleViralBlockerScenario.__name__ = true;
com_sq_m3lib_board_cellBlockers_viralScenarios_SimpleViralBlockerScenario.__super__ = com_sq_m3lib_board_cellBlockers_viralScenarios_BaseViralBlockerScenario;
com_sq_m3lib_board_cellBlockers_viralScenarios_SimpleViralBlockerScenario.prototype = $extend(com_sq_m3lib_board_cellBlockers_viralScenarios_BaseViralBlockerScenario.prototype,{
	apply: function() {
		var result = null;
		if(this.needIncreaseStep()) {
			var increaseResult = this.increaseStep();
			if(increaseResult != null) {
				result = [increaseResult];
			}
		}
		var expandResult = this.expand();
		if(expandResult != null) {
			if(result == null) {
				result = [expandResult];
			} else {
				result.push(expandResult);
			}
		}
		return result;
	}
	,increaseStep: function() {
		var blockerLength = this._blockerCells.length;
		var cell;
		var blockerCount = 0;
		var cellBlocker;
		var targetBlockerList = [];
		var randomCell;
		var _g1 = 0;
		while(_g1 < blockerLength) {
			cell = this._blockerCells[_g1++];
			cellBlocker = cell.blockerSet.viralBlocker;
			if(this.canIncreaseBlockerStep(cell,cellBlocker)) {
				targetBlockerList[blockerCount] = cellBlocker.cell;
				++blockerCount;
			}
		}
		if(blockerCount > 0) {
			randomCell = targetBlockerList[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(blockerCount)];
			randomCell.blockerSet.viralBlocker.increaseStep();
			return js_Boot.__cast(randomCell.blockerSet.viralBlocker , com_sq_m3lib_board_cellBlockers_BaseCellBlocker);
		}
		return null;
	}
	,expand: function() {
		var commonCells = [];
		var specialsCells = [];
		var cells = this._gameEngine.board.getNearNotEmptyCells(this.getBlockersToViral());
		var cellLength = cells.length;
		if(cellLength == 0) {
			return null;
		}
		var cell;
		var specialsCout = 0;
		var commonCount = 0;
		var _this = com_sq_m3lib_board_ViralBlockerManager.viralPriorityRules;
		var key = this._blocker.alias;
		var specialPriorityRules = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		var priority;
		var itemAlias;
		var minPriority = 2147483647;
		var _g1 = 0;
		while(_g1 < cellLength) {
			cell = cells[_g1++].cell;
			if(!cell.blockerSet.isEmpty() || !cell.hasItemInCell()) {
				continue;
			}
			if(cell.item.isCommonItem()) {
				commonCells[commonCount] = cell;
				++commonCount;
			} else {
				itemAlias = cell.item.getItemDescription().className;
				if(!(__map_reserved[itemAlias] != null?specialPriorityRules.existsReserved(itemAlias):specialPriorityRules.h.hasOwnProperty(itemAlias))) {
					continue;
				}
				priority = __map_reserved[itemAlias] != null?specialPriorityRules.getReserved(itemAlias):specialPriorityRules.h[itemAlias];
				if(minPriority < priority) {
					continue;
				} else if(minPriority > priority) {
					specialsCout = 0;
					minPriority = priority;
				}
				specialsCells[specialsCout] = cell;
				++specialsCout;
			}
		}
		var targetList = commonCount == 0?specialsCells:commonCells;
		var targetLength = commonCount == 0?specialsCout:commonCount;
		var randomCell;
		var description;
		if(targetLength > 0) {
			randomCell = targetList[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(targetLength)];
			description = this._blocker.getBlockerDescription();
			description.step = 0;
			var resultBlocker = this._gameEngine.blockersFactory.getBlocker(description,randomCell);
			resultBlocker.increaseStep();
			return resultBlocker;
		}
		return null;
	}
	,needIncreaseStep: function() {
		return this._blocker.maxStep > 1;
	}
	,getBlockersToViral: function() {
		return this._blockerCells.filter(function(val) {
			var cellBlocker = val.blockerSet.viralBlocker;
			if(cellBlocker != null) {
				return cellBlocker.step == cellBlocker.maxStep;
			} else {
				return false;
			}
		});
	}
	,canIncreaseBlockerStep: function(cell,cellBlocker) {
		if(cellBlocker != null && cellBlocker.step < cellBlocker.maxStep) {
			return cellBlocker.alias == this._blocker.alias;
		} else {
			return false;
		}
	}
	,__class__: com_sq_m3lib_board_cellBlockers_viralScenarios_SimpleViralBlockerScenario
});
var com_sq_m3lib_board_cellBlockers_viralScenarios_GumViralBlockerScenario = function(blocker,blockerCells,gameEngine) {
	com_sq_m3lib_board_cellBlockers_viralScenarios_SimpleViralBlockerScenario.call(this,blocker,blockerCells,gameEngine);
};
$hxClasses["com.sq.m3lib.board.cellBlockers.viralScenarios.GumViralBlockerScenario"] = com_sq_m3lib_board_cellBlockers_viralScenarios_GumViralBlockerScenario;
com_sq_m3lib_board_cellBlockers_viralScenarios_GumViralBlockerScenario.__name__ = true;
com_sq_m3lib_board_cellBlockers_viralScenarios_GumViralBlockerScenario.__super__ = com_sq_m3lib_board_cellBlockers_viralScenarios_SimpleViralBlockerScenario;
com_sq_m3lib_board_cellBlockers_viralScenarios_GumViralBlockerScenario.prototype = $extend(com_sq_m3lib_board_cellBlockers_viralScenarios_SimpleViralBlockerScenario.prototype,{
	apply: function() {
		var triedToIncreaseStep = false;
		var resultBlocker;
		if(this.needIncreaseStep()) {
			resultBlocker = this.increaseStep();
			if(resultBlocker != null) {
				return [resultBlocker];
			}
			triedToIncreaseStep = true;
		}
		resultBlocker = this.expand();
		if(resultBlocker != null) {
			return [resultBlocker];
		}
		if(!triedToIncreaseStep) {
			resultBlocker = this.increaseStep();
			if(resultBlocker != null) {
				return [resultBlocker];
			}
		}
		return null;
	}
	,needIncreaseStep: function() {
		var probability = this._gameEngine.getLevelConfig().viralIncreaseProbability;
		if(probability == 0) {
			probability = com_sq_m3lib_board_ViralBlockerManager.defaultViralIncreaseProbability;
		}
		return com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(com_sq_m3lib_coreSettings_CoreSettings.viralParams.maxIncreaseProbability,com_sq_m3lib_coreSettings_CoreSettings.viralParams.minIncreaseProbability) <= probability;
	}
	,getBlockersToViral: function() {
		return this._blockerCells.filter(function(val) {
			var cellBlocker = val.blockerSet.viralBlocker;
			if(cellBlocker != null) {
				if(cellBlocker.step != cellBlocker.maxStep) {
					return val.blockerSet.canViralBlockerExpand();
				} else {
					return true;
				}
			} else {
				return false;
			}
		});
	}
	,canIncreaseBlockerStep: function(cell,cellBlocker) {
		if(cell.hasItemInCell() && com_sq_m3lib_board_cellBlockers_viralScenarios_SimpleViralBlockerScenario.prototype.canIncreaseBlockerStep.call(this,cell,cellBlocker)) {
			return cell.blockerSet.canViralBlockerExpand();
		} else {
			return false;
		}
	}
	,__class__: com_sq_m3lib_board_cellBlockers_viralScenarios_GumViralBlockerScenario
});
var com_sq_m3lib_board_cellHiddenObjects_BaseHiddenObject = function(description) {
	this.description = description;
};
$hxClasses["com.sq.m3lib.board.cellHiddenObjects.BaseHiddenObject"] = com_sq_m3lib_board_cellHiddenObjects_BaseHiddenObject;
com_sq_m3lib_board_cellHiddenObjects_BaseHiddenObject.__name__ = true;
com_sq_m3lib_board_cellHiddenObjects_BaseHiddenObject.prototype = {
	isOverlapCoordOnPlacement: function(placementCoord,targetCoord) {
		return true;
	}
	,getTakenCoords: function(placementCoord) {
		return null;
	}
	,getAlias: function() {
		return this.description.classname;
	}
	,getDescription: function() {
		return this.description;
	}
	,__class__: com_sq_m3lib_board_cellHiddenObjects_BaseHiddenObject
};
var com_sq_m3lib_board_cellHiddenObjects_BoardHiddenObject = function(object,cells,placementCoords) {
	com_sq_m3lib_board_BaseBoardAnimatedObject.call(this);
	this._object = object;
	this._cells = cells;
	this._cellsToDiscover = this._cells.slice();
	this._cellToDiscoverCount = this._cellsToDiscover.length;
	this._placement = placementCoords;
	this._rotation = placementCoords.rotation;
	this.initialCellCheck();
};
$hxClasses["com.sq.m3lib.board.cellHiddenObjects.BoardHiddenObject"] = com_sq_m3lib_board_cellHiddenObjects_BoardHiddenObject;
com_sq_m3lib_board_cellHiddenObjects_BoardHiddenObject.__name__ = true;
com_sq_m3lib_board_cellHiddenObjects_BoardHiddenObject.__super__ = com_sq_m3lib_board_BaseBoardAnimatedObject;
com_sq_m3lib_board_cellHiddenObjects_BoardHiddenObject.prototype = $extend(com_sq_m3lib_board_BaseBoardAnimatedObject.prototype,{
	initialCellCheck: function() {
		var i = this._cellToDiscoverCount;
		var cellCover;
		while(--i >= 0) {
			cellCover = this._cellsToDiscover[i].cover;
			if(cellCover != null && !cellCover.isDestroyed()) {
				continue;
			}
			this._cellToDiscoverCount--;
			if(this._cellToDiscoverCount > i) {
				this._cellsToDiscover[i] = this._cellsToDiscover[this._cellToDiscoverCount];
			}
			this._cellsToDiscover.pop();
		}
	}
	,onCellDiscovered: function(cell) {
		var indexOf = this._cellsToDiscover.indexOf(cell);
		if(indexOf == -1) {
			return;
		}
		this._cellToDiscoverCount--;
		if(this._cellToDiscoverCount > indexOf) {
			this._cellsToDiscover[indexOf] = this._cellsToDiscover[this._cellToDiscoverCount];
		}
		this._cellsToDiscover.pop();
	}
	,getCellsLeft: function() {
		return this._cellsToDiscover;
	}
	,getFistCell: function() {
		return this._cells[this._cells.length - 1];
	}
	,isDiscovered: function() {
		return this._cellToDiscoverCount == 0;
	}
	,getCells: function() {
		return this._cells;
	}
	,getObject: function() {
		return this._object;
	}
	,getRotation: function() {
		return this._rotation;
	}
	,getPlacementCoords: function() {
		return this._placement;
	}
	,getScore: function() {
		var key = this._object.getAlias();
		var _this = com_sq_m3lib_board_ScoreDictionary.scores;
		if(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key)) {
			var key1 = this._object.getAlias();
			var _this1 = com_sq_m3lib_board_ScoreDictionary.scores;
			return (__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]) * this._cells.length;
		}
		return 0;
	}
	,__class__: com_sq_m3lib_board_cellHiddenObjects_BoardHiddenObject
});
var com_sq_m3lib_board_cellHiddenObjects_CellCover = function(description,cell) {
	com_sq_m3lib_board_BaseBoardAnimatedObject.call(this);
	this.step = description.step;
	this.cell = cell;
};
$hxClasses["com.sq.m3lib.board.cellHiddenObjects.CellCover"] = com_sq_m3lib_board_cellHiddenObjects_CellCover;
com_sq_m3lib_board_cellHiddenObjects_CellCover.__name__ = true;
com_sq_m3lib_board_cellHiddenObjects_CellCover.__super__ = com_sq_m3lib_board_BaseBoardAnimatedObject;
com_sq_m3lib_board_cellHiddenObjects_CellCover.prototype = $extend(com_sq_m3lib_board_BaseBoardAnimatedObject.prototype,{
	getStep: function() {
		return this.step;
	}
	,destroyStep: function() {
		this.step--;
		this.setAnimationLength(com_sq_m3lib_board_ItemAnimationFactory.getLength("simple_collapse"));
		if(this.step < 0) {
			this.step = 0;
		}
	}
	,getCoords: function() {
		return this.cell.coords;
	}
	,isDestroyed: function() {
		return this.step == 0;
	}
	,getCellCoverDescription: function() {
		return { step : this.step};
	}
	,__class__: com_sq_m3lib_board_cellHiddenObjects_CellCover
});
var com_sq_m3lib_board_cellHiddenObjects_PossiblePlacementData = function(object,params) {
	this.hiddenObject = object;
	this.count = params.count;
	this.placement = params.placement.slice();
};
$hxClasses["com.sq.m3lib.board.cellHiddenObjects.PossiblePlacementData"] = com_sq_m3lib_board_cellHiddenObjects_PossiblePlacementData;
com_sq_m3lib_board_cellHiddenObjects_PossiblePlacementData.__name__ = true;
com_sq_m3lib_board_cellHiddenObjects_PossiblePlacementData.prototype = {
	__class__: com_sq_m3lib_board_cellHiddenObjects_PossiblePlacementData
};
var com_sq_m3lib_board_cellHiddenObjects_RectangularHiddenObject = function(description) {
	this.height = 0;
	this.width = 0;
	com_sq_m3lib_board_cellHiddenObjects_BaseHiddenObject.call(this,description);
	this.width = description.size.x;
	this.height = description.size.y;
};
$hxClasses["com.sq.m3lib.board.cellHiddenObjects.RectangularHiddenObject"] = com_sq_m3lib_board_cellHiddenObjects_RectangularHiddenObject;
com_sq_m3lib_board_cellHiddenObjects_RectangularHiddenObject.__name__ = true;
com_sq_m3lib_board_cellHiddenObjects_RectangularHiddenObject.__super__ = com_sq_m3lib_board_cellHiddenObjects_BaseHiddenObject;
com_sq_m3lib_board_cellHiddenObjects_RectangularHiddenObject.prototype = $extend(com_sq_m3lib_board_cellHiddenObjects_BaseHiddenObject.prototype,{
	isOverlapCoordOnPlacement: function(placementCoord,targetCoord) {
		var maxX = this.width;
		var maxY = this.height;
		if(placementCoord.rotation) {
			maxX = this.height;
			maxY = this.width;
		}
		if(placementCoord.x <= targetCoord.x && placementCoord.x + maxX > targetCoord.x) {
			if(placementCoord.y <= targetCoord.y) {
				return placementCoord.y + maxY > targetCoord.y;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,getTakenCoords: function(placementCoord) {
		var result = [];
		var maxX = this.width;
		var maxY = this.height;
		if(placementCoord.rotation) {
			maxX = this.height;
			maxY = this.width;
		}
		var i = maxX;
		var j;
		while(--i >= 0) {
			j = maxY;
			while(--j >= 0) result.push(new com_sq_m3lib_geometry_Coord(placementCoord.x + i,placementCoord.y + j));
		}
		return result;
	}
	,__class__: com_sq_m3lib_board_cellHiddenObjects_RectangularHiddenObject
});
var com_sq_m3lib_board_combinations_Combination = function(cells,template,scoreCell,comboItemCell) {
	this.scoreCell = scoreCell;
	this.cells = cells;
	this.comboTemplate = template;
	this.newComboItemCell = comboItemCell;
};
$hxClasses["com.sq.m3lib.board.combinations.Combination"] = com_sq_m3lib_board_combinations_Combination;
com_sq_m3lib_board_combinations_Combination.__name__ = true;
com_sq_m3lib_board_combinations_Combination.prototype = {
	getColor: function() {
		if(this.cells == null || this.cells.length == 0) {
			return -1;
		}
		var item = this.cells[0].item;
		if(item == null || !js_Boot.__instanceof(item,com_sq_m3lib_board_items_IColorItem)) {
			return -1;
		}
		return (js_Boot.__cast(item , com_sq_m3lib_board_items_IColorItem)).color;
	}
	,isTemplateItemEmpty: function() {
		if(this.comboTemplate.item != null) {
			return this.comboTemplate.item.length == 0;
		} else {
			return true;
		}
	}
	,getCombinationPriority: function(core) {
		var result = 0;
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			result += core.targetsManager.getTargets()[0].getCellPriority(cell);
		}
		return result * this.comboTemplate.priority;
	}
	,__class__: com_sq_m3lib_board_combinations_Combination
};
var com_sq_m3lib_board_combinations_CombinationCandidate = function(cell,switchCell,combination) {
	this.cell = cell;
	this.switchCell = switchCell;
	this.combination = combination;
};
$hxClasses["com.sq.m3lib.board.combinations.CombinationCandidate"] = com_sq_m3lib_board_combinations_CombinationCandidate;
com_sq_m3lib_board_combinations_CombinationCandidate.__name__ = true;
com_sq_m3lib_board_combinations_CombinationCandidate.prototype = {
	getCell: function() {
		return this.cell;
	}
	,getSwitchCell: function() {
		return this.switchCell;
	}
	,getCombination: function() {
		return this.combination;
	}
	,__class__: com_sq_m3lib_board_combinations_CombinationCandidate
};
var com_sq_m3lib_board_combinations_CombinationFinderParams = function(fullBoardCheck,candidatesSearch,needActivated) {
	if(needActivated == null) {
		needActivated = false;
	}
	if(candidatesSearch == null) {
		candidatesSearch = false;
	}
	if(fullBoardCheck == null) {
		fullBoardCheck = false;
	}
	this.needComboStarter = true;
	this.needActivated = false;
	this.candidatesSearch = false;
	this.fullBoardCheck = false;
	this.fullBoardCheck = fullBoardCheck;
	this.candidatesSearch = candidatesSearch;
	this.needActivated = needActivated;
};
$hxClasses["com.sq.m3lib.board.combinations.CombinationFinderParams"] = com_sq_m3lib_board_combinations_CombinationFinderParams;
com_sq_m3lib_board_combinations_CombinationFinderParams.__name__ = true;
com_sq_m3lib_board_combinations_CombinationFinderParams.prototype = {
	__class__: com_sq_m3lib_board_combinations_CombinationFinderParams
};
var com_sq_m3lib_board_combinations_ComboFinderFactory = function(engine) {
	this.bestSuggest = true;
	this._gameEngine = engine;
	this._templates = [];
	this._bombTemplates = [];
	this.combinationCandidateList = [];
};
$hxClasses["com.sq.m3lib.board.combinations.ComboFinderFactory"] = com_sq_m3lib_board_combinations_ComboFinderFactory;
com_sq_m3lib_board_combinations_ComboFinderFactory.__name__ = true;
com_sq_m3lib_board_combinations_ComboFinderFactory.prototype = {
	getComboCandidates: function() {
		return this.allCombinationCandidates;
	}
	,getCellsToDestroy: function() {
		return this.cellsToDestroy;
	}
	,getComboToDestroy: function() {
		return this._comboToDestroy;
	}
	,findCombos: function() {
		var params = new com_sq_m3lib_board_combinations_CombinationFinderParams();
		params.needActivated = true;
		this.fullCheckTemplates(params);
	}
	,hasMoveCandidates: function() {
		if(this.allCombinationCandidates == null || !this.allCombinationCandidates.keys().hasNext()) {
			this.fullCombinationCandidateCheck();
		}
		return this.allCombinationCandidates.keys().hasNext();
	}
	,fullCheckTemplates: function(params) {
		var board = this._gameEngine.board;
		var cells = board.getNonVoidCells(params.fullBoardCheck);
		this.clearCellsOnComboCheck(board.getNonVoidCells(params.fullBoardCheck));
		this.updateNeighbourColors(board.getNonVoidCells(params.fullBoardCheck),params);
		var width = cells.length;
		var changedCells = [];
		var cellPossibleTemplateMap = new haxe_ds_ObjectMap();
		var cellCoords;
		var i = -1;
		while(++i < width) if(cells[i].wasChanged) {
			if(!this.needCheckCell(cells[i])) {
				continue;
			}
			if(params.fullBoardCheck) {
				cellCoords = cells[i].coords;
			} else {
				cellCoords = cells[i].viewPortCoords;
			}
			if(!this.checkNeighboursColors(cells[i],cellCoords,com_sq_m3lib_coreSettings_CoreSettings.DEFAULT_NEIGHBOUR_CHECK_VECTOR,true,cellPossibleTemplateMap)) {
				continue;
			}
			changedCells.push(cells[i]);
		}
		var destroyCells = [];
		if(changedCells.length > 0) {
			var index = this._templates.length;
			var currentCombo;
			while(--index >= 0) {
				currentCombo = this.findTemplateCombosByCellsArray(this._templates[index],changedCells,cellPossibleTemplateMap,params);
				if(currentCombo != null && currentCombo.length > 0) {
					destroyCells = destroyCells.concat(currentCombo);
					if(changedCells.length == 0) {
						break;
					}
				}
			}
		}
		this.cellsToDestroy = destroyCells;
	}
	,findTemplateCombosByCellsArray: function(template,cells,cellPossibleTemplateMap,params) {
		var cellLength = cells.length;
		var cellsCopy = cells.slice();
		var cell;
		var destroyCells = [];
		var currentCombo;
		var i = -1;
		var j;
		var comboLength;
		while(++i < cellLength) {
			cell = cellsCopy[i];
			if(!this.shouldCheckTemplate(template,cell,cellPossibleTemplateMap)) {
				continue;
			}
			currentCombo = this.checkOneTemplate(template,cell,params);
			if(currentCombo == null) {
				continue;
			}
			comboLength = currentCombo.length;
			if(comboLength > 0) {
				j = -1;
				while(++j < comboLength) HxOverrides.remove(cells,currentCombo[j]);
				destroyCells = destroyCells.concat(currentCombo);
			}
		}
		return destroyCells;
	}
	,findCombosByCellsArray: function(cells,cellPossibleTemplateMap,params) {
		var cellLength = cells.length;
		var cell;
		var destroyCells = null;
		var currentCombo;
		var i = -1;
		while(++i < cellLength) {
			cell = cells[i];
			if(!cell.inCombination) {
				currentCombo = this.checkColorTemplates(cell,cellPossibleTemplateMap,params);
				if(currentCombo != null) {
					if(destroyCells == null) {
						destroyCells = [];
					}
					destroyCells = destroyCells.concat(currentCombo);
				}
			}
			cell.wasChecked = true;
		}
		return destroyCells;
	}
	,needCheckCell: function(cell) {
		if(cell == null || cell.isVoid || cell.item == null || cell.wasChecked || cell.inCombination || cell.hasComboBlocker()) {
			return false;
		}
		var baseItem = cell.item;
		if(baseItem.isMoving || baseItem.disabled || baseItem.inAction || !baseItem.canSelect() || !baseItem.isAnimationStable()) {
			return false;
		}
		return true;
	}
	,shouldCheckTemplate: function(template,cell,cellPossibleTemplateMap) {
		var possibleTemplateTypes;
		if(cellPossibleTemplateMap.h.__keys__[cell.__id__] == null) {
			return false;
		}
		possibleTemplateTypes = cellPossibleTemplateMap.h[cell.__id__];
		var possibleTemplateLength = possibleTemplateTypes.length;
		if(possibleTemplateLength == 0) {
			return false;
		}
		var i = possibleTemplateLength;
		while(--i >= 0) if(template.type.indexOf(possibleTemplateTypes[i]) != -1) {
			return true;
		}
		return false;
	}
	,checkColorTemplates: function(starterCell,cellPossibleTemplateMap,params) {
		var index = this._templates.length;
		var template;
		while(--index > -1) {
			template = this._templates[index];
			if(!this.shouldCheckTemplate(template,starterCell,cellPossibleTemplateMap)) {
				continue;
			}
			var result = this.checkOneTemplate(template,starterCell,params);
			if(result != null) {
				return result;
			}
		}
		return null;
	}
	,checkOneTemplate: function(template,starterCell,params) {
		var board = this._gameEngine.board;
		var starterCellCoords = params.fullBoardCheck?starterCell.coords:starterCell.viewPortCoords;
		var starterX = starterCellCoords.x;
		var starterY = starterCellCoords.y;
		var starterColor = (js_Boot.__cast(starterCell.item , com_sq_m3lib_board_items_IColorItem)).color;
		var templateLength = template.cells.length;
		var candidatesCount;
		var templateStarter;
		var comboCandidate;
		var cell;
		var i = -1;
		var j;
		var cellX;
		var cellY;
		while(++i < templateLength) {
			candidatesCount = 0;
			templateStarter = template.cells[i];
			comboCandidate = [starterCell];
			candidatesCount = 1;
			j = -1;
			while(++j < templateLength) {
				if(j == i) {
					continue;
				}
				cellX = starterX + template.cells[j].x - templateStarter.x;
				cellY = starterY + template.cells[j].y - templateStarter.y;
				if(!this._neighbourColors.h.hasOwnProperty(cellX) || !this._neighbourColors.h[cellX].exists(cellY)) {
					break;
				}
				if(this._neighbourColors.h[cellX].get(cellY) != starterColor) {
					break;
				}
				cell = board.getCellByCoords(cellX,cellY,params.fullBoardCheck);
				if(!this.needCheckCell(cell)) {
					break;
				}
				comboCandidate[candidatesCount] = cell;
				++candidatesCount;
			}
			if(candidatesCount == templateLength) {
				var comboStarter = null;
				var targetNewComboItemCell = null;
				var possibleStarters = [];
				j = -1;
				while(++j < templateLength) {
					comboCandidate[j].inCombination = true;
					if(comboCandidate[j].wasChanged && params.needComboStarter && comboCandidate[j].canPlaceSpecialComboItem()) {
						possibleStarters.push(comboCandidate[j]);
					}
				}
				if(params.needComboStarter) {
					if(possibleStarters.length != 1) {
						j = -1;
						possibleStarters = [];
						var secondaryPossibleStarters = [];
						while(++j < templateLength) if(comboCandidate[j].canPlaceSpecialComboItem()) {
							possibleStarters.push(comboCandidate[j]);
						} else {
							secondaryPossibleStarters.push(comboCandidate[j]);
						}
						if(possibleStarters.length == 0) {
							possibleStarters = secondaryPossibleStarters;
						}
					}
					comboStarter = possibleStarters[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(possibleStarters.length)];
				}
				if(!params.candidatesSearch) {
					targetNewComboItemCell = null;
					if(template.item != null && template.item.length != 0) {
						if(comboStarter != null) {
							targetNewComboItemCell = comboStarter;
						}
					}
				}
				this._comboToDestroy.push(new com_sq_m3lib_board_combinations_Combination(comboCandidate,template,comboStarter,targetNewComboItemCell));
				return comboCandidate;
			}
		}
		return null;
	}
	,fullCombinationCandidateCheck: function() {
		com_sq_m3lib_board_combinations_ComboFinderFactory.ccCount++;
		var stTime = com_sq_m3lib_tests_DataTime.getTime();
		var board = this._gameEngine.board;
		var cells = board.getNonVoidCells(false);
		var width = cells.length;
		var cell;
		var possibleCombinationCandidates = new haxe_ds_ObjectMap();
		var bombCells = [];
		this.clearCellsOnComboCheck(board.getNonVoidCells(false));
		this.fillNeighboursColors(board.getNonVoidCells(false),new com_sq_m3lib_board_combinations_CombinationFinderParams());
		var i = -1;
		while(++i < width) {
			cell = cells[i];
			if(this.needCheckCell(cell)) {
				this.getPossibleCombinationsOnCellMoveV2(cell,board,possibleCombinationCandidates);
				if(js_Boot.__instanceof(cell.getItem(),com_sq_m3lib_board_items_IBomb)) {
					bombCells.push(cell);
				}
			}
		}
		i = -1;
		width = bombCells.length;
		while(++i < width) this.getPossibleBombCombinations(bombCells[i],board,possibleCombinationCandidates);
		this.allCombinationCandidates = possibleCombinationCandidates;
		this._gameEngine.board.resetCellCheckParams();
		var deltaTime = com_sq_m3lib_tests_DataTime.getTime() - stTime;
		if(com_sq_m3lib_board_combinations_ComboFinderFactory.ccMaxTime < deltaTime) {
			com_sq_m3lib_board_combinations_ComboFinderFactory.ccMaxTime = deltaTime;
		}
		com_sq_m3lib_board_combinations_ComboFinderFactory.ccTime += deltaTime;
		return possibleCombinationCandidates;
	}
	,getBestCombinationCandidate: function() {
		var _gthis = this;
		if(this._bestCombinationCandidate != null) {
			return this._bestCombinationCandidate;
		}
		var possibleCandidates;
		if(this.allCombinationCandidates == null || !this.allCombinationCandidates.keys().hasNext()) {
			this.fullCombinationCandidateCheck();
		}
		possibleCandidates = this.allCombinationCandidates;
		var sortedArray = [];
		var tmp = possibleCandidates.iterator();
		while(tmp.hasNext()) {
			var tmp1 = tmp.next().iterator();
			while(tmp1.hasNext()) sortedArray.push(tmp1.next());
		}
		haxe_ds_ArraySort.sort(sortedArray,function(a,b) {
			return Reflect.compare(a.combination.getCombinationPriority(_gthis._gameEngine),b.combination.getCombinationPriority(_gthis._gameEngine));
		});
		return sortedArray[sortedArray.length - 1];
	}
	,getWorseCombinationCandidate: function() {
		var _gthis = this;
		var possibleCandidates;
		if(this.allCombinationCandidates == null || !this.allCombinationCandidates.keys().hasNext()) {
			this.fullCombinationCandidateCheck();
		}
		possibleCandidates = this.allCombinationCandidates;
		var sortedArray = [];
		var tmp = possibleCandidates.iterator();
		while(tmp.hasNext()) {
			var tmp1 = tmp.next().iterator();
			while(tmp1.hasNext()) sortedArray.push(tmp1.next());
		}
		haxe_ds_ArraySort.sort(sortedArray,function(a,b) {
			return Reflect.compare(a.combination.getCombinationPriority(_gthis._gameEngine),b.combination.getCombinationPriority(_gthis._gameEngine));
		});
		return sortedArray[0];
	}
	,setSuggestion: function(val) {
		this.bestSuggest = val;
	}
	,getCombinationCandidate: function() {
		if(this.bestSuggest) {
			return this.getBestCombinationCandidate();
		} else {
			return this.getWorseCombinationCandidate();
		}
	}
	,getPossibleCombinationsOnCellMove: function(cell,board,currentDictionary) {
		var item = cell.item;
		var directions = com_sq_m3lib_board_CellBorder.CELL_BORDER_DIRECTION;
		var directionsLength = directions.length;
		var coords = cell.viewPortCoords;
		var cellX = coords.x;
		var cellY = coords.y;
		var switchCell;
		var moveCandidates;
		var switchItem;
		var cellPossibleTemplateMap = new haxe_ds_ObjectMap();
		var params = new com_sq_m3lib_board_combinations_CombinationFinderParams();
		params.candidatesSearch = true;
		params.needComboStarter = false;
		var i = -1;
		var j;
		var foundComboLength;
		var starterColor = this._neighbourColors.h[cellX].get(cellY);
		var switchColor = -1;
		while(++i < directionsLength) {
			foundComboLength = 0;
			if(!this._neighbourColors.h.hasOwnProperty(cellX + directions[i][0]) || !this._neighbourColors.h[cellX + directions[i][0]].exists(cellY + directions[i][1])) {
				continue;
			}
			switchColor = this._neighbourColors.h[cellX + directions[i][0]].get(cellY + directions[i][1]);
			if(starterColor == switchColor) {
				continue;
			}
			switchCell = board.getCellByCoords(cellX + directions[i][0],cellY + directions[i][1]);
			switchItem = switchCell.item;
			cell.setItem(switchItem);
			switchCell.setItem(item);
			this._neighbourColors.h[cellX].set(cellY,switchColor);
			this._neighbourColors.h[cellX + directions[i][0]].set(cellY + directions[i][1],starterColor);
			moveCandidates = [];
			if(this.checkNeighboursColors(cell,cell.viewPortCoords,new com_sq_m3lib_geometry_CellVector(-directions[i][0],-directions[i][1]),false,cellPossibleTemplateMap)) {
				moveCandidates.push(cell);
			}
			if(this.checkNeighboursColors(switchCell,cell.viewPortCoords,new com_sq_m3lib_geometry_CellVector(directions[i][0],directions[i][1]),false,cellPossibleTemplateMap)) {
				moveCandidates.push(switchCell);
			}
			this._comboToDestroy = [];
			if(moveCandidates.length > 0) {
				var foundCombo = this.findCombosByCellsArray(moveCandidates,cellPossibleTemplateMap,params);
				if(foundCombo != null) {
					foundComboLength = foundCombo.length;
					j = -1;
					while(++j < foundComboLength) foundCombo[j].clearComboCheckParams();
				}
				cell.clearComboCheckParams();
				switchCell.clearComboCheckParams();
			}
			switchCell.setItem(switchItem);
			cell.setItem(item);
			this._neighbourColors.h[cellX].set(cellY,starterColor);
			this._neighbourColors.h[cellX + directions[i][0]].set(cellY + directions[i][1],switchColor);
			if(foundComboLength == 0) {
				continue;
			}
			var candidate = new com_sq_m3lib_board_combinations_CombinationCandidate(cell,switchCell,this._comboToDestroy[0]);
			if(currentDictionary.h.__keys__[cell.__id__] == null) {
				var v = new haxe_ds_ObjectMap();
				currentDictionary.set(cell,v);
			}
			currentDictionary.h[cell.__id__].set(switchCell,candidate);
			this.combinationCandidateList.push(candidate);
		}
	}
	,getPossibleCombinationsOnCellMoveV2: function(starterCell,board,currentDictionary) {
		var j;
		var cellX;
		var cellY;
		var starterCellCoords = starterCell.viewPortCoords;
		var starterX = starterCellCoords.x;
		var starterY = starterCellCoords.y;
		var starterColor = this._neighbourColors.h[starterX].get(starterY);
		var index = this._templates.length;
		var template;
		var templateCells;
		var candidatesCount;
		var templateStarter;
		var comboCandidate;
		var cell;
		var missingCell = null;
		var board1 = this._gameEngine.board;
		var primaryColor;
		var templateLength;
		var secondaryCell;
		var secondaryColor;
		var thirdCell;
		var thirdColor;
		var templatesForCheck = this._templates.slice();
		var templateCount = this._templates.length;
		index = -1;
		while(++index < templateCount) {
			template = templatesForCheck[index];
			if(template == null) {
				continue;
			}
			templateCells = template.cells;
			templateLength = templateCells.length;
			candidatesCount = 0;
			templateStarter = templateCells[0];
			j = 1;
			cellX = starterX + templateCells[1].x - templateStarter.x;
			cellY = starterY + templateCells[1].y - templateStarter.y;
			if(!this._neighbourColors.h.hasOwnProperty(cellX) || !this._neighbourColors.h[cellX].exists(cellY)) {
				if(this._templateTypes.h.__keys__[template.__id__] != null) {
					var trimLength = this._templateTypes.h[template.__id__].length;
					var trimArray = this._templateTypes.h[template.__id__].array;
					while(--trimLength >= 0) templatesForCheck[trimArray[trimLength]] = null;
				}
				continue;
			}
			secondaryColor = this._neighbourColors.h[cellX].get(cellY);
			secondaryCell = board1.getCellByCoords(cellX,cellY,false);
			if(starterColor == secondaryColor) {
				comboCandidate = [starterCell,secondaryCell];
				primaryColor = starterColor;
				missingCell = null;
			} else {
				j = 2;
				cellX = starterX + templateCells[2].x - templateStarter.x;
				cellY = starterY + templateCells[2].y - templateStarter.y;
				if(!this._neighbourColors.h.hasOwnProperty(cellX) || !this._neighbourColors.h[cellX].exists(cellY)) {
					if(this._templateTypes.h.__keys__[template.__id__] != null) {
						var trimLength1 = this._templateTypes.h[template.__id__].length;
						var trimArray1 = this._templateTypes.h[template.__id__].array;
						while(--trimLength1 >= 0) templatesForCheck[trimArray1[trimLength1]] = null;
					}
					continue;
				}
				thirdColor = this._neighbourColors.h[cellX].get(cellY);
				if(thirdColor == starterColor) {
					thirdCell = board1.getCellByCoords(cellX,cellY,false);
					missingCell = secondaryCell;
					comboCandidate = [starterCell,thirdCell];
				} else if(thirdColor == secondaryColor) {
					thirdCell = board1.getCellByCoords(cellX,cellY,false);
					missingCell = starterCell;
					comboCandidate = [secondaryCell,thirdCell];
				} else {
					if(this._templateTypes.h.__keys__[template.__id__] != null) {
						var trimLength2 = this._templateTypes.h[template.__id__].length;
						var trimArray2 = this._templateTypes.h[template.__id__].array;
						while(--trimLength2 >= 0) templatesForCheck[trimArray2[trimLength2]] = null;
					}
					continue;
				}
				primaryColor = thirdColor;
			}
			if(primaryColor == -1) {
				continue;
			}
			candidatesCount = 2;
			while(++j < templateLength) {
				cellX = starterX + templateCells[j].x - templateStarter.x;
				cellY = starterY + templateCells[j].y - templateStarter.y;
				if(!this._neighbourColors.h.hasOwnProperty(cellX) || !this._neighbourColors.h[cellX].exists(cellY)) {
					if(this._templateTypes.h.__keys__[template.__id__] != null) {
						var trimLength3 = this._templateTypes.h[template.__id__].length;
						var trimArray3 = this._templateTypes.h[template.__id__].array;
						while(--trimLength3 >= 0) templatesForCheck[trimArray3[trimLength3]] = null;
					}
					continue;
				}
				if(this._neighbourColors.h[cellX].get(cellY) != primaryColor) {
					if(missingCell == null) {
						cell = board1.getCellByCoords(cellX,cellY,false);
						missingCell = cell;
						continue;
					} else {
						missingCell = null;
						break;
					}
				}
				cell = board1.getCellByCoords(cellX,cellY,false);
				comboCandidate[candidatesCount] = cell;
				++candidatesCount;
			}
			if(candidatesCount != templateLength - 1 || missingCell == null) {
				if(this._templateTypes.h.__keys__[template.__id__] != null) {
					var trimLength4 = this._templateTypes.h[template.__id__].length;
					var trimArray4 = this._templateTypes.h[template.__id__].array;
					while(--trimLength4 >= 0) templatesForCheck[trimArray4[trimLength4]] = null;
				}
				continue;
			}
			if(missingCell.hasStableBlocker()) {
				if(this._templateTypes.h.__keys__[template.__id__] != null) {
					var trimLength5 = this._templateTypes.h[template.__id__].length;
					var trimArray5 = this._templateTypes.h[template.__id__].array;
					while(--trimLength5 >= 0) templatesForCheck[trimArray5[trimLength5]] = null;
				}
				continue;
			}
			if(!this.tryCompleteTemplate(missingCell,primaryColor,comboCandidate,template,candidatesCount,currentDictionary)) {
				if(this._templateTypes.h.__keys__[template.__id__] != null) {
					var trimLength6 = this._templateTypes.h[template.__id__].length;
					var trimArray6 = this._templateTypes.h[template.__id__].array;
					while(--trimLength6 >= 0) templatesForCheck[trimArray6[trimLength6]] = null;
				}
			}
		}
	}
	,tryCompleteTemplate: function(missingCell,primaryColor,comboCandidate,template,candidatesCount,currentDictionary) {
		var j = -1;
		var missingX;
		var missingY;
		var switchCell;
		var board = this._gameEngine.board;
		var directions = com_sq_m3lib_board_CellBorder.CELL_DIRECTIONS;
		var directionsLength = directions.length;
		var foundCandidate = false;
		while(++j < candidatesCount) comboCandidate[j].inCombination = true;
		missingX = missingCell.viewPortCoords.x;
		missingY = missingCell.viewPortCoords.y;
		j = directionsLength;
		while(--j >= 0) {
			if(!this._neighbourColors.h.hasOwnProperty(missingX + directions[j][0]) || this._neighbourColors.h[missingX + directions[j][0]].get(missingY + directions[j][1]) != primaryColor) {
				continue;
			}
			switchCell = board.getCellByCoords(missingX + directions[j][0],missingY + directions[j][1],false);
			if(switchCell == null || switchCell.isVoid || switchCell.inCombination || switchCell.hasStableBlocker()) {
				continue;
			}
			foundCandidate = true;
			if(currentDictionary.h.__keys__[missingCell.__id__] == null) {
				var v = new haxe_ds_ObjectMap();
				currentDictionary.set(missingCell,v);
			}
			var candidate = new com_sq_m3lib_board_combinations_CombinationCandidate(missingCell,switchCell,new com_sq_m3lib_board_combinations_Combination(comboCandidate.concat([missingCell]),template));
			currentDictionary.h[missingCell.__id__].set(switchCell,candidate);
			this.combinationCandidateList.push(candidate);
		}
		j = -1;
		while(++j < candidatesCount) comboCandidate[j].clearComboCheckParams();
		return foundCandidate;
	}
	,fillTemplatesTypes: function() {
		var templateLength = this._templates.length;
		this._templateTypes = new haxe_ds_ObjectMap();
		var index = -1;
		var templateCells;
		var template;
		var nextTemplate;
		var i;
		var j;
		while(++index < templateLength) {
			template = this._templates[index];
			templateCells = template.cells;
			i = index;
			while(++i < templateLength) {
				nextTemplate = this._templates[i];
				j = templateCells.length;
				while(--j >= 0) {
					var nextTemplateCellsLength = nextTemplate.cells.length;
					while(--nextTemplateCellsLength >= 0) if(nextTemplate.cells[nextTemplateCellsLength].x == templateCells[j].x && nextTemplate.cells[nextTemplateCellsLength].y == templateCells[j].y) {
						break;
					}
					if(nextTemplateCellsLength < 0) {
						break;
					}
				}
				if(j > 0) {
					continue;
				}
				if(this._templateTypes.h.__keys__[template.__id__] == null) {
					this._templateTypes.set(template,{ array : [], length : 0});
				}
				this._templateTypes.h[template.__id__].array[this._templateTypes.h[template.__id__].length] = i;
				this._templateTypes.h[template.__id__].length++;
			}
		}
	}
	,trimTemplateCheckArray: function(templateArray,trimTemplate) {
		if(this._templateTypes.h.__keys__[trimTemplate.__id__] == null) {
			return;
		}
		var trimLength = this._templateTypes.h[trimTemplate.__id__].length;
		var trimArray = this._templateTypes.h[trimTemplate.__id__].array;
		while(--trimLength >= 0) templateArray[trimArray[trimLength]] = null;
	}
	,fillNeighboursColors: function(cells,params) {
		this._neighbourColors = new haxe_ds_IntMap();
		var i = cells.length;
		var cell;
		var cellItem;
		var x;
		var y;
		while(--i >= 0) {
			cell = cells[i];
			if(params.fullBoardCheck) {
				x = cell.coords.x;
				y = cell.coords.y;
			} else {
				x = cell.viewPortCoords.x;
				y = cell.viewPortCoords.y;
			}
			if(this._neighbourColors.h[x] == null) {
				var v = new haxe_ds_IntMap();
				this._neighbourColors.h[x] = v;
			}
			if(!this.needCheckCell(cell)) {
				continue;
			}
			cellItem = cell.getItem();
			if(js_Boot.__instanceof(cellItem,com_sq_m3lib_board_items_IColorItem)) {
				this._neighbourColors.h[x].set(y,(js_Boot.__cast(cellItem , com_sq_m3lib_board_items_IColorItem)).color);
			} else {
				this._neighbourColors.h[x].set(y,-1);
			}
		}
	}
	,updateNeighbourColors: function(cells,params) {
		if(this._neighbourColors == null) {
			this.fillNeighboursColors(cells,params);
			return;
		}
		var i = cells.length;
		var cell;
		var cellItem;
		var x;
		var y;
		while(--i >= 0) {
			cell = cells[i];
			if(params.fullBoardCheck) {
				x = cell.coords.x;
				y = cell.coords.y;
			} else {
				x = cell.viewPortCoords.x;
				y = cell.viewPortCoords.y;
			}
			if(!cell.wasChanged) {
				continue;
			}
			cellItem = cell.getItem();
			if(cellItem != null && js_Boot.__instanceof(cellItem,com_sq_m3lib_board_items_IColorItem)) {
				this._neighbourColors.h[x].set(y,(js_Boot.__cast(cellItem , com_sq_m3lib_board_items_IColorItem)).color);
			} else {
				this._neighbourColors.h[x].set(y,-1);
			}
		}
	}
	,checkNeighboursColors: function(cell,cellCoords,cellVector,fourSideCheck,cellPossibleTemplateMap) {
		var cellX = cellCoords.x;
		var cellY = cellCoords.y;
		if(!this._neighbourColors.h.hasOwnProperty(cellX) || !this._neighbourColors.h[cellX].exists(cellY)) {
			return false;
		}
		var cellColor = this._neighbourColors.h[cellX].get(cellY);
		if(cellColor == -1) {
			return false;
		}
		var directions = fourSideCheck?com_sq_m3lib_coreSettings_CoreSettings.FOUR_SIDE_NEIGHBOUR_CHECK_DIRECTIONS:com_sq_m3lib_coreSettings_CoreSettings.NEIGHBOUR_CHECK_DIRECTIONS;
		var directionsLength = directions.length;
		var i = -1;
		var j = -1;
		var checkDirectionsX;
		var checkDirectionsY;
		var koeff;
		var result = false;
		var isNormalVector = com_sq_m3lib_geometry_CellVector.multiply(cellVector,com_sq_m3lib_coreSettings_CoreSettings.DEFAULT_NEIGHBOUR_CHECK_VECTOR) == 0;
		if(isNormalVector) {
			koeff = com_sq_m3lib_coreSettings_CoreSettings.DEFAULT_NEIGHBOUR_CHECK_VECTOR.x * cellVector.y + com_sq_m3lib_coreSettings_CoreSettings.DEFAULT_NEIGHBOUR_CHECK_VECTOR.y * cellVector.x;
		} else {
			koeff = com_sq_m3lib_coreSettings_CoreSettings.DEFAULT_NEIGHBOUR_CHECK_VECTOR.x * cellVector.x + com_sq_m3lib_coreSettings_CoreSettings.DEFAULT_NEIGHBOUR_CHECK_VECTOR.y * cellVector.y;
		}
		while(++i < directionsLength) {
			j = directions[i].length;
			while(--j >= 0) {
				if(isNormalVector) {
					checkDirectionsX = cellX + directions[i][j][1] * koeff;
					checkDirectionsY = cellY + directions[i][j][0] * koeff;
				} else {
					checkDirectionsX = cellX + directions[i][j][0] * koeff;
					checkDirectionsY = cellY + directions[i][j][1] * koeff;
				}
				if(!this._neighbourColors.h.hasOwnProperty(checkDirectionsX) || !this._neighbourColors.h[checkDirectionsX].exists(checkDirectionsY)) {
					break;
				}
				if(this._neighbourColors.h[checkDirectionsX].get(checkDirectionsY) != cellColor) {
					break;
				}
			}
			if(j < 0) {
				this.fillPossibleTemplate(cell,cellPossibleTemplateMap,i,isNormalVector,fourSideCheck);
				result = true;
			}
		}
		return result;
	}
	,fillPossibleTemplate: function(cell,cellPossibleTemplateMap,index,isNormalVector,fourSideCheck) {
		var squareStart = fourSideCheck?com_sq_m3lib_coreSettings_CoreSettings.VERTICAL_FOUR_SIDE_PRESET_END:com_sq_m3lib_coreSettings_CoreSettings.HORIZONAL_PRESET_END;
		var horizonalEnd = com_sq_m3lib_coreSettings_CoreSettings.HORIZONAL_PRESET_END;
		if(cellPossibleTemplateMap != null) {
			if(cellPossibleTemplateMap.h.__keys__[cell.__id__] == null) {
				cellPossibleTemplateMap.set(cell,[]);
			}
			if(index < horizonalEnd) {
				if(isNormalVector) {
					cellPossibleTemplateMap.h[cell.__id__].push("vertical");
				} else {
					cellPossibleTemplateMap.h[cell.__id__].push("horizontal");
				}
			} else if(index > squareStart) {
				cellPossibleTemplateMap.h[cell.__id__].push("square");
			} else if(isNormalVector) {
				cellPossibleTemplateMap.h[cell.__id__].push("horizontal");
			} else {
				cellPossibleTemplateMap.h[cell.__id__].push("vertical");
			}
		}
	}
	,getPossibleBombCombinations: function(cell,board,currentDictionary) {
		var item = cell.item;
		if(!item.canSelect()) {
			return;
		}
		if(!cell.canMoveItem()) {
			return;
		}
		if(!js_Boot.__instanceof(item,com_sq_m3lib_board_items_IBomb)) {
			return;
		}
		js_Boot.__cast(item , com_sq_m3lib_board_items_IBomb);
		[];
		var directions = com_sq_m3lib_board_CellBorder.CELL_DIRECTIONS;
		var directionsLength = directions.length;
		var coords = cell.viewPortCoords;
		var switchCell;
		var combination;
		var candidate;
		var i = -1;
		while(++i < directionsLength) {
			switchCell = board.getCellByCoords(coords.x + directions[i][0],coords.y + directions[i][1]);
			if(switchCell == null || !switchCell.hasItemInCell() || !switchCell.item.canSelect() || !switchCell.canMoveItem()) {
				continue;
			}
			combination = this.checkSpecialTemplates(cell,switchCell);
			if(combination == null) {
				continue;
			}
			candidate = new com_sq_m3lib_board_combinations_CombinationCandidate(cell,switchCell,combination);
			if(currentDictionary.h.__keys__[cell.__id__] == null) {
				var v = new haxe_ds_ObjectMap();
				currentDictionary.set(cell,v);
			}
			currentDictionary.h[cell.__id__].set(switchCell,candidate);
			this.combinationCandidateList.push(candidate);
		}
	}
	,checkSpecialTemplates: function(starterCell,switchCell) {
		var index = this._bombTemplates.length;
		var template;
		while(--index > -1) {
			template = this._bombTemplates[index];
			if(this.isTemplateClass(template.special,starterCell.item) && this.isTemplateClass(template.secondary,switchCell.item) || this.isTemplateClass(template.special,switchCell.item) && this.isTemplateClass(template.secondary,starterCell.item)) {
				var comboCandidate = [];
				comboCandidate.push(starterCell);
				comboCandidate.push(switchCell);
				return new com_sq_m3lib_board_combinations_Combination(comboCandidate,template);
			}
		}
		return null;
	}
	,isTemplateClass: function(classNames,item) {
		var _g = 0;
		while(_g < classNames.length) {
			var itemClassName = classNames[_g];
			++_g;
			if(js_Boot.__instanceof(item,com_sq_m3lib_board_ItemsFactoryDictionary.getByAlias(itemClassName))) {
				return true;
			}
		}
		return false;
	}
	,getComboByCandidates: function(cell,switchCell) {
		if(this.allCombinationCandidates.h.__keys__[cell.__id__] != null && this.allCombinationCandidates.h[cell.__id__].exists(switchCell)) {
			return this.allCombinationCandidates.h[cell.__id__].get(switchCell);
		}
		if(this.allCombinationCandidates.h.__keys__[switchCell.__id__] != null && this.allCombinationCandidates.h[switchCell.__id__].exists(cell)) {
			return this.allCombinationCandidates.h[switchCell.__id__].get(cell);
		}
		return null;
	}
	,haveCombos: function() {
		return this.cellsToDestroy.length > 0;
	}
	,resetOnMove: function() {
		this._bestCombinationCandidate = null;
		this.allCombinationCandidates = new haxe_ds_ObjectMap();
		this.combinationCandidateList = [];
	}
	,clearCellsOnComboCheck: function(cells) {
		var i = cells.length;
		while(--i >= 0) cells[i].clearComboCheckParams();
		this.cellsToDestroy = [];
		this._comboToDestroy = [];
	}
	,reset: function() {
		this.clearCellsOnComboCheck([]);
		this.resetOnMove();
		this.clearNeighbours();
	}
	,free: function() {
		this.reset();
		this._templates = null;
		this._bombTemplates = null;
		this.cellsToDestroy = null;
		this._comboToDestroy = null;
		this._templateTypes = null;
	}
	,clearNeighbours: function() {
		this._neighbourColors = null;
	}
	,loadTemplates: function(baseTemplates,specialTemplates) {
		this._templates = [];
		this._bombTemplates = [];
		var baseLength = baseTemplates.length;
		var i = -1;
		while(++i < baseLength) this.loadTemplate(baseTemplates[i],this._templates);
		var specialLength = specialTemplates.length;
		i = -1;
		while(++i < specialLength) this.loadTemplate(specialTemplates[i],this._bombTemplates);
		this.fillTemplatesTypes();
	}
	,loadTemplate: function(template,templateArray) {
		if(templateArray.length > 0) {
			var nearTemplate = this.getNearPriorityTemplate(template.priority,templateArray);
			if(templateArray.length > nearTemplate) {
				templateArray.splice(nearTemplate,0,template);
			} else {
				templateArray.push(template);
			}
		} else {
			templateArray.push(template);
		}
	}
	,getNearPriorityTemplate: function(priority,templates) {
		if(templates.length == 0) {
			return 0;
		}
		if(templates.length == 1) {
			if(templates[0].priority > priority) {
				return 0;
			} else {
				return 1;
			}
		}
		var halfLength = (templates.length - 1) / 2 | 0;
		if(templates[halfLength].priority >= priority) {
			return this.getNearPriorityTemplate(priority,templates.slice(0,halfLength));
		} else {
			++halfLength;
			return halfLength + this.getNearPriorityTemplate(priority,templates.slice(halfLength));
		}
	}
	,__class__: com_sq_m3lib_board_combinations_ComboFinderFactory
};
var com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario = function(coord,gameEngine,settings,mainScenario) {
	this._ticksDone = 0;
	this._step = 0;
	this.paused = com_sq_m3lib_board_ScenarioPauseReason.NONE;
	this._alias = com_sq_m3lib_board_explosionScenarios_ScenarioDictionary.getByClass(js_Boot.getClass(this));
	this._gameEngine = gameEngine;
	this._starterCoordInViewPort = coord;
	this._starterCoord = coord != null?gameEngine.board.boardUtils.fromViewPortToGlobalCoord(coord):null;
	this._maxStepValue = 1;
	this._settings = settings;
	this.mainScenario = mainScenario;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.baseScenarios.BaseScenario"] = com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.prototype = {
	init: function() {
	}
	,getRootScenario: function() {
		var root = this.mainScenario;
		while(root != null && root.mainScenario != null) root = this.mainScenario;
		return root;
	}
	,apply: function() {
		var result = new com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult(this);
		this._ticksDone++;
		this.onTicksChanged(result);
		if(this.getTickDelta() == 0 || this._ticksDone % this.getTickDelta() == 0) {
			this._step++;
			if(this._step <= this._maxStepValue) {
				this.onStepChanged(result);
			}
		}
		return result;
	}
	,isComplete: function() {
		return this._step >= this._maxStepValue;
	}
	,getTickDelta: function() {
		return this._settings.tickDelta;
	}
	,willDestroySomethingInCell: function(cell) {
		return false;
	}
	,getMaxStep: function() {
		return this._maxStepValue;
	}
	,getStarterCoord: function() {
		return this._starterCoord;
	}
	,getAlias: function() {
		return this._alias;
	}
	,getTotalTicks: function() {
		return this._maxStepValue * this.getTickDelta();
	}
	,getPassedTicks: function() {
		return this._ticksDone;
	}
	,getTicksInCurrentStage: function() {
		return this.getTickDelta();
	}
	,needEvent: function() {
		return true;
	}
	,onStepChanged: function(result) {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.STEP,this,this.getStepParams()));
	}
	,onTicksChanged: function(result) {
	}
	,getStepParams: function() {
		return null;
	}
	,getDestroyStarterParams: function() {
		return null;
	}
	,getTargetCellByStep: function(step) {
		return null;
	}
	,getStep: function() {
		return this._step;
	}
	,isPaused: function() {
		return this.paused != com_sq_m3lib_board_ScenarioPauseReason.NONE;
	}
	,resetPausedState: function() {
		this.paused = com_sq_m3lib_board_ScenarioPauseReason.NONE;
	}
	,free: function() {
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario
};
var com_sq_m3lib_board_explosionScenarios_ComplexScenario = function(coord,gameEngine,settings) {
	com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.call(this,coord,gameEngine,settings);
	this._scenarios = [];
	this._scenarioCount = 0;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.ComplexScenario"] = com_sq_m3lib_board_explosionScenarios_ComplexScenario;
com_sq_m3lib_board_explosionScenarios_ComplexScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_ComplexScenario.__super__ = com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario;
com_sq_m3lib_board_explosionScenarios_ComplexScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.prototype,{
	getScenarios: function() {
		return this._scenarios;
	}
	,addAdditionalScenario: function(scenario) {
		this._scenarios[this._scenarioCount] = scenario;
		this._scenarioCount++;
		this._gameEngine.destroyFactory.addScenarioToList(scenario);
	}
	,removeAdditionalScenario: function(scenario) {
		if(this._scenarioCount == 0) {
			return;
		}
		var index = this._scenarios.indexOf(scenario);
		this._scenarioCount--;
		this._scenarios[index] = this._scenarios[this._scenarioCount];
		this._scenarios.pop();
	}
	,willDestroySomethingInCell: function(cell) {
		if(this._scenarioCount == 0) {
			return com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.prototype.willDestroySomethingInCell.call(this,cell);
		}
		var i = this._scenarioCount;
		while(--i >= 0) if(this._scenarios[i].willDestroySomethingInCell(cell)) {
			return true;
		}
		return com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.prototype.willDestroySomethingInCell.call(this,cell);
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_ComplexScenario
});
var com_sq_m3lib_board_explosionScenarios_BaseBombScenario = function(startCell,assistantCell,gameEngine) {
	this._startCell = startCell;
	this._assistantCell = assistantCell;
	this._starterItem = this._startCell.item;
	this._assistantItem = this._assistantCell != null?this._assistantCell.item:null;
	com_sq_m3lib_board_explosionScenarios_ComplexScenario.call(this,this._startCell.viewPortCoords,gameEngine);
	this._settings = this.getSettings();
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.BaseBombScenario"] = com_sq_m3lib_board_explosionScenarios_BaseBombScenario;
com_sq_m3lib_board_explosionScenarios_BaseBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_BaseBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_ComplexScenario;
com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_ComplexScenario.prototype,{
	init: function() {
		com_sq_m3lib_board_explosionScenarios_ComplexScenario.prototype.init.call(this);
		this.initAdditionalScenarios();
		if(this.needEventOnInit()) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.STEP,this,this.getStepParams()));
		}
	}
	,needEventOnInit: function() {
		return true;
	}
	,initAdditionalScenarios: function() {
	}
	,getStarterCell: function() {
		return this._startCell;
	}
	,getStarterItem: function() {
		return this._starterItem;
	}
	,getAssistantItem: function() {
		return this._assistantItem;
	}
	,getAssistantCell: function() {
		return this._assistantCell;
	}
	,isComplete: function() {
		if(com_sq_m3lib_board_explosionScenarios_ComplexScenario.prototype.isComplete.call(this)) {
			return this._ticksDone >= this.getDestroyBombDelta();
		} else {
			return false;
		}
	}
	,getDestroyBombDelta: function() {
		return this._settings.bombDestroyDelta;
	}
	,getItemToPlaceInsteadStarter: function() {
		return null;
	}
	,getSettings: function() {
		var tmp;
		if(this._alias != null) {
			var _this = com_sq_m3lib_coreSettings_CoreSettings.bombScenarioSettings;
			var key = this._alias;
			if(__map_reserved[key] != null) {
				tmp = _this.existsReserved(key);
			} else {
				tmp = _this.h.hasOwnProperty(key);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = com_sq_m3lib_coreSettings_CoreSettings.bombScenarioSettings;
			var key1 = this._alias;
			return __map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1];
		}
		return null;
	}
	,needEvent: function() {
		return true;
	}
	,getTicksInCurrentStage: function() {
		if(this._step <= this._maxStepValue) {
			return com_sq_m3lib_board_explosionScenarios_ComplexScenario.prototype.getTicksInCurrentStage.call(this);
		}
		return this.getDestroyBombDelta();
	}
	,onTicksChanged: function(result) {
		var tmp = this._ticksDone == this.getDestroyBombDelta();
	}
	,getDestroyStarterParams: function() {
		var stepParams = new com_sq_m3lib_board_explosionScenarios_ScenarioStepParams();
		stepParams.stepTargetCells = [this._startCell];
		stepParams.tickPerStep = this.getDestroyBombDelta();
		stepParams.scenarioTicksLeft = this.getTotalTicks() - this._ticksDone;
		return stepParams;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_BaseBombScenario
});
var com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult = function(scenario) {
	this.scenario = scenario;
	this.destroyedCells = [];
	this.activatedCells = [];
	this.changedCells = [];
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.ScenarioApplyResult"] = com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult;
com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult.__name__ = true;
com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult.prototype = {
	__class__: com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult
};
var com_sq_m3lib_board_explosionScenarios_ScenarioDictionary = function() {
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.ScenarioDictionary"] = com_sq_m3lib_board_explosionScenarios_ScenarioDictionary;
com_sq_m3lib_board_explosionScenarios_ScenarioDictionary.__name__ = true;
com_sq_m3lib_board_explosionScenarios_ScenarioDictionary.getByAlias = function(alias) {
	return com_sq_m3lib_board_CommonFactoryDictionary.getByAlias(com_sq_m3lib_coreSettings_CoreClassesDictionary.scenarioClassDictionary,alias);
};
com_sq_m3lib_board_explosionScenarios_ScenarioDictionary.getByClass = function(classDef) {
	return com_sq_m3lib_board_CommonFactoryDictionary.getByClass(com_sq_m3lib_coreSettings_CoreClassesDictionary.scenarioClassDictionary,classDef);
};
com_sq_m3lib_board_explosionScenarios_ScenarioDictionary.prototype = {
	__class__: com_sq_m3lib_board_explosionScenarios_ScenarioDictionary
};
var com_sq_m3lib_board_explosionScenarios_ScenarioStepParams = function() {
	this.stepTargetCells = [];
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.ScenarioStepParams"] = com_sq_m3lib_board_explosionScenarios_ScenarioStepParams;
com_sq_m3lib_board_explosionScenarios_ScenarioStepParams.__name__ = true;
com_sq_m3lib_board_explosionScenarios_ScenarioStepParams.prototype = {
	getTicksPerStep: function() {
		return this.tickPerStep;
	}
	,getTargetCells: function() {
		return this.stepTargetCells;
	}
	,getScenarioTicksLeft: function() {
		return this.scenarioTicksLeft;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_ScenarioStepParams
};
var com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario = function(coord,cells,onCellCallback,gameEngine,settings,mainScenario) {
	com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.call(this,coord,gameEngine,settings,mainScenario);
	this._cells = cells;
	this._onCell = onCellCallback;
	this._maxStepValue = cells.length;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.baseScenarios.ItemPickerScenario"] = com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario.__super__ = com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.prototype,{
	onStepChanged: function(result) {
		this.onCell(result,this._cells[this._step - 1]);
	}
	,onCell: function(result,cell) {
		if(this.getOnCell() != null) {
			(this.getOnCell())(cell);
		}
		result.changedCells = [cell];
	}
	,getOnCell: function() {
		return this._onCell;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario
});
var com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemActivationPickerScenario = function(coord,cells,onCell,gameEngine,settings,mainScenario) {
	com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario.call(this,coord,cells,onCell,gameEngine,settings,mainScenario);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.baseScenarios.ItemActivationPickerScenario"] = com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemActivationPickerScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemActivationPickerScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemActivationPickerScenario.__super__ = com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemActivationPickerScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario.prototype,{
	onCell: function(result,cell) {
		this._onCell(cell);
		result.activatedCells = [cell];
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemActivationPickerScenario
});
var com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemDestroyerScenario = function(coord,cells,onCell,gameEngine,settings,mainScenario) {
	com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario.call(this,coord,cells,onCell,gameEngine,settings,mainScenario);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.baseScenarios.ItemDestroyerScenario"] = com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemDestroyerScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemDestroyerScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemDestroyerScenario.__super__ = com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemDestroyerScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario.prototype,{
	onCell: function(result,cell) {
		if(this.getOnCell() != null) {
			(this.getOnCell())(cell);
		}
		result.destroyedCells = [cell];
	}
	,willDestroySomethingInCell: function(cell) {
		return this._cells.indexOf(cell) != -1;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemDestroyerScenario
});
var com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario = function(coord,deltaX,deltaY,maxStep,gameEngine,settings,mainScenario) {
	this.stopScenario = false;
	com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.call(this,coord,gameEngine,settings,mainScenario);
	this._deltaX = deltaX;
	this._deltaY = deltaY;
	this._maxStepValue = maxStep;
	this._destroyedCells = [];
	this._destroyCount = 0;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.baseScenarios.LineScenario"] = com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario.__super__ = com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.prototype,{
	onStepChanged: function(result) {
		var destroyCells = [];
		var possibleCell;
		if(!this.stopScenario) {
			possibleCell = this.getTargetCellByStep(this._step)[0];
			if(possibleCell != null && !possibleCell.isVoid) {
				destroyCells.push(possibleCell);
				this._destroyedCells[this._destroyCount] = possibleCell;
				this._destroyCount++;
				if(possibleCell.hasExplosionStopper()) {
					this.stopScenario = true;
				}
			}
		}
		result.destroyedCells = destroyCells;
	}
	,willDestroySomethingInCell: function(cell) {
		if(!(this._starterCoordInViewPort.y == cell.viewPortCoords.y && this._deltaY == 0)) {
			if(this._starterCoordInViewPort.x == cell.viewPortCoords.x) {
				return this._deltaX == 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,getDestroyedCells: function() {
		return this._destroyedCells;
	}
	,getTargetCellByStep: function(step) {
		return [this._gameEngine.board.getCellByCoords(this._starterCoordInViewPort.x + step * this._deltaX,this._starterCoordInViewPort.y + step * this._deltaY)];
	}
	,getDeltaX: function() {
		return this._deltaX;
	}
	,getDeltaY: function() {
		return this._deltaY;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario
});
var com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario = function(coord,gameEngine,settings,mainScenario) {
	com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.call(this,coord,gameEngine,settings,mainScenario);
	this._maxStepValue = settings.params.radius;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.baseScenarios.RadiusScenario"] = com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario.__super__ = com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.prototype,{
	onStepChanged: function(result) {
		result.destroyedCells = this.getTargetCellByStep(this._step);
	}
	,getTargetCellByStep: function(step) {
		if(step > this._maxStepValue) {
			return null;
		}
		var destroyCells = [];
		var possibleCell;
		var starterBoardCoords = this._starterCoordInViewPort;
		var deltaX = -step;
		var deltaY = -step;
		while(deltaX <= step) {
			possibleCell = this._gameEngine.board.getCellByCoords(starterBoardCoords.x + deltaX,starterBoardCoords.y + deltaY);
			if(possibleCell != null && !possibleCell.isVoid) {
				destroyCells.push(possibleCell);
			}
			++deltaX;
		}
		deltaX = step;
		++deltaY;
		while(deltaY < step) {
			possibleCell = this._gameEngine.board.getCellByCoords(starterBoardCoords.x + step,starterBoardCoords.y + deltaY);
			if(possibleCell != null && !possibleCell.isVoid) {
				destroyCells.push(possibleCell);
			}
			++deltaY;
		}
		deltaY = step;
		while(deltaX >= -step) {
			possibleCell = this._gameEngine.board.getCellByCoords(starterBoardCoords.x + deltaX,starterBoardCoords.y + step);
			if(possibleCell != null && !possibleCell.isVoid) {
				destroyCells.push(possibleCell);
			}
			--deltaX;
		}
		deltaX = -step;
		deltaY = step - 1;
		while(deltaY > -step) {
			possibleCell = this._gameEngine.board.getCellByCoords(starterBoardCoords.x + deltaX,starterBoardCoords.y + deltaY);
			if(possibleCell != null && !possibleCell.isVoid) {
				destroyCells.push(possibleCell);
			}
			--deltaY;
		}
		return destroyCells;
	}
	,willDestroySomethingInCell: function(cell) {
		if(com_sq_m3lib_math_CoreMathUtils.abs(this._starterCoordInViewPort.x - cell.viewPortCoords.x) <= this._maxStepValue) {
			return com_sq_m3lib_math_CoreMathUtils.abs(this._starterCoordInViewPort.y - cell.viewPortCoords.y) <= this._maxStepValue;
		} else {
			return false;
		}
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario
});
var com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusResetBlockerScenario = function(coord,gameEngine,settings,mainScenario) {
	com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario.call(this,coord,gameEngine,settings,mainScenario);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.baseScenarios.RadiusResetBlockerScenario"] = com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusResetBlockerScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusResetBlockerScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusResetBlockerScenario.__super__ = com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusResetBlockerScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario.prototype,{
	apply: function() {
		var result = com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario.prototype.apply.call(this);
		if(result.destroyedCells.length > 0) {
			this.resetBlockers(result.destroyedCells);
		}
		return result;
	}
	,resetBlockers: function(destroyed) {
		var cell;
		var i = destroyed.length;
		try {
			while(--i >= 0) {
				cell = destroyed[i];
				if(cell == null) {
					continue;
				}
				if(cell.hasStableBlocker() || !cell.hasItemInCell() && !cell.blockerSet.isEmpty()) {
					var blocker = cell.blockerSet.priorityBlocker;
					switch(blocker.alias) {
					case "blocker_ice":
						break;
					case "blocker_simple":
						if(blocker.step > 3) {
							blocker.step = 3;
						} else if(blocker.step > 1) {
							blocker.step--;
						} else {
							blocker.step = 1;
						}
						throw "__break__";
						break;
					case "blocker_special_lock":
						if(blocker.step > 3) {
							blocker.step = 2;
						} else if(blocker.step > 2) {
							blocker.step = 1;
						} else {
							blocker.step = com_sq_m3lib_coreSettings_CoreSettings.blockerParams.minLevel;
						}
						throw "__break__";
						break;
					case "blocker_special_viral":
						if(blocker.step > 1) {
							blocker.step = 1;
						} else {
							blocker.step = com_sq_m3lib_coreSettings_CoreSettings.blockerParams.minLevel;
						}
						throw "__break__";
						break;
					default:
						blocker.step = com_sq_m3lib_coreSettings_CoreSettings.blockerParams.minLevel;
						throw "__break__";
					}
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusResetBlockerScenario
});
var com_sq_m3lib_board_explosionScenarios_baseScenarios_SpecialItemPickerScenario = function(coord,cells,onCellCallback,gameEngine,settings,mainScenario) {
	com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario.call(this,coord,cells,onCellCallback,gameEngine,settings,mainScenario);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.baseScenarios.SpecialItemPickerScenario"] = com_sq_m3lib_board_explosionScenarios_baseScenarios_SpecialItemPickerScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_SpecialItemPickerScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_baseScenarios_SpecialItemPickerScenario.__super__ = com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario;
com_sq_m3lib_board_explosionScenarios_baseScenarios_SpecialItemPickerScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario.prototype,{
	onCell: function(result,cell) {
		if(this.getOnCell() != null) {
			(this.getOnCell())(cell);
		}
		result.changedCells = [cell];
		result.activatedCells = [cell];
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_baseScenarios_SpecialItemPickerScenario
});
var com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario = function(startCell,assistantCell,gameEngine) {
	this._color = -1;
	if(!js_Boot.__instanceof(startCell.item,this.starterCheckClass())) {
		if(js_Boot.__instanceof(assistantCell.item,this.starterCheckClass())) {
			var tmp = startCell;
			startCell = assistantCell;
			assistantCell = tmp;
		} else {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreError("CoreError_INVALID_PARAMS"));
			return;
		}
	}
	com_sq_m3lib_board_explosionScenarios_BaseBombScenario.call(this,startCell,assistantCell,gameEngine);
	this._starterItem.setInAction(startCell,"specialCombo",startCell,this);
	com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemDestroyEvent("set_items_in_action",this._starterItem,this._starterItem.destroyInfo.cause));
	if(this._assistantItem != null && js_Boot.__instanceof(this._assistantItem,com_sq_m3lib_board_items_IColorItem)) {
		this._color = (js_Boot.__cast(this._assistantItem , com_sq_m3lib_board_items_IColorItem)).color;
	}
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.bombScenarios.ColorPickerBombScenario"] = com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_BaseBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype,{
	setColor: function(color) {
		this._color = color;
	}
	,getColor: function() {
		return this._color;
	}
	,init: function() {
		if(this._color == -1) {
			this._cells = this._gameEngine.board.getItemsForExplosionByColor(this._gameEngine.board.getPopularColors()[0]);
		} else {
			this._cells = this._gameEngine.board.getItemsForExplosionByColor(this._color);
		}
		this._maxStepValue = this._cells.length;
		var i = this._maxStepValue;
		while(--i >= 0) this._cells[i].item.setInAction(this._cells[i],"specialItem",this._startCell,this);
		this.sortCells();
		com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype.init.call(this);
	}
	,initAdditionalScenarios: function() {
		var scenario = new com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemActivationPickerScenario(this._starterCoordInViewPort,this._cells,$bind(this,this.onCell),this._gameEngine,this._settings,this);
		this.addAdditionalScenario(scenario);
		this._maxStepValue = scenario.getMaxStep();
	}
	,sortCells: function() {
		haxe_ds_ArraySort.sort(this._cells,function(cell1,cell2) {
			var delta = cell1.coords.y - cell2.coords.y;
			if(delta == 0) {
				delta = cell1.coords.x - cell2.coords.x;
			}
			return delta;
		});
	}
	,onAdditionalScenariosAdded: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.STEP,this,this.getStepParams()));
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.AIM,this,this.getStepParams()));
	}
	,onCell: function(cell) {
	}
	,onStepChanged: function(result) {
		var stepParams = this.getStepParams();
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.STEP,this,stepParams));
		if(this._step < this._maxStepValue && stepParams.stepTargetCells != null) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.AIM,this,stepParams));
		}
	}
	,getStepParams: function() {
		if(this._step < this._maxStepValue) {
			var stepParams = new com_sq_m3lib_board_explosionScenarios_ScenarioStepParams();
			if(this._cells.length > this._step) {
				stepParams.stepTargetCells = [this._cells[this._step]];
			}
			stepParams.tickPerStep = this.getTickDelta();
			stepParams.scenarioTicksLeft = this.getTotalTicks() - this._ticksDone;
			return stepParams;
		}
		return null;
	}
	,onTicksChanged: function(result) {
		com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype.onTicksChanged.call(this,result);
		if(this._ticksDone == this.getDestroyBombDelta()) {
			if(result == null) {
				result = new com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult(this);
			}
			result.destroyedCells = this.onDestroyStarter().concat(result.destroyedCells);
		}
	}
	,getDestroyBombDelta: function() {
		return this._maxStepValue * this.getTickDelta() + this._settings.bombDestroyDelta;
	}
	,onDestroyStarter: function() {
		var result = [this._startCell];
		var count = 1;
		var i = this._cells.length;
		while(--i >= 0) {
			if(this._cells[i].item != null) {
				this._cells[i].item.resetInAction();
			}
			result[count] = this._cells[i];
			++count;
		}
		return result;
	}
	,starterCheckClass: function() {
		return com_sq_m3lib_board_items_ColorPickerBomb;
	}
	,getTotalTicks: function() {
		return this.getDestroyBombDelta();
	}
	,willDestroySomethingInCell: function(cell) {
		return this._cells.indexOf(cell) != -1;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario
});
var com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_BaseBombScenario.call(this,startCell,assistantCell,gameEngine);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.bombScenarios.HomingBombScenario"] = com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_BaseBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype,{
	init: function() {
		this.initAdditionalScenarios();
	}
	,initAdditionalScenarios: function() {
		var i = -1;
		var length = this._gameEngine.destroyFactory.scenarioFactory.homingBombScenariosCount;
		while(++i < length) this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario(this._startCell,this._startCell,this._gameEngine,this._settings,this));
	}
	,isComplete: function() {
		if(this._ticksDone >= this.getDestroyBombDelta()) {
			return this._ticksDone >= this._maxStepValue * this.getTickDelta();
		} else {
			return false;
		}
	}
	,onStepChanged: function(result) {
	}
	,getDestroyStarterParams: function() {
		if(this._step <= this._maxStepValue) {
			var stepParams = new com_sq_m3lib_board_explosionScenarios_ScenarioStepParams();
			var cell;
			var i = this._scenarioCount;
			while(--i >= 0) {
				cell = (js_Boot.__cast(this._scenarios[i] , com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario)).targetCell;
				if(cell != null) {
					stepParams.stepTargetCells.push(cell);
				}
			}
			stepParams.tickPerStep = this.getTickDelta() - this.getDestroyBombDelta();
			stepParams.scenarioTicksLeft = this.getTotalTicks() - this._ticksDone;
			return stepParams;
		}
		return com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype.getDestroyStarterParams.call(this);
	}
	,onTicksChanged: function(result) {
		com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype.onTicksChanged.call(this,result);
		if(this._ticksDone == this.getDestroyBombDelta()) {
			if(result == null) {
				result = new com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult(this);
			}
			result.destroyedCells.unshift(this._startCell);
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.STEP,this,this.getDestroyStarterParams()));
		}
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombScenario
});
var com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario = function(startCell,assistantCell,gameEngine,settings,mainScenario) {
	this._targetItem = null;
	this.targetCell = null;
	com_sq_m3lib_board_explosionScenarios_BaseBombScenario.call(this,startCell,assistantCell,gameEngine);
	if(this._settings == null) {
		this._settings = settings;
	}
	this.mainScenario = mainScenario;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.bombScenarios.HomingBombSingleScenario"] = com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario.__super__ = com_sq_m3lib_board_explosionScenarios_BaseBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype,{
	needEventOnInit: function() {
		return false;
	}
	,calculateCellForHomingBomb: function(startCell) {
		return this.calculateHeaviestCell(this._gameEngine.targetsManager.getTargets(),startCell);
	}
	,calculateHeaviestCell: function(targetsProgresses,startCell) {
		var weights = [];
		this.calculateCellsWeights(targetsProgresses,weights,startCell);
		haxe_ds_ArraySort.sort(weights,$bind(this,this.weightsSort));
		this.sliceHeaviest(weights);
		weights = com_sq_m3lib_core_Mersenne.getInstance().shuffleArray(weights);
		if(weights != null && weights.length > 0) {
			return weights[0].cell;
		}
		return null;
	}
	,calculateCellsWeights: function(targetsProgresses,weights,startCell) {
		var cells = this._gameEngine.board.getNonVoidCells(false);
		var col = -1;
		var cols = cells.length;
		if(this._gameEngine.collectablesManager != null) {
			this._gameEngine.collectablesManager.recalculateCellsOnCollectableWay();
		}
		while(++col < cols) {
			var cell = cells[col];
			if(!this.canTargetCell(cell)) {
				continue;
			}
			var cellWeight = new com_sq_m3lib_board_CellWeight(cell);
			weights.push(cellWeight);
			this.calculateWeight(cellWeight,targetsProgresses,startCell);
		}
	}
	,canTargetCell: function(cell) {
		if(!cell.hasExplosionDestroybleElement()) {
			return false;
		}
		var _g = 0;
		var _g1 = this._gameEngine.destroyFactory.scenarioFactory.scenarios;
		while(_g < _g1.length) {
			var scenario = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(scenario,com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario) && (js_Boot.__cast(scenario , com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario)).targetCell == cell) {
				return false;
			}
		}
		return true;
	}
	,calculateWeight: function(cellWeight,targetsProgresses,startCell) {
		var i = -1;
		var length = targetsProgresses.length;
		while(++i < length) cellWeight.weight += targetsProgresses[i].target.getWeightForCell(cellWeight.cell,startCell,this._gameEngine);
	}
	,sliceHeaviest: function(weights) {
		var i = 0;
		var length = weights.length;
		while(++i < length) if(weights[i].weight < weights[i - 1].weight) {
			break;
		}
		weights.splice(i,length - i);
	}
	,weightsSort: function(weightA,weightB) {
		return weightB.weight - weightA.weight;
	}
	,onTicksChanged: function(result) {
		com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype.onTicksChanged.call(this,result);
		if(this._ticksDone == this.getDestroyBombDelta()) {
			this.targetCell = this.calculateCellForHomingBomb(this._startCell);
			if(this.targetCell != null && this.targetCell.hasExplosionDestroybleElement() && this.targetCell.hasItemInCell()) {
				this._targetItem = this.targetCell.item;
				if(this._targetItem.canExplode()) {
					this._targetItem.setInAction(this.targetCell,"specialItem",this._startCell,this);
				}
			}
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.AIM,this,this.getStepParams()));
		}
	}
	,onStepChanged: function(result) {
		if(this.targetCell != null) {
			if(this._targetItem != null) {
				this._targetItem.resetInAction();
			}
			if(result == null) {
				result = new com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult(this);
			}
			result.destroyedCells.unshift(this.targetCell);
		}
	}
	,isComplete: function() {
		if(com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype.isComplete.call(this)) {
			return this._step >= this._maxStepValue;
		} else {
			return false;
		}
	}
	,needEvent: function() {
		return false;
	}
	,willDestroySomethingInCell: function(cell) {
		if(cell == this.targetCell) {
			return true;
		}
		return com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype.willDestroySomethingInCell.call(this,cell);
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario
});
var com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_BaseBombScenario.call(this,startCell,assistantCell,gameEngine);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.bombScenarios.LineBombScenario"] = com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_BaseBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype,{
	getStepParams: function() {
		if(this._step < this._maxStepValue) {
			var stepParams = new com_sq_m3lib_board_explosionScenarios_ScenarioStepParams();
			var i = -1;
			var cells;
			while(++i < this._scenarioCount) {
				cells = this._scenarios[i].getTargetCellByStep(this._step + 1);
				if(cells != null) {
					stepParams.stepTargetCells = stepParams.stepTargetCells.concat(cells);
				}
			}
			stepParams.tickPerStep = this.getTickDelta();
			stepParams.scenarioTicksLeft = this.getTotalTicks() - this._ticksDone;
			return stepParams;
		}
		return com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype.getStepParams.call(this);
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario
});
var com_sq_m3lib_board_explosionScenarios_bombScenarios_HorizonalLineBombScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.call(this,startCell,assistantCell,gameEngine);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.bombScenarios.HorizonalLineBombScenario"] = com_sq_m3lib_board_explosionScenarios_bombScenarios_HorizonalLineBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_HorizonalLineBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_bombScenarios_HorizonalLineBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_HorizonalLineBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.prototype,{
	initAdditionalScenarios: function() {
		this._maxStepValue = this._gameEngine.board.viewPortSize.width;
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this._starterCoordInViewPort,1,0,this._maxStepValue,this._gameEngine,this._settings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this._starterCoordInViewPort,-1,0,this._maxStepValue,this._gameEngine,this._settings,this));
	}
	,apply: function() {
		var result = com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.prototype.apply.call(this);
		if(this._ticksDone == this.getDestroyBombDelta()) {
			if(result == null) {
				result = new com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult(this);
			}
			result.destroyedCells.unshift(this._startCell);
		}
		return result;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_bombScenarios_HorizonalLineBombScenario
});
var com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario.call(this,startCell,assistantCell,gameEngine);
	if(this._assistantItem != null && !this._assistantItem.inAction) {
		this._assistantItem.resetInAction();
	}
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.bombScenarios.MultiColoringBombScenario"] = com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario.prototype,{
	init: function() {
		var mainColor = (js_Boot.__cast(this._starterItem , com_sq_m3lib_board_items_IColorItem)).color;
		this.assistantColor = this._color != -1?this._color:mainColor;
		if(mainColor == this.assistantColor) {
			this.assistantColor = this.getInitiatorColor(mainColor);
		}
		this.switchToColor = mainColor;
		if(mainColor == this.assistantColor) {
			this._cells = [];
			return;
		}
		this._cells = this.getCellsToChange();
		this._maxStepValue = this._cells.length;
		var i = this._maxStepValue;
		while(--i >= 0) this._cells[i].item.setInAction(this._cells[i],"specialItem",this._startCell,this);
		this.sortCells();
		this.initAdditionalScenarios();
	}
	,initAdditionalScenarios: function() {
		var scenario = new com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemPickerScenario(this._starterCoordInViewPort,this._cells,$bind(this,this.onCell),this._gameEngine,this._settings,this);
		this.addAdditionalScenario(scenario);
		this._maxStepValue = scenario.getMaxStep();
		this.onAdditionalScenariosAdded();
	}
	,onCell: function(cell) {
		if(cell.item != null) {
			var newItemDescription = this.getNewItemDescription(cell);
			var destroyInfo = cell.item.destroyInfo;
			var newItem = this._gameEngine.itemsFactory.getItem(newItemDescription,this._gameEngine.board.getCellBoardCoords(cell),false);
			newItem.setInAction(cell,"specialItem",this._startCell);
			if(destroyInfo == null) {
				cell.item.setInAction(cell,"specialItem",this._startCell);
				destroyInfo = cell.item.destroyInfo;
			}
			destroyInfo.newItem = newItem;
		}
		com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario.prototype.onCell.call(this,cell);
	}
	,getNewItemDescription: function(cell) {
		var newItemDescription = cell.item.getCurrentItemDescription().clone();
		newItemDescription.color = this.switchToColor;
		return newItemDescription;
	}
	,getInitiatorColor: function(mainColor) {
		var popularColors = this._gameEngine.board.getPopularColors();
		var popularCount = popularColors.length;
		if(popularCount == 0) {
			return mainColor;
		}
		var mostPopularColor = popularColors[0];
		if(mostPopularColor == mainColor && popularCount > 1) {
			return popularColors[1];
		} else {
			return mostPopularColor;
		}
	}
	,onDestroyStarter: function() {
		var i = this._cells.length;
		while(--i >= 0) {
			this._cells[i].wasChanged = true;
			if(this._cells[i].item != null) {
				this._cells[i].item.resetInAction();
				this._cells[i].item.resetDestroyInfo();
			}
		}
		return [this._startCell];
	}
	,getCellsToChange: function() {
		return this._gameEngine.board.getItemsForExplosionByColor(this.assistantColor).concat(this._gameEngine.board.getItemsForExplosionByColor(this.switchToColor));
	}
	,starterCheckClass: function() {
		return com_sq_m3lib_board_items_MultiColoringBomb;
	}
	,getTotalTicks: function() {
		return this.getDestroyBombDelta();
	}
	,willDestroySomethingInCell: function(cell) {
		return false;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario
});
var com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_BaseBombScenario.call(this,startCell,assistantCell,gameEngine);
	this._maxStepValue = this._settings.params.raduis;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.bombScenarios.NineNearScenario"] = com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario.__super__ = com_sq_m3lib_board_explosionScenarios_BaseBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype,{
	getItemToPlaceInsteadStarter: function() {
		var item = this._startCell.item;
		if(this.getSubBombClass() != null && !js_Boot.__instanceof(item,this.getSubBombClass())) {
			var attributes = item.getCurrentItemDescription();
			var newItem = this._gameEngine.itemsFactory.getByClass(this.getSubBombClass(),item.position);
			newItem.setAttributes(attributes);
			return newItem;
		}
		return null;
	}
	,initAdditionalScenarios: function() {
		var scenario = new com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario(this._startCell.viewPortCoords,this._gameEngine,this._settings,this);
		this.addAdditionalScenario(scenario);
		this._maxStepValue = scenario.getMaxStep();
	}
	,apply: function() {
		var result = com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype.apply.call(this);
		if(this._ticksDone == this.getDestroyBombDelta()) {
			if(result == null) {
				result = new com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult(this);
			}
			result.destroyedCells.unshift(this._startCell);
		}
		return result;
	}
	,getSubBombClass: function() {
		return com_sq_m3lib_board_items_ColorSubBombNine;
	}
	,getStepParams: function() {
		if(this._step < this._maxStepValue) {
			var stepParams = new com_sq_m3lib_board_explosionScenarios_ScenarioStepParams();
			var i = -1;
			while(++i < this._scenarioCount) stepParams.stepTargetCells = stepParams.stepTargetCells.concat(this._scenarios[i].getTargetCellByStep(this._step + 1));
			stepParams.tickPerStep = this.getTickDelta();
			stepParams.scenarioTicksLeft = this.getTotalTicks() - this._ticksDone;
			return stepParams;
		}
		return com_sq_m3lib_board_explosionScenarios_BaseBombScenario.prototype.getStepParams.call(this);
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario
});
var com_sq_m3lib_board_explosionScenarios_bombScenarios_VerticalLineBombScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.call(this,startCell,assistantCell,gameEngine);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.bombScenarios.VerticalLineBombScenario"] = com_sq_m3lib_board_explosionScenarios_bombScenarios_VerticalLineBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_VerticalLineBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_bombScenarios_VerticalLineBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario;
com_sq_m3lib_board_explosionScenarios_bombScenarios_VerticalLineBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.prototype,{
	initAdditionalScenarios: function() {
		this._maxStepValue = this._gameEngine.board.viewPortSize.height;
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this._starterCoordInViewPort,0,1,this._maxStepValue,this._gameEngine,this._settings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this._starterCoordInViewPort,0,-1,this._maxStepValue,this._gameEngine,this._settings,this));
	}
	,apply: function() {
		var result = com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.prototype.apply.call(this);
		if(this._ticksDone == this.getDestroyBombDelta()) {
			if(result == null) {
				result = new com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult(this);
			}
			result.destroyedCells.unshift(this._startCell);
		}
		return result;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_bombScenarios_VerticalLineBombScenario
});
var com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario = function(gameEngine,boost,params) {
	this._params = null;
	this._params = params;
	this._boost = boost;
	com_sq_m3lib_board_explosionScenarios_ComplexScenario.call(this,params.cell != null?params.cell.viewPortCoords:null,gameEngine,this.getSettings());
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.boosterScenarios.BaseBoosterScenario"] = com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.__super__ = com_sq_m3lib_board_explosionScenarios_ComplexScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_ComplexScenario.prototype,{
	getSettings: function() {
		return { tickDelta : this.getTickDelta(), entityPerTick : 0, bombDestroyDelta : 0};
	}
	,isComplete: function() {
		return true;
	}
	,getTickDelta: function() {
		return 0;
	}
	,getBoost: function() {
		return this._boost;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario
});
var com_sq_m3lib_board_explosionScenarios_boosterScenarios_ColorDestroyedBoosterScenario = function(gameEngine,boost,params) {
	this._changeItemType = false;
	com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.call(this,gameEngine,boost,params);
	this._targetCell = params.cell;
	if(this._targetCell.item == null) {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreError("CoreError_INVALID_PARAMS"));
		return;
	}
	this._changeItemType = js_Boot.__instanceof(this._targetCell.item,com_sq_m3lib_board_items_IBomb);
	if(!js_Boot.__instanceof(this._targetCell.item,com_sq_m3lib_board_items_IColorItem)) {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreError("CoreError_INVALID_PARAMS"));
		return;
	}
	this._targetCellColor = (js_Boot.__cast(this._targetCell.item , com_sq_m3lib_board_items_IColorItem)).color;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.boosterScenarios.ColorDestroyedBoosterScenario"] = com_sq_m3lib_board_explosionScenarios_boosterScenarios_ColorDestroyedBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_ColorDestroyedBoosterScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_ColorDestroyedBoosterScenario.__super__ = com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_ColorDestroyedBoosterScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.prototype,{
	init: function() {
		this._cells = this._gameEngine.board.getItemsForExplosionByColor(this._targetCellColor);
		this._maxStepValue = this._cells.length;
		var i = this._maxStepValue;
		while(--i >= 0) this._cells[i].item.setInAction(this._cells[i],"boosterApplied",this._targetCell,this);
		this.initAdditionalScenarios();
	}
	,initAdditionalScenarios: function() {
		this._currentScenario = new com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemActivationPickerScenario(this._params.cell.viewPortCoords,this._cells,$bind(this,this.onCell),this._gameEngine,this._settings,this);
		this._toBeScenario = new com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemDestroyerScenario(this._params.cell.viewPortCoords,this._cells,$bind(this,this.destroyCellItem),this._gameEngine,this._settings,this);
		this._gameEngine.destroyFactory.addScenarioToList(this._currentScenario);
		this._maxStepValue = this._currentScenario.getMaxStep() + this._toBeScenario.getMaxStep();
	}
	,getTickDelta: function() {
		return 5;
	}
	,onCell: function(cell) {
	}
	,destroyCellItem: function(cell) {
		cell.item.resetInAction();
	}
	,apply: function() {
		if(this._currentScenario.isComplete() && this._toBeScenario != null) {
			this._currentScenario = this._toBeScenario;
			this._gameEngine.destroyFactory.addScenarioToList(this._toBeScenario);
			this._toBeScenario = null;
		}
		return com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.prototype.apply.call(this);
	}
	,isComplete: function() {
		if(this._toBeScenario != null) {
			return false;
		}
		return true;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_boosterScenarios_ColorDestroyedBoosterScenario
});
var com_sq_m3lib_board_explosionScenarios_boosterScenarios_ItemDestroyBoosterScenario = function(gameEngine,boost,params) {
	com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.call(this,gameEngine,boost,params);
	this._targetCell = params.cell;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.boosterScenarios.ItemDestroyBoosterScenario"] = com_sq_m3lib_board_explosionScenarios_boosterScenarios_ItemDestroyBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_ItemDestroyBoosterScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_ItemDestroyBoosterScenario.__super__ = com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_ItemDestroyBoosterScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.prototype,{
	init: function() {
		com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.prototype.init.call(this);
		this.initAdditionalScenarios();
	}
	,initAdditionalScenarios: function() {
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemDestroyerScenario(this._targetCell.viewPortCoords,[this._targetCell],null,this._gameEngine,this._settings,this));
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_boosterScenarios_ItemDestroyBoosterScenario
});
var com_sq_m3lib_board_explosionScenarios_boosterScenarios_CrossDestroyBoosterScenario = function(gameEngine,boost,params) {
	com_sq_m3lib_board_explosionScenarios_boosterScenarios_ItemDestroyBoosterScenario.call(this,gameEngine,boost,params);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.boosterScenarios.CrossDestroyBoosterScenario"] = com_sq_m3lib_board_explosionScenarios_boosterScenarios_CrossDestroyBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_CrossDestroyBoosterScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_CrossDestroyBoosterScenario.__super__ = com_sq_m3lib_board_explosionScenarios_boosterScenarios_ItemDestroyBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_CrossDestroyBoosterScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_boosterScenarios_ItemDestroyBoosterScenario.prototype,{
	getSettings: function() {
		var _this = com_sq_m3lib_coreSettings_CoreSettings.bombScenarioSettings;
		var key = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_CROSS;
		return __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
	}
	,initAdditionalScenarios: function() {
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this._starterCoordInViewPort,1,0,this._gameEngine.board.viewPortSize.width,this._gameEngine,this._settings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this._starterCoordInViewPort,-1,0,this._gameEngine.board.viewPortSize.width,this._gameEngine,this._settings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this._starterCoordInViewPort,0,1,this._gameEngine.board.viewPortSize.height,this._gameEngine,this._settings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this._starterCoordInViewPort,0,-1,this._gameEngine.board.viewPortSize.height,this._gameEngine,this._settings,this));
		this._maxStepValue = com_sq_m3lib_math_CoreMathUtils.maxInt(this._gameEngine.board.viewPortSize.height,this._gameEngine.board.viewPortSize.width);
		com_sq_m3lib_board_explosionScenarios_boosterScenarios_ItemDestroyBoosterScenario.prototype.initAdditionalScenarios.call(this);
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_boosterScenarios_CrossDestroyBoosterScenario
});
var com_sq_m3lib_board_explosionScenarios_boosterScenarios_ExtraHomingBombBoosterScenario = function(gameEngine,boost,params) {
	com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.call(this,gameEngine,boost,params);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.boosterScenarios.ExtraHomingBombBoosterScenario"] = com_sq_m3lib_board_explosionScenarios_boosterScenarios_ExtraHomingBombBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_ExtraHomingBombBoosterScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_ExtraHomingBombBoosterScenario.__super__ = com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_ExtraHomingBombBoosterScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.prototype,{
	apply: function() {
		this._gameEngine.destroyFactory.scenarioFactory.homingBombScenariosCount = com_sq_m3lib_coreSettings_CoreSettings.homingBombParams.boostCount;
		this._gameEngine.destroyFactory.scenarioFactory.boosted = true;
		return com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.prototype.apply.call(this);
	}
	,isComplete: function() {
		return true;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_boosterScenarios_ExtraHomingBombBoosterScenario
});
var com_sq_m3lib_board_explosionScenarios_boosterScenarios_FreeMoveBoosterScenario = function(gameEngine,boost,params) {
	this._isComplete = false;
	com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.call(this,gameEngine,boost,params);
	this._cell = params.cell;
	this._switchCell = params.switchCell;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.boosterScenarios.FreeMoveBoosterScenario"] = com_sq_m3lib_board_explosionScenarios_boosterScenarios_FreeMoveBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_FreeMoveBoosterScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_FreeMoveBoosterScenario.__super__ = com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_FreeMoveBoosterScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.prototype,{
	apply: function() {
		this._isComplete = true;
		var result = new com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult(this);
		this._gameEngine.board.moveFactory.switchItems(this._cell,this._switchCell,this._cell.item,this._switchCell.item,false);
		return result;
	}
	,isComplete: function() {
		return this._isComplete;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_boosterScenarios_FreeMoveBoosterScenario
});
var com_sq_m3lib_board_explosionScenarios_boosterScenarios_StartItemsPackBoosterScenario = function(gameEngine,boost,params) {
	this._isComplete = false;
	com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.call(this,gameEngine,boost,params);
	this._itemDescription = params.itemDescription;
	this._count = params.count;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.boosterScenarios.StartItemsPackBoosterScenario"] = com_sq_m3lib_board_explosionScenarios_boosterScenarios_StartItemsPackBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_StartItemsPackBoosterScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_StartItemsPackBoosterScenario.__super__ = com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario;
com_sq_m3lib_board_explosionScenarios_boosterScenarios_StartItemsPackBoosterScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_boosterScenarios_BaseBoosterScenario.prototype,{
	apply: function() {
		var result = new com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult(this);
		if(this._changed != null) {
			this._isComplete = true;
			var count = this._changed.length;
			while(--count >= 0) {
				this._changed[count].item.resetInAction();
				this._changed[count].item.resetDestroyInfo();
			}
			return result;
		}
		var i = this._count;
		var item;
		this._gameEngine.board.recalculateCells();
		var randomItems = this._gameEngine.board.getSimpleColorItems();
		if(randomItems.length == 0) {
			return result;
		}
		var index;
		var descriptionCopy;
		var cell;
		while(--i >= 0) {
			descriptionCopy = this._gameEngine.itemsFactory.cloneAttributes(this._itemDescription);
			index = com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(randomItems.length);
			item = randomItems[index];
			descriptionCopy.color = item.color;
			HxOverrides.remove(randomItems,item);
			cell = item.cell;
			item.setInAction(cell,"item_replaced",null,this,this._gameEngine.itemsFactory.getItem(descriptionCopy,item.position,false));
			result.changedCells.push(cell);
		}
		this._changed = result.changedCells;
		return result;
	}
	,isComplete: function() {
		return this._isComplete;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_boosterScenarios_StartItemsPackBoosterScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_CrossScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.call(this,startCell,assistantCell,gameEngine);
	this._starterItem.setInAction(startCell,"specialCombo",startCell,this);
	this._assistantItem.setInAction(assistantCell,"specialCombo",startCell,this);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.CrossScenario"] = com_sq_m3lib_board_explosionScenarios_complex_CrossScenario;
com_sq_m3lib_board_explosionScenarios_complex_CrossScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_CrossScenario.__super__ = com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_CrossScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.prototype,{
	init: function() {
		this._assistantItem.destroyByScenario(this._assistantCell,"specialCombo",this._startCell,this);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemDestroyEvent("destroy_items",this._assistantItem,this._assistantItem.destroyInfo.cause));
		com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.prototype.init.call(this);
	}
	,initAdditionalScenarios: function() {
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this._starterCoordInViewPort,1,0,this._gameEngine.board.viewPortSize.width,this._gameEngine,this._settings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this._starterCoordInViewPort,-1,0,this._gameEngine.board.viewPortSize.width,this._gameEngine,this._settings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this._starterCoordInViewPort,0,1,this._gameEngine.board.viewPortSize.height,this._gameEngine,this._settings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this._starterCoordInViewPort,0,-1,this._gameEngine.board.viewPortSize.height,this._gameEngine,this._settings,this));
		this._maxStepValue = com_sq_m3lib_math_CoreMathUtils.maxInt(this._gameEngine.board.viewPortSize.height,this._gameEngine.board.viewPortSize.width);
	}
	,apply: function() {
		var result = com_sq_m3lib_board_explosionScenarios_bombScenarios_LineBombScenario.prototype.apply.call(this);
		if(this._ticksDone == this.getDestroyBombDelta()) {
			if(result == null) {
				result = new com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult(this);
			}
			result.destroyedCells.unshift(this._startCell);
		}
		return result;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_CrossScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_DoubleHomingBombScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombScenario.call(this,startCell,assistantCell,gameEngine);
	this._assistantItem.setInAction(this._assistantCell,"specialCombo",this._startCell,this);
	this._starterItem.setInAction(this._startCell,"specialCombo",startCell,this,this.getItemToPlaceInsteadStarter());
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.DoubleHomingBombScenario"] = com_sq_m3lib_board_explosionScenarios_complex_DoubleHomingBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_DoubleHomingBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_DoubleHomingBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_DoubleHomingBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombScenario.prototype,{
	initAdditionalScenarios: function() {
		var i = -1;
		var length = this._gameEngine.destroyFactory.scenarioFactory.boosted?this._settings.params.boosterDoubleCount:this._settings.params.doubleCount;
		while(++i < length) this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario(this._startCell,this._startCell,this._gameEngine,this._settings,this));
	}
	,init: function() {
		this._assistantItem.destroyByScenario(this._assistantCell,"specialCombo",this._startCell,this);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemDestroyEvent("destroy_items",this._assistantItem,this._assistantItem.destroyInfo.cause));
		com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombScenario.prototype.init.call(this);
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_DoubleHomingBombScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_DoubleNineBombScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario.call(this,startCell,assistantCell,gameEngine);
	this._assistantItem.setInAction(this._assistantCell,"specialCombo",startCell,this);
	this._starterItem.setInAction(this._startCell,"specialCombo",startCell,this,this.getItemToPlaceInsteadStarter());
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.DoubleNineBombScenario"] = com_sq_m3lib_board_explosionScenarios_complex_DoubleNineBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_DoubleNineBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_DoubleNineBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario;
com_sq_m3lib_board_explosionScenarios_complex_DoubleNineBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario.prototype,{
	init: function() {
		if(this._assistantCell != this._startCell) {
			this._assistantItem.destroyByScenario(this._assistantCell,"specialCombo",this._startCell,this);
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemDestroyEvent("destroy_items",this._assistantItem,this._assistantItem.destroyInfo.cause));
		}
		com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario.prototype.init.call(this);
	}
	,getSubBombClass: function() {
		return com_sq_m3lib_board_items_ColorSubBombDoubleNine;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_DoubleNineBombScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario = function(startCell,assistantCell,gameEngine) {
	this._assistantScenarioSettings = null;
	if(!js_Boot.__instanceof(startCell.item,com_sq_m3lib_board_items_HomingBombItem)) {
		if(js_Boot.__instanceof(assistantCell.item,com_sq_m3lib_board_items_HomingBombItem)) {
			var tmp = startCell;
			startCell = assistantCell;
			assistantCell = tmp;
		} else {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreError("CoreError_INVALID_PARAMS"));
			return;
		}
	}
	com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario.call(this,startCell,assistantCell,gameEngine);
	this._starterItem.setInAction(startCell,"specialCombo",startCell,this);
	com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemDestroyEvent("set_items_in_action",this._starterItem,this._starterItem.destroyInfo.cause));
	this._assistantItem.setInAction(assistantCell,"specialCombo",startCell,this);
	com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemDestroyEvent("set_items_in_action",this._assistantItem,this._assistantItem.destroyInfo.cause));
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.SpecialHomingBombScenario"] = com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario;
com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario.prototype,{
	initAdditionalScenarios: function() {
		if(this._gameEngine.destroyFactory.scenarioFactory.boosted) {
			this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario(this._startCell,this._startCell,this._gameEngine,this._settings,this));
		}
	}
	,onTicksChanged: function(result) {
		com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario.prototype.onTicksChanged.call(this,result);
		if(this._ticksDone == this.getDestroyBombDelta()) {
			if(result == null) {
				result = new com_sq_m3lib_board_explosionScenarios_ScenarioApplyResult(this);
			}
			result.destroyedCells.unshift(this._startCell);
			result.destroyedCells.unshift(this._assistantCell);
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.STEP,this,this.getDestroyStarterParams()));
		}
		if(this._assistantScenarioSettings != null && (this._ticksDone - this.getDestroyBombDelta() + 1) % this._assistantScenarioSettings.tickDelta == 0) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.STEP,this,this.getStepParams()));
		}
	}
	,getDestroyStarterParams: function() {
		if(this._step <= this._maxStepValue) {
			var stepParams = new com_sq_m3lib_board_explosionScenarios_ScenarioStepParams();
			stepParams.stepTargetCells = [this.targetCell];
			stepParams.tickPerStep = this.getTickDelta() - this.getDestroyBombDelta();
			stepParams.scenarioTicksLeft = this.getTotalTicks() - this._ticksDone;
			return stepParams;
		}
		return com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario.prototype.getDestroyStarterParams.call(this);
	}
	,getStepParams: function() {
		var stepParams = new com_sq_m3lib_board_explosionScenarios_ScenarioStepParams();
		var i = -1;
		var cells;
		while(++i < this._scenarioCount) {
			var tmp = this._scenarios[i].getStep() + 1;
			cells = this._scenarios[i].getTargetCellByStep(tmp);
			if(cells == null) {
				continue;
			}
			stepParams.stepTargetCells = stepParams.stepTargetCells.concat(cells);
			stepParams.tickPerStep = this._scenarios[i].getTickDelta();
			stepParams.scenarioTicksLeft = this.getTotalTicks() - this._ticksDone;
		}
		return stepParams;
	}
	,onStepChanged: function(result) {
		com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario.prototype.onStepChanged.call(this,result);
		this.addSpecialScenarios();
	}
	,addSpecialScenarios: function() {
		var stepParams = new com_sq_m3lib_board_explosionScenarios_ScenarioStepParams();
		stepParams.tickPerStep = this._assistantScenarioSettings.tickDelta;
		stepParams.scenarioTicksLeft = this.getTotalTicks() - this._ticksDone;
		var i = -1;
		while(++i < this._scenarioCount) stepParams.stepTargetCells = stepParams.stepTargetCells.concat(this._scenarios[i].getTargetCellByStep(1));
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreScenarioEvent(com_sq_m3lib_events_CoreScenarioEvent.STEP,this,stepParams));
	}
	,needEvent: function() {
		return true;
	}
	,isComplete: function() {
		var i = this._scenarioCount;
		while(--i >= 0) if(!this._scenarios[i].isComplete()) {
			return false;
		}
		return com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombSingleScenario.prototype.isComplete.call(this);
	}
	,needEventOnInit: function() {
		return true;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_HorizonalLineHomingBombScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario.call(this,startCell,assistantCell,gameEngine);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.HorizonalLineHomingBombScenario"] = com_sq_m3lib_board_explosionScenarios_complex_HorizonalLineHomingBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_HorizonalLineHomingBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_HorizonalLineHomingBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_HorizonalLineHomingBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario.prototype,{
	addSpecialScenarios: function() {
		var _this = com_sq_m3lib_coreSettings_CoreSettings.bombScenarioSettings;
		var key = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HORIZONTAL;
		this._assistantScenarioSettings = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this.targetCell.viewPortCoords,1,0,this._gameEngine.board.viewPortSize.width,this._gameEngine,this._assistantScenarioSettings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this.targetCell.viewPortCoords,-1,0,this._gameEngine.board.viewPortSize.width,this._gameEngine,this._assistantScenarioSettings,this));
		com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario.prototype.addSpecialScenarios.call(this);
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_HorizonalLineHomingBombScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_NineNearHomingBombScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario.call(this,startCell,assistantCell,gameEngine);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.NineNearHomingBombScenario"] = com_sq_m3lib_board_explosionScenarios_complex_NineNearHomingBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_NineNearHomingBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_NineNearHomingBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_NineNearHomingBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario.prototype,{
	addSpecialScenarios: function() {
		var _this = com_sq_m3lib_coreSettings_CoreSettings.bombScenarioSettings;
		var key = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_9;
		this._assistantScenarioSettings = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario(this.targetCell.viewPortCoords,this._gameEngine,this._assistantScenarioSettings,this));
		com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario.prototype.addSpecialScenarios.call(this);
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_NineNearHomingBombScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_TrippleCrossScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_complex_CrossScenario.call(this,startCell,assistantCell,gameEngine);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.TrippleCrossScenario"] = com_sq_m3lib_board_explosionScenarios_complex_TrippleCrossScenario;
com_sq_m3lib_board_explosionScenarios_complex_TrippleCrossScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_TrippleCrossScenario.__super__ = com_sq_m3lib_board_explosionScenarios_complex_CrossScenario;
com_sq_m3lib_board_explosionScenarios_complex_TrippleCrossScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_complex_CrossScenario.prototype,{
	initAdditionalScenarios: function() {
		var i = 0;
		var maxI = this._settings.params.rows * 0.5 | 0;
		while(++i <= maxI) {
			this.addLinesForCoordShift(i);
			this.addLinesForCoordShift(-i);
		}
		com_sq_m3lib_board_explosionScenarios_complex_CrossScenario.prototype.initAdditionalScenarios.call(this);
	}
	,addLinesForCoordShift: function(i) {
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(new com_sq_m3lib_geometry_Coord(this._starterCoordInViewPort.x,this._starterCoordInViewPort.y + i),1,0,this._gameEngine.board.viewPortSize.width,this._gameEngine,this._settings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(new com_sq_m3lib_geometry_Coord(this._starterCoordInViewPort.x,this._starterCoordInViewPort.y + i),-1,0,this._gameEngine.board.viewPortSize.width,this._gameEngine,this._settings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(new com_sq_m3lib_geometry_Coord(this._starterCoordInViewPort.x + i,this._starterCoordInViewPort.y),0,1,this._gameEngine.board.viewPortSize.height,this._gameEngine,this._settings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(new com_sq_m3lib_geometry_Coord(this._starterCoordInViewPort.x + i,this._starterCoordInViewPort.y),0,-1,this._gameEngine.board.viewPortSize.height,this._gameEngine,this._settings,this));
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_TrippleCrossScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_VerticalLineHomingBombSingleScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario.call(this,startCell,assistantCell,gameEngine);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.VerticalLineHomingBombSingleScenario"] = com_sq_m3lib_board_explosionScenarios_complex_VerticalLineHomingBombSingleScenario;
com_sq_m3lib_board_explosionScenarios_complex_VerticalLineHomingBombSingleScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_VerticalLineHomingBombSingleScenario.__super__ = com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_VerticalLineHomingBombSingleScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario.prototype,{
	addSpecialScenarios: function() {
		var _this = com_sq_m3lib_coreSettings_CoreSettings.bombScenarioSettings;
		var key = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_VERTICAL;
		this._assistantScenarioSettings = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this.targetCell.viewPortCoords,0,1,this._gameEngine.board.viewPortSize.height,this._gameEngine,this._assistantScenarioSettings,this));
		this.addAdditionalScenario(new com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario(this.targetCell.viewPortCoords,0,-1,this._gameEngine.board.viewPortSize.height,this._gameEngine,this._assistantScenarioSettings,this));
		com_sq_m3lib_board_explosionScenarios_complex_SpecialHomingBombScenario.prototype.addSpecialScenarios.call(this);
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_VerticalLineHomingBombSingleScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_colorPickers_MegaBoomScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_complex_DoubleNineBombScenario.call(this,startCell,assistantCell,gameEngine);
	this._starterItem.setInAction(startCell,"specialCombo",startCell,this);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.colorPickers.MegaBoomScenario"] = com_sq_m3lib_board_explosionScenarios_complex_colorPickers_MegaBoomScenario;
com_sq_m3lib_board_explosionScenarios_complex_colorPickers_MegaBoomScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_colorPickers_MegaBoomScenario.__super__ = com_sq_m3lib_board_explosionScenarios_complex_DoubleNineBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_colorPickers_MegaBoomScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_complex_DoubleNineBombScenario.prototype,{
	getSubBombClass: function() {
		return null;
	}
	,willDestroySomethingInCell: function(cell) {
		return true;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_colorPickers_MegaBoomScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_colorPickers_ColorPickerMultiColoringBombScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_complex_colorPickers_MegaBoomScenario.call(this,startCell,assistantCell,gameEngine);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.colorPickers.ColorPickerMultiColoringBombScenario"] = com_sq_m3lib_board_explosionScenarios_complex_colorPickers_ColorPickerMultiColoringBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_colorPickers_ColorPickerMultiColoringBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_colorPickers_ColorPickerMultiColoringBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_complex_colorPickers_MegaBoomScenario;
com_sq_m3lib_board_explosionScenarios_complex_colorPickers_ColorPickerMultiColoringBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_complex_colorPickers_MegaBoomScenario.prototype,{
	initAdditionalScenarios: function() {
		var scenario = new com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusResetBlockerScenario(this._startCell.viewPortCoords,this._gameEngine,this._settings,this);
		this.addAdditionalScenario(scenario);
		this._maxStepValue = scenario.getMaxStep();
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_colorPickers_ColorPickerMultiColoringBombScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_colorPickers_SpecialColorPickerScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario.call(this,startCell,assistantCell,gameEngine);
	this._assistantDescription = this._assistantItem.getCurrentItemDescription();
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.colorPickers.SpecialColorPickerScenario"] = com_sq_m3lib_board_explosionScenarios_complex_colorPickers_SpecialColorPickerScenario;
com_sq_m3lib_board_explosionScenarios_complex_colorPickers_SpecialColorPickerScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_colorPickers_SpecialColorPickerScenario.__super__ = com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_colorPickers_SpecialColorPickerScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario.prototype,{
	init: function() {
		com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario.prototype.init.call(this);
	}
	,initAdditionalScenarios: function() {
		this._currentScenario = new com_sq_m3lib_board_explosionScenarios_baseScenarios_SpecialItemPickerScenario(this._starterCoordInViewPort,this._cells,$bind(this,this.changeCellItem),this._gameEngine,this._settings,this);
		this._toBeScenario = new com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemDestroyerScenario(this._starterCoordInViewPort,this._cells,$bind(this,this.destroyCellItem),this._gameEngine,this._settings,this);
		this.addAdditionalScenario(this._currentScenario);
		this._maxStepValue = this._currentScenario.getMaxStep() + this._toBeScenario.getMaxStep();
	}
	,changeCellItem: function(cell) {
		var newItemDescription = this.getNewItemDescription(cell);
		var destroyInfo = cell.item.destroyInfo;
		var newItem = this._gameEngine.itemsFactory.getItem(newItemDescription,this._gameEngine.board.getCellBoardCoords(cell),false);
		newItem.setInAction(cell,destroyInfo.cause,destroyInfo.starter,this);
		destroyInfo.newItem = newItem;
	}
	,destroyCellItem: function(cell) {
		cell.item.resetInAction();
	}
	,apply: function() {
		if(this._currentScenario.isComplete() && this._toBeScenario != null) {
			this.removeAdditionalScenario(this._currentScenario);
			this.addAdditionalScenario(this._toBeScenario);
			this._currentScenario = this._toBeScenario;
			this._toBeScenario = null;
			this._step = 0;
			this.onAdditionalScenariosAdded();
		}
		return com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario.prototype.apply.call(this);
	}
	,onDestroyStarter: function() {
		return [this._startCell];
	}
	,getDestroyBombDelta: function() {
		return this._maxStepValue * this._settings.tickDelta + this._settings.bombDestroyDelta;
	}
	,getNewItemDescription: function(cell) {
		return !js_Boot.__instanceof(cell.item,com_sq_m3lib_board_items_IBomb) && cell.item.isCommonItem()?this.getSpecialDescription():cell.item.getCurrentItemDescription().clone();
	}
	,getSpecialDescription: function() {
		var newItemDescription = this._assistantDescription.clone();
		var randomizedClassName = com_sq_m3lib_board_ItemsFactoryDictionary.getRandomBombClassByItem(this._assistantItem);
		if(randomizedClassName != null) {
			newItemDescription.className = randomizedClassName;
		}
		return newItemDescription;
	}
	,willDestroySomethingInCell: function(cell) {
		return this._cells.indexOf(cell) != -1;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_colorPickers_SpecialColorPickerScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_DoubleMultiColoringBombScenario = function(startCell,assistantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario.call(this,startCell,assistantCell,gameEngine);
	if(this._assistantItem != null) {
		this._assistantItem.setInAction(assistantCell,"specialCombo",startCell,this);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreItemDestroyEvent("set_items_in_action",this._assistantItem,this._assistantItem.destroyInfo.cause));
	}
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.coloringBomb.DoubleMultiColoringBombScenario"] = com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_DoubleMultiColoringBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_DoubleMultiColoringBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_DoubleMultiColoringBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_DoubleMultiColoringBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario.prototype,{
	getCellsToChange: function() {
		return this._gameEngine.board.boardUtils.getAllItemsExceptColor(this.switchToColor);
	}
	,onDestroyStarter: function() {
		var i = this._cells.length;
		while(--i >= 0) {
			this._cells[i].wasChanged = true;
			if(this._cells[i].item != null) {
				this._cells[i].item.resetInAction();
				this._cells[i].item.resetDestroyInfo();
			}
		}
		return [this._startCell,this._assistantCell];
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_DoubleMultiColoringBombScenario
});
var com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_SpecialMultiColoringBombScenario = function(startCell,assitantCell,gameEngine) {
	com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario.call(this,startCell,assitantCell,gameEngine);
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.complex.coloringBomb.SpecialMultiColoringBombScenario"] = com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_SpecialMultiColoringBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_SpecialMultiColoringBombScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_SpecialMultiColoringBombScenario.__super__ = com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario;
com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_SpecialMultiColoringBombScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario.prototype,{
	getNewItemDescription: function(cell) {
		var newItemDescription = js_Boot.__instanceof(cell.item,com_sq_m3lib_board_items_IBomb) || !cell.item.isCommonItem()?cell.item.getCurrentItemDescription().clone():this.getSpecialDescription();
		newItemDescription.color = this.switchToColor;
		return newItemDescription;
	}
	,initAdditionalScenarios: function() {
		this._step = 0;
		this._currentScenario = new com_sq_m3lib_board_explosionScenarios_baseScenarios_SpecialItemPickerScenario(this._starterCoordInViewPort,this._cells,$bind(this,this.onCell),this._gameEngine,this._settings,this);
		this.addAdditionalScenario(this._currentScenario);
		this._maxStepValue = this._currentScenario.getMaxStep();
		this.onAdditionalScenariosAdded();
	}
	,destroyCellItem: function(cell) {
		cell.item.resetInAction();
	}
	,onDestroyStarter: function() {
		var result = [this._startCell];
		var count = 1;
		var i = this._cells.length;
		while(--i >= 0) {
			if(this._cells[i].item != null) {
				this._cells[i].item.resetInAction();
			}
			result[count] = this._cells[i];
			++count;
		}
		return result;
	}
	,getCellsToChange: function() {
		var mainColorCells = this._gameEngine.board.getItemsForExplosionByColor(this.switchToColor);
		return this._gameEngine.board.getItemsForExplosionByColor(this.assistantColor).concat(mainColorCells);
	}
	,getSpecialDescription: function() {
		var newItemDescription = this._assistantItem.getCurrentItemDescription().clone();
		var randomizedClassName = com_sq_m3lib_board_ItemsFactoryDictionary.getRandomBombClassByItem(this._assistantItem);
		if(randomizedClassName != null) {
			newItemDescription.className = randomizedClassName;
		}
		return newItemDescription;
	}
	,willDestroySomethingInCell: function(cell) {
		return this._cells.indexOf(cell) != -1;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_SpecialMultiColoringBombScenario
});
var com_sq_m3lib_board_explosionScenarios_finishLevel_DelayedInitItemDestroyScenario = function(coord,itemDescriptions,onCell,gameEngine,settings,mainScenario) {
	com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemDestroyerScenario.call(this,coord,[],onCell,gameEngine,settings,mainScenario);
	this._itemDescriptions = itemDescriptions;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.finishLevel.DelayedInitItemDestroyScenario"] = com_sq_m3lib_board_explosionScenarios_finishLevel_DelayedInitItemDestroyScenario;
com_sq_m3lib_board_explosionScenarios_finishLevel_DelayedInitItemDestroyScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_finishLevel_DelayedInitItemDestroyScenario.__super__ = com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemDestroyerScenario;
com_sq_m3lib_board_explosionScenarios_finishLevel_DelayedInitItemDestroyScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_baseScenarios_ItemDestroyerScenario.prototype,{
	init: function() {
		this._maxStepValue = 0;
		var items = this._gameEngine.board.boardUtils.getItemsOnBoard(this._itemDescriptions);
		var j = items.length;
		while(--j >= 0) {
			this._cells[this._maxStepValue] = items[j].cell;
			this._maxStepValue++;
		}
		this.sortCells();
	}
	,sortCells: function() {
		haxe_ds_ArraySort.sort(this._cells,function(cell1,cell2) {
			var delta = cell1.coords.y - cell2.coords.y;
			if(delta == 0) {
				delta = cell1.coords.x - cell2.coords.x;
			}
			return delta;
		});
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_finishLevel_DelayedInitItemDestroyScenario
});
var com_sq_m3lib_board_explosionScenarios_finishLevel_FinishLevelBoostScenario = function(gameEngine) {
	this.alreadyPlaced = 0;
	this._isComplete = false;
	this._destroySettings = com_sq_m3lib_coreSettings_CoreSettings.levelFinishParams;
	com_sq_m3lib_board_explosionScenarios_ComplexScenario.call(this,null,gameEngine,this._destroySettings);
	this.preparePlacements();
	this.prepareDestroyQueue();
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.finishLevel.FinishLevelBoostScenario"] = com_sq_m3lib_board_explosionScenarios_finishLevel_FinishLevelBoostScenario;
com_sq_m3lib_board_explosionScenarios_finishLevel_FinishLevelBoostScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_finishLevel_FinishLevelBoostScenario.__super__ = com_sq_m3lib_board_explosionScenarios_ComplexScenario;
com_sq_m3lib_board_explosionScenarios_finishLevel_FinishLevelBoostScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_ComplexScenario.prototype,{
	init: function() {
		this._step = 0;
		this._maxStepValue = 2147483647;
		this._toBeScenarios = [];
		this.addColorTpSpawners();
		this.addScenariosForNextIteration();
	}
	,addScenariosForNextIteration: function() {
		var i = this._gameEngine.targetsManager.getMovesLeft();
		if(i > 0) {
			var queueLength = this._destroySettings.destroyQueue.length;
			var maxFromItemCount = this._gameEngine.board.boardUtils.getAllItemsExceptColor(-1,true,true).length * this._destroySettings.maxPerStepMultiplier / this._destroySettings.maxPerStepDivider | 0;
			maxFromItemCount = com_sq_m3lib_math_CoreMathUtils.maxInt(maxFromItemCount,this._destroySettings.minPerStep);
			var movesOnIteration = com_sq_m3lib_math_CoreMathUtils.minInt(i,maxFromItemCount);
			this._toBeScenarios.push(new com_sq_m3lib_board_explosionScenarios_finishLevel_PlaceSpecialItemsScenario(this._gameEngine,this.alreadyPlaced,movesOnIteration,this.placementRules,this._destroySettings,this));
			var j = -1;
			while(++j < queueLength) this._toBeScenarios.push(new com_sq_m3lib_board_explosionScenarios_finishLevel_DelayedInitItemDestroyScenario(null,this._destroySettings.destroyQueue[j],null,this._gameEngine,this._destroySettings,this));
			this.alreadyPlaced += movesOnIteration;
			return true;
		}
		return false;
	}
	,isComplete: function() {
		return this._isComplete;
	}
	,onStepChanged: function(result) {
		if(this.isPaused()) {
			this._step--;
			return;
		}
		if(this._currentScenario == null || this._currentScenario.isComplete()) {
			if(this._toBeScenarios.length > 0) {
				this._currentScenario = this._toBeScenarios[0];
				this.addAdditionalScenario(this._currentScenario);
				this._toBeScenarios.shift();
				this.paused = com_sq_m3lib_board_ScenarioPauseReason.WAIT_STABILIZATION;
			} else {
				this.tryComplete();
			}
		}
		com_sq_m3lib_board_explosionScenarios_ComplexScenario.prototype.onStepChanged.call(this,result);
	}
	,tryComplete: function() {
		if(this._gameEngine.destroyFactory.explodeOnStable.length > 0) {
			this.paused = com_sq_m3lib_board_ScenarioPauseReason.WAIT_STABILIZATION_EXPLOSION;
			return;
		}
		if(this.addScenariosForNextIteration()) {
			return;
		}
		if(this._gameEngine.board.boardUtils.getItemOnBoardCount(this.destroyItemsBeforeComplete) > 0) {
			var j = -1;
			var queueLength = this._destroySettings.destroyQueue.length;
			while(++j < queueLength) this._toBeScenarios.push(new com_sq_m3lib_board_explosionScenarios_finishLevel_DelayedInitItemDestroyScenario(null,this._destroySettings.destroyQueue[j],null,this._gameEngine,this._destroySettings,this));
			if(this._toBeScenarios.length > 0) {
				this._currentScenario = this._toBeScenarios[0];
				this.addAdditionalScenario(this._currentScenario);
				this._toBeScenarios.shift();
				this.paused = com_sq_m3lib_board_ScenarioPauseReason.WAIT_STABILIZATION;
			}
		} else {
			this._isComplete = true;
		}
	}
	,resetPausedState: function() {
		if(this.paused[1] == 1) {
			this.paused = com_sq_m3lib_board_ScenarioPauseReason.WAIT_STABILIZATION;
		} else {
			com_sq_m3lib_board_explosionScenarios_ComplexScenario.prototype.resetPausedState.call(this);
		}
	}
	,preparePlacements: function() {
		this.placementRules = this._destroySettings.placementRules;
		haxe_ds_ArraySort.sort(this.placementRules,function(val1,val2) {
			return val1.iteration - val2.iteration;
		});
	}
	,prepareDestroyQueue: function() {
		this.destroyItemsBeforeComplete = [];
		var j = this._destroySettings.destroyQueue.length;
		while(--j >= 0) this.destroyItemsBeforeComplete = this.destroyItemsBeforeComplete.concat(this._destroySettings.destroyQueue[j]);
	}
	,free: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreFinishLevelBoostEvent("finish_level_boost_complete"));
	}
	,addColorTpSpawners: function() {
		var _g = 0;
		var _g1 = this._gameEngine.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			var config = spawner.getSpawnConfig();
			if(config.length < this._gameEngine.getGameParams().totalMaxCommonColors) {
				var color = 0;
				while(color < this._gameEngine.getGameParams().totalMaxCommonColors) {
					var j = 0;
					var colorExist = false;
					while(j < config.length) {
						if(config[j].itemParams.color == color) {
							colorExist = true;
							break;
						}
						++j;
					}
					if(!colorExist) {
						break;
					}
					++color;
				}
				config.push({ itemParams : { className : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SIMPLE, color : color}, weight : 1});
			}
		}
	}
	,removeSuperItemsSpawn: function() {
		this._gameEngine.spawnFactory.clearSpecialSpawners();
		var _g = 0;
		var _g1 = this._gameEngine.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			this.removeSuperItemsFromSpawner(spawner);
		}
	}
	,removeSuperItemsFromSpawner: function(spawner) {
		if(spawner.canSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION)) {
			spawner.removeSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION);
		}
		if(spawner.canSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_COLOR_BOMB_DESCRIPTION)) {
			spawner.removeSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_COLOR_BOMB_DESCRIPTION);
		}
		if(spawner.canSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_BOMB9_DESCRIPTION)) {
			spawner.removeSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_BOMB9_DESCRIPTION);
		}
		if(spawner.canSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_VERTICAL_BOMB_DESCRIPTION)) {
			spawner.removeSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_VERTICAL_BOMB_DESCRIPTION);
		}
		if(spawner.canSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HORIZONTAL_BOMB_DESCRIPTION)) {
			spawner.removeSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HORIZONTAL_BOMB_DESCRIPTION);
		}
		if(spawner.canSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_MULTICOLORING_BOMB_DESCRIPTION)) {
			spawner.removeSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_MULTICOLORING_BOMB_DESCRIPTION);
		}
		if(spawner.canSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_GRAVITY_CHANGER_ITEM_DESCRIPTION)) {
			spawner.removeSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_GRAVITY_CHANGER_ITEM_DESCRIPTION);
		}
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_finishLevel_FinishLevelBoostScenario
});
var com_sq_m3lib_board_explosionScenarios_finishLevel_PlaceSpecialItemsScenario = function(gameEngine,placedCount,toPlaceCount,rules,settings,mainScenario) {
	this._placedCount = 0;
	com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.call(this,null,gameEngine,settings,mainScenario);
	this._destroySettings = settings;
	this._placementRules = rules;
	this._placedCount = placedCount;
	this._maxStepValue = toPlaceCount;
};
$hxClasses["com.sq.m3lib.board.explosionScenarios.finishLevel.PlaceSpecialItemsScenario"] = com_sq_m3lib_board_explosionScenarios_finishLevel_PlaceSpecialItemsScenario;
com_sq_m3lib_board_explosionScenarios_finishLevel_PlaceSpecialItemsScenario.__name__ = true;
com_sq_m3lib_board_explosionScenarios_finishLevel_PlaceSpecialItemsScenario.__super__ = com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario;
com_sq_m3lib_board_explosionScenarios_finishLevel_PlaceSpecialItemsScenario.prototype = $extend(com_sq_m3lib_board_explosionScenarios_baseScenarios_BaseScenario.prototype,{
	init: function() {
		this.itemPlaces = this._gameEngine.board.boardUtils.getAllItemsExceptColor(-1,true,true);
	}
	,onStepChanged: function(result) {
		this._placedCount++;
		var length = this.itemPlaces.length;
		if(length == 0) {
			this._gameEngine.targetsManager.changeMovesCount(this._gameEngine.targetsManager.getMovesDone() + this._gameEngine.targetsManager.getMovesLeft());
			this._step = this._maxStepValue;
			return;
		}
		var cell = this.itemPlaces[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(length)];
		HxOverrides.remove(this.itemPlaces,cell);
		var descriptionCopy = this._gameEngine.itemsFactory.cloneAttributes(this.getDescriptionByCount());
		if(descriptionCopy == null) {
			return;
		}
		descriptionCopy.color = cell.item.getColor();
		cell.item.setInAction(cell,"finishLevelBoost",null,this,this._gameEngine.itemsFactory.getItem(descriptionCopy,cell.item.position,false));
		result.changedCells.push(cell);
		this._gameEngine.targetsManager.changeMovesCount(this._gameEngine.targetsManager.getMovesDone() + 1);
		this._gameEngine.scoreFactory.addSimpleItemScore(cell.item,this._destroySettings.elementScore,"finishLevelBoost");
	}
	,getDescriptionByCount: function() {
		var i = this._placementRules.length;
		var placedCountReminder = this._placedCount + 1;
		while(--i >= 0) if(placedCountReminder % this._placementRules[i].iteration == 0) {
			break;
		}
		if(i < 0) {
			return null;
		}
		var possibleItems = this._placementRules[i].descriptions;
		if(possibleItems == null || possibleItems.length == 0) {
			return null;
		}
		return possibleItems[com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(possibleItems.length)];
	}
	,isComplete: function() {
		return this._step >= this._maxStepValue;
	}
	,getTickDelta: function() {
		return this._destroySettings.placeTickDelta;
	}
	,__class__: com_sq_m3lib_board_explosionScenarios_finishLevel_PlaceSpecialItemsScenario
});
var com_sq_m3lib_board_items_BaseItem = function() {
	this.inAction = false;
	this.disabled = false;
	this.speed = 0;
	this._alias = "";
	this.position = new com_sq_m3lib_geometry_Coord();
	com_sq_m3lib_board_BaseBoardAnimatedObject.call(this);
};
$hxClasses["com.sq.m3lib.board.items.BaseItem"] = com_sq_m3lib_board_items_BaseItem;
com_sq_m3lib_board_items_BaseItem.__name__ = true;
com_sq_m3lib_board_items_BaseItem.__super__ = com_sq_m3lib_board_BaseBoardAnimatedObject;
com_sq_m3lib_board_items_BaseItem.prototype = $extend(com_sq_m3lib_board_BaseBoardAnimatedObject.prototype,{
	setInitialAttributes: function(params) {
	}
	,setAttributes: function(params) {
		this._alias = params.className;
	}
	,getPosition: function() {
		return this.position;
	}
	,getItemDescription: function() {
		var result = new com_sq_m3lib_board_ItemFactoryDescription();
		result.className = this.getItemAlias();
		return result;
	}
	,getItemAlias: function() {
		if(this._alias == "") {
			return com_sq_m3lib_board_ItemsFactoryDictionary.getByClass(js_Boot.getClass(this));
		}
		return this._alias;
	}
	,getCurrentItemDescription: function() {
		return this.getItemDescription();
	}
	,isStable: function() {
		return this.speed == 0;
	}
	,canSelect: function() {
		return false;
	}
	,isExplosionStopper: function() {
		return false;
	}
	,canExplode: function() {
		return true;
	}
	,canShuffle: function() {
		return false;
	}
	,destroyByScenario: function(cell,cause,starter,scenario) {
		var scenarioDestroyInfo = new com_sq_m3lib_board_DestroyInfo();
		scenarioDestroyInfo.cell = cell;
		scenarioDestroyInfo.cause = cause;
		scenarioDestroyInfo.starter = starter;
		scenarioDestroyInfo.setScenario(scenario);
		this.setDestroy(scenarioDestroyInfo);
	}
	,setDestroy: function(newDestroyInfo,needCollapse) {
		if(needCollapse == null) {
			needCollapse = false;
		}
		this.inAction = false;
		this.disabled = true;
		this.isMoving = false;
		if(this.destroyInfo == null) {
			this.destroyInfo = newDestroyInfo;
		}
		if(needCollapse) {
			this.setAnimationLength(com_sq_m3lib_board_ItemAnimationFactory.getLength("simple_collapse"));
		} else {
			this.setAnimationLength(com_sq_m3lib_board_ItemAnimationFactory.getLength("simple_destroy"));
		}
	}
	,setInAction: function(cell,cause,starter,scenario,newItem) {
		this.inAction = true;
		this.destroyInfo = new com_sq_m3lib_board_DestroyInfo(cell,cause,starter,scenario,newItem);
	}
	,resetInAction: function() {
		this.inAction = false;
	}
	,resetDestroyInfo: function() {
		this.destroyInfo = null;
	}
	,getScore: function() {
		var scoreAlias = this.getItemAlias();
		var _this = com_sq_m3lib_board_ScoreDictionary.scores;
		if(!(__map_reserved[scoreAlias] != null?_this.existsReserved(scoreAlias):_this.h.hasOwnProperty(scoreAlias))) {
			scoreAlias = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BASE;
		}
		var _this1 = com_sq_m3lib_board_ScoreDictionary.scores;
		return __map_reserved[scoreAlias] != null?_this1.getReserved(scoreAlias):_this1.h[scoreAlias];
	}
	,hasExplosionScenario: function() {
		return false;
	}
	,explodeOnBoardStabilization: function() {
		return false;
	}
	,isCommonItem: function() {
		return true;
	}
	,destroyOnNearDestroyed: function() {
		return false;
	}
	,getLogData: function() {
		return this.getCurrentItemDescription();
	}
	,getCell: function() {
		return this.cell;
	}
	,getColor: function() {
		return -1;
	}
	,__class__: com_sq_m3lib_board_items_BaseItem
});
var com_sq_m3lib_board_items_IColorItem = function() { };
$hxClasses["com.sq.m3lib.board.items.IColorItem"] = com_sq_m3lib_board_items_IColorItem;
com_sq_m3lib_board_items_IColorItem.__name__ = true;
com_sq_m3lib_board_items_IColorItem.prototype = {
	__class__: com_sq_m3lib_board_items_IColorItem
};
var com_sq_m3lib_board_items_ColorItem = function() {
	com_sq_m3lib_board_items_BaseItem.call(this);
	this._initialColor = -1;
};
$hxClasses["com.sq.m3lib.board.items.ColorItem"] = com_sq_m3lib_board_items_ColorItem;
com_sq_m3lib_board_items_ColorItem.__name__ = true;
com_sq_m3lib_board_items_ColorItem.__interfaces__ = [com_sq_m3lib_board_items_IColorItem];
com_sq_m3lib_board_items_ColorItem.__super__ = com_sq_m3lib_board_items_BaseItem;
com_sq_m3lib_board_items_ColorItem.prototype = $extend(com_sq_m3lib_board_items_BaseItem.prototype,{
	setInitialAttributes: function(params) {
		com_sq_m3lib_board_items_BaseItem.prototype.setAttributes.call(this,params);
		this._initialColor = params.color;
	}
	,setAttributes: function(params) {
		com_sq_m3lib_board_items_BaseItem.prototype.setAttributes.call(this,params);
		this.color = params.color;
	}
	,getItemDescription: function() {
		var result = com_sq_m3lib_board_items_BaseItem.prototype.getItemDescription.call(this);
		result.color = this._initialColor;
		return result;
	}
	,getCurrentItemDescription: function() {
		var result = com_sq_m3lib_board_items_BaseItem.prototype.getItemDescription.call(this);
		result.color = this.color;
		return result;
	}
	,isRandomColor: function() {
		return this.color == -1;
	}
	,isRandomConfigColor: function() {
		return this._initialColor == -1;
	}
	,canSelect: function() {
		return true;
	}
	,canShuffle: function() {
		return true;
	}
	,getColor: function() {
		return this.color;
	}
	,__class__: com_sq_m3lib_board_items_ColorItem
});
var com_sq_m3lib_board_items_IBomb = function() { };
$hxClasses["com.sq.m3lib.board.items.IBomb"] = com_sq_m3lib_board_items_IBomb;
com_sq_m3lib_board_items_IBomb.__name__ = true;
com_sq_m3lib_board_items_IBomb.prototype = {
	__class__: com_sq_m3lib_board_items_IBomb
};
var com_sq_m3lib_board_items_BaseColorBomb = function() {
	com_sq_m3lib_board_items_ColorItem.call(this);
};
$hxClasses["com.sq.m3lib.board.items.BaseColorBomb"] = com_sq_m3lib_board_items_BaseColorBomb;
com_sq_m3lib_board_items_BaseColorBomb.__name__ = true;
com_sq_m3lib_board_items_BaseColorBomb.__interfaces__ = [com_sq_m3lib_board_items_IBomb];
com_sq_m3lib_board_items_BaseColorBomb.__super__ = com_sq_m3lib_board_items_ColorItem;
com_sq_m3lib_board_items_BaseColorBomb.prototype = $extend(com_sq_m3lib_board_items_ColorItem.prototype,{
	canShuffle: function() {
		return false;
	}
	,hasExplosionScenario: function() {
		return true;
	}
	,getExplosionScenarioClass: function() {
		throw new js__$Boot_HaxeError(new Error("CoreError_MUST_OVERRIDE_METHOD"));
	}
	,isCommonItem: function() {
		return false;
	}
	,cloneRandomClassType: function() {
		return false;
	}
	,__class__: com_sq_m3lib_board_items_BaseColorBomb
});
var com_sq_m3lib_board_items_ICollectableItem = function() { };
$hxClasses["com.sq.m3lib.board.items.ICollectableItem"] = com_sq_m3lib_board_items_ICollectableItem;
com_sq_m3lib_board_items_ICollectableItem.__name__ = true;
var com_sq_m3lib_board_items_CollectableItem = function() {
	this.viewPortPriority = 0;
	com_sq_m3lib_board_items_BaseItem.call(this);
};
$hxClasses["com.sq.m3lib.board.items.CollectableItem"] = com_sq_m3lib_board_items_CollectableItem;
com_sq_m3lib_board_items_CollectableItem.__name__ = true;
com_sq_m3lib_board_items_CollectableItem.__interfaces__ = [com_sq_m3lib_board_items_ICollectableItem];
com_sq_m3lib_board_items_CollectableItem.__super__ = com_sq_m3lib_board_items_BaseItem;
com_sq_m3lib_board_items_CollectableItem.prototype = $extend(com_sq_m3lib_board_items_BaseItem.prototype,{
	canSelect: function() {
		return true;
	}
	,isCommonItem: function() {
		return false;
	}
	,canExplode: function() {
		return false;
	}
	,setAttributes: function(params) {
		com_sq_m3lib_board_items_BaseItem.prototype.setAttributes.call(this,params);
		this.viewPortPriority = params.viewPortPriority;
	}
	,__class__: com_sq_m3lib_board_items_CollectableItem
});
var com_sq_m3lib_board_items_ColorBombHorizonal = function() {
	com_sq_m3lib_board_items_BaseColorBomb.call(this);
};
$hxClasses["com.sq.m3lib.board.items.ColorBombHorizonal"] = com_sq_m3lib_board_items_ColorBombHorizonal;
com_sq_m3lib_board_items_ColorBombHorizonal.__name__ = true;
com_sq_m3lib_board_items_ColorBombHorizonal.__super__ = com_sq_m3lib_board_items_BaseColorBomb;
com_sq_m3lib_board_items_ColorBombHorizonal.prototype = $extend(com_sq_m3lib_board_items_BaseColorBomb.prototype,{
	getExplosionScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_bombScenarios_HorizonalLineBombScenario;
	}
	,cloneRandomClassType: function() {
		return true;
	}
	,__class__: com_sq_m3lib_board_items_ColorBombHorizonal
});
var com_sq_m3lib_board_items_ColorBombNine = function() {
	com_sq_m3lib_board_items_BaseColorBomb.call(this);
};
$hxClasses["com.sq.m3lib.board.items.ColorBombNine"] = com_sq_m3lib_board_items_ColorBombNine;
com_sq_m3lib_board_items_ColorBombNine.__name__ = true;
com_sq_m3lib_board_items_ColorBombNine.__super__ = com_sq_m3lib_board_items_BaseColorBomb;
com_sq_m3lib_board_items_ColorBombNine.prototype = $extend(com_sq_m3lib_board_items_BaseColorBomb.prototype,{
	getExplosionScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario;
	}
	,__class__: com_sq_m3lib_board_items_ColorBombNine
});
var com_sq_m3lib_board_items_ColorBombVertical = function() {
	com_sq_m3lib_board_items_BaseColorBomb.call(this);
};
$hxClasses["com.sq.m3lib.board.items.ColorBombVertical"] = com_sq_m3lib_board_items_ColorBombVertical;
com_sq_m3lib_board_items_ColorBombVertical.__name__ = true;
com_sq_m3lib_board_items_ColorBombVertical.__super__ = com_sq_m3lib_board_items_BaseColorBomb;
com_sq_m3lib_board_items_ColorBombVertical.prototype = $extend(com_sq_m3lib_board_items_BaseColorBomb.prototype,{
	getExplosionScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_bombScenarios_VerticalLineBombScenario;
	}
	,cloneRandomClassType: function() {
		return true;
	}
	,__class__: com_sq_m3lib_board_items_ColorBombVertical
});
var com_sq_m3lib_board_items_ColorGravityChanger = function() {
	com_sq_m3lib_board_items_ColorItem.call(this);
};
$hxClasses["com.sq.m3lib.board.items.ColorGravityChanger"] = com_sq_m3lib_board_items_ColorGravityChanger;
com_sq_m3lib_board_items_ColorGravityChanger.__name__ = true;
com_sq_m3lib_board_items_ColorGravityChanger.__super__ = com_sq_m3lib_board_items_ColorItem;
com_sq_m3lib_board_items_ColorGravityChanger.prototype = $extend(com_sq_m3lib_board_items_ColorItem.prototype,{
	isCommonItem: function() {
		return false;
	}
	,canShuffle: function() {
		return false;
	}
	,__class__: com_sq_m3lib_board_items_ColorGravityChanger
});
var com_sq_m3lib_board_items_ColorPickerBomb = function() {
	com_sq_m3lib_board_items_BaseItem.call(this);
};
$hxClasses["com.sq.m3lib.board.items.ColorPickerBomb"] = com_sq_m3lib_board_items_ColorPickerBomb;
com_sq_m3lib_board_items_ColorPickerBomb.__name__ = true;
com_sq_m3lib_board_items_ColorPickerBomb.__interfaces__ = [com_sq_m3lib_board_items_IBomb];
com_sq_m3lib_board_items_ColorPickerBomb.__super__ = com_sq_m3lib_board_items_BaseItem;
com_sq_m3lib_board_items_ColorPickerBomb.prototype = $extend(com_sq_m3lib_board_items_BaseItem.prototype,{
	canSelect: function() {
		return true;
	}
	,canShuffle: function() {
		return false;
	}
	,hasExplosionScenario: function() {
		return true;
	}
	,getExplosionScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario;
	}
	,isCommonItem: function() {
		return false;
	}
	,__class__: com_sq_m3lib_board_items_ColorPickerBomb
});
var com_sq_m3lib_board_items_ColorSubBombNine = function() {
	com_sq_m3lib_board_items_BaseColorBomb.call(this);
};
$hxClasses["com.sq.m3lib.board.items.ColorSubBombNine"] = com_sq_m3lib_board_items_ColorSubBombNine;
com_sq_m3lib_board_items_ColorSubBombNine.__name__ = true;
com_sq_m3lib_board_items_ColorSubBombNine.__super__ = com_sq_m3lib_board_items_BaseColorBomb;
com_sq_m3lib_board_items_ColorSubBombNine.prototype = $extend(com_sq_m3lib_board_items_BaseColorBomb.prototype,{
	canSelect: function() {
		return false;
	}
	,explodeOnBoardStabilization: function() {
		return true;
	}
	,getExplosionScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario;
	}
	,canExplode: function() {
		return false;
	}
	,__class__: com_sq_m3lib_board_items_ColorSubBombNine
});
var com_sq_m3lib_board_items_ColorSubBombDoubleNine = function() {
	com_sq_m3lib_board_items_ColorSubBombNine.call(this);
};
$hxClasses["com.sq.m3lib.board.items.ColorSubBombDoubleNine"] = com_sq_m3lib_board_items_ColorSubBombDoubleNine;
com_sq_m3lib_board_items_ColorSubBombDoubleNine.__name__ = true;
com_sq_m3lib_board_items_ColorSubBombDoubleNine.__super__ = com_sq_m3lib_board_items_ColorSubBombNine;
com_sq_m3lib_board_items_ColorSubBombDoubleNine.prototype = $extend(com_sq_m3lib_board_items_ColorSubBombNine.prototype,{
	getExplosionScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_complex_DoubleNineBombScenario;
	}
	,canShuffle: function() {
		return false;
	}
	,__class__: com_sq_m3lib_board_items_ColorSubBombDoubleNine
});
var com_sq_m3lib_board_items_HomingBombItem = function() {
	com_sq_m3lib_board_items_BaseColorBomb.call(this);
};
$hxClasses["com.sq.m3lib.board.items.HomingBombItem"] = com_sq_m3lib_board_items_HomingBombItem;
com_sq_m3lib_board_items_HomingBombItem.__name__ = true;
com_sq_m3lib_board_items_HomingBombItem.__super__ = com_sq_m3lib_board_items_BaseColorBomb;
com_sq_m3lib_board_items_HomingBombItem.prototype = $extend(com_sq_m3lib_board_items_BaseColorBomb.prototype,{
	getExplosionScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombScenario;
	}
	,__class__: com_sq_m3lib_board_items_HomingBombItem
});
var com_sq_m3lib_board_items_LockedCollectableItem = function() {
	com_sq_m3lib_board_items_BaseItem.call(this);
};
$hxClasses["com.sq.m3lib.board.items.LockedCollectableItem"] = com_sq_m3lib_board_items_LockedCollectableItem;
com_sq_m3lib_board_items_LockedCollectableItem.__name__ = true;
com_sq_m3lib_board_items_LockedCollectableItem.__super__ = com_sq_m3lib_board_items_BaseItem;
com_sq_m3lib_board_items_LockedCollectableItem.prototype = $extend(com_sq_m3lib_board_items_BaseItem.prototype,{
	isCommonItem: function() {
		return false;
	}
	,canExplode: function() {
		return false;
	}
	,__class__: com_sq_m3lib_board_items_LockedCollectableItem
});
var com_sq_m3lib_board_items_LockerItem = function() {
	com_sq_m3lib_board_items_BaseItem.call(this);
};
$hxClasses["com.sq.m3lib.board.items.LockerItem"] = com_sq_m3lib_board_items_LockerItem;
com_sq_m3lib_board_items_LockerItem.__name__ = true;
com_sq_m3lib_board_items_LockerItem.__super__ = com_sq_m3lib_board_items_BaseItem;
com_sq_m3lib_board_items_LockerItem.prototype = $extend(com_sq_m3lib_board_items_BaseItem.prototype,{
	canSelect: function() {
		return true;
	}
	,isExplosionStopper: function() {
		return true;
	}
	,destroyOnNearDestroyed: function() {
		return true;
	}
	,isCommonItem: function() {
		return false;
	}
	,__class__: com_sq_m3lib_board_items_LockerItem
});
var com_sq_m3lib_board_items_MultiColoringBomb = function() {
	com_sq_m3lib_board_items_BaseColorBomb.call(this);
};
$hxClasses["com.sq.m3lib.board.items.MultiColoringBomb"] = com_sq_m3lib_board_items_MultiColoringBomb;
com_sq_m3lib_board_items_MultiColoringBomb.__name__ = true;
com_sq_m3lib_board_items_MultiColoringBomb.__interfaces__ = [com_sq_m3lib_board_items_IBomb];
com_sq_m3lib_board_items_MultiColoringBomb.__super__ = com_sq_m3lib_board_items_BaseColorBomb;
com_sq_m3lib_board_items_MultiColoringBomb.prototype = $extend(com_sq_m3lib_board_items_BaseColorBomb.prototype,{
	canSelect: function() {
		return true;
	}
	,hasExplosionScenario: function() {
		return true;
	}
	,getExplosionScenarioClass: function() {
		return com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario;
	}
	,__class__: com_sq_m3lib_board_items_MultiColoringBomb
});
var com_sq_m3lib_board_spawners_CommonItemSpawner = function(params) {
	this.spawnIdx = -1;
	this.spawnerID = -1;
	this.spawnedCount = 0;
	this.spawned = [];
	this._spawnDirection = 0;
	this.loadConfig(params);
	this.spawnerID = com_sq_m3lib_board_spawners_CommonItemSpawner.spawnersCount++;
};
$hxClasses["com.sq.m3lib.board.spawners.CommonItemSpawner"] = com_sq_m3lib_board_spawners_CommonItemSpawner;
com_sq_m3lib_board_spawners_CommonItemSpawner.__name__ = true;
com_sq_m3lib_board_spawners_CommonItemSpawner.prototype = {
	loadConfig: function(params) {
		this._spawnerParams = params;
		this.coord = com_sq_m3lib_geometry_Coord.fromViewPoint(params.coord);
		this._spawnDirection = params.moveDirection;
		this.spawnVector = com_sq_m3lib_coreSettings_CoreSettings.getVectorByDirection(params.moveDirection);
		this.spawnCoord = new com_sq_m3lib_geometry_Coord(this.coord.x - this.spawnVector.x,this.coord.y - this.spawnVector.y);
		this._spawnConfig = this.getCopySpawnConfig(params.spawn);
		this._specialSpawn = params.specialSpawn;
		this._specialSpawnCount = this._specialSpawn == null?0:this._specialSpawn.length;
		if(this._spawnConfig != null) {
			haxe_ds_ArraySort.sort(this._spawnConfig,function(spawn1,spawn2) {
				return spawn2.weight - spawn1.weight;
			});
		}
	}
	,addSpecialSpawn: function(specSpawn) {
		this._specialSpawn.push(specSpawn);
		this._specialSpawnCount++;
	}
	,removeSpecialSpawn: function(specSpawn) {
		HxOverrides.remove(this._specialSpawn,specSpawn);
		this._specialSpawnCount--;
	}
	,getSpawnConfig: function() {
		return this._spawnConfig;
	}
	,setSpawnConfig: function(config) {
		this._spawnConfig = config;
	}
	,trySpawn: function(levelFinished) {
		this.addSpawned(this.spawnFromArray(this._spawnConfig,levelFinished));
		return this.getLastSpawnedItem();
	}
	,spawnFromArray: function(spawnArray,levelFinished) {
		if(spawnArray == null || spawnArray.length == 0) {
			return null;
		}
		var tmpSpawnArray = [];
		var weightSum = 0;
		var spawnLength = spawnArray.length;
		var tmpSpawn = [];
		var i = -1;
		var j = 0;
		while(++i < spawnLength) {
			if(this.getColorCountOnArray(spawnArray) < 4 || levelFinished) {
				if(this.getLastSpawnedItem() != null && spawnArray[i].itemParams.color != -1 && spawnArray[i].itemParams.color == this.getLastSpawnedItem().color) {
					continue;
				}
			}
			tmpSpawnArray[j] = spawnArray[i];
			weightSum += spawnArray[i].weight;
			tmpSpawn[j] = weightSum;
			++j;
		}
		var spawnIndex = this.getSpawnIndex(com_sq_m3lib_core_Mersenne.getInstance().randomIntRange(weightSum),tmpSpawn);
		this.spawnIdx = spawnIndex;
		return tmpSpawnArray[spawnIndex].itemParams;
	}
	,getColorCountOnArray: function(arg) {
		var result = 0;
		var count = arg.length;
		var i = -1;
		while(++i < count) if(arg[i].weight > 0) {
			++result;
		}
		return result;
	}
	,getSpawnIndex: function(spawnValue,spawnValues) {
		var valuesLength = spawnValues.length;
		var idx = -1;
		while(++idx < valuesLength) if(spawnValues[idx] > spawnValue) {
			break;
		}
		return idx;
	}
	,canSpecialSpawn: function(description) {
		var i = -1;
		var count = this._specialSpawnCount;
		while(++i < count) if(com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualItems(this._specialSpawn[i],description)) {
			return true;
		}
		return false;
	}
	,addSpawned: function(item) {
		this.spawned[this.spawnedCount] = item;
		this.spawnedCount++;
	}
	,getLastSpawnedItem: function() {
		return this.spawned[this.spawnedCount - 1];
	}
	,getLogColors: function() {
		var res = "Karma [";
		var _g = 0;
		var _g1 = this._spawnConfig;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			res += c.itemParams.color + ":" + c.weight + ", ";
		}
		res += "]";
		return res;
	}
	,getLogSpawnedColors: function() {
		var res = "[Spawner " + this.spawnerID + "] counter = " + this.spawnedCount + ", [";
		var _g = 0;
		var _g1 = this.spawned;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			res += s.color + ",";
		}
		res += "]";
		return res;
	}
	,getLogSpawnedItem: function() {
		return "Karma spawn -> " + this.getLastSpawnedItem().className + " ," + this.getLastSpawnedItem().color;
	}
	,getDeepCopySpawnConfig: function() {
		return this.getCopySpawnConfig(this._spawnConfig);
	}
	,getCopySpawnConfig: function(arg) {
		var result = [];
		var count = arg.length;
		while(--count >= 0) result[count] = { itemParams : arg[count].itemParams, weight : arg[count].weight};
		return result;
	}
	,__class__: com_sq_m3lib_board_spawners_CommonItemSpawner
};
var com_sq_m3lib_board_spawners_SpecialSpawner = function(gameEngine,params) {
	this.forcedSpawnCount = 0;
	this._gameEngine = gameEngine;
	this.loadConfig(params);
};
$hxClasses["com.sq.m3lib.board.spawners.SpecialSpawner"] = com_sq_m3lib_board_spawners_SpecialSpawner;
com_sq_m3lib_board_spawners_SpecialSpawner.__name__ = true;
com_sq_m3lib_board_spawners_SpecialSpawner.prototype = {
	hasSomethingToSpawn: function() {
		if(this.isDisabled) {
			return false;
		}
		return this.queuedCount > 0;
	}
	,getSomethingToSpawn: function() {
		if(!this.hasSomethingToSpawn()) {
			return null;
		}
		this.queuedCount--;
		return this.spawnItemDescription;
	}
	,tryMakeSpawn: function() {
		if(this.needSpawn() && !this.isMuted) {
			this.spawnToQueue(false);
		} else if(this.needForcedSpawn()) {
			this.spawnToQueue(true);
		}
	}
	,spawnToQueue: function(forced) {
		if(!forced) {
			this.resetSpawnCounter();
		}
		this.queuedCount += this.getCountToSpawn(forced);
	}
	,mute: function() {
		this.isMuted = true;
	}
	,disable: function(e) {
		this.isDisabled = true;
	}
	,unmute: function() {
		this.isMuted = false;
	}
	,resetSpawnCounter: function() {
		this.currentDelta = 0;
	}
	,needSpawn: function() {
		if(this._spawnDelta <= 0) {
			return false;
		}
		if(this.getOnFieldCount() >= this._max) {
			return false;
		}
		if(this.currentDelta >= this._spawnDelta) {
			return true;
		}
		return false;
	}
	,needForcedSpawn: function() {
		if(this.getOnFieldCount() < this._min) {
			return true;
		}
		return false;
	}
	,getOnFieldCount: function() {
		return this._gameEngine.board.boardUtils.getItemOnBoardCount([this.spawnItemDescription]) + this.queuedCount;
	}
	,getCountToSpawn: function(forcedSpawn) {
		if(forcedSpawn) {
			var onFieldCount = this.getOnFieldCount();
			if(onFieldCount < this._min) {
				return this._min - onFieldCount;
			}
		}
		return this._count;
	}
	,loadConfig: function(params) {
		this.spawnItemDescription = params.item;
		this._max = params.max;
		this._min = params.min;
		this._spawnDelta = params.spawnDelta;
		this._firstSpawnDelta = params.firstSpawnDelta;
		this._count = params.count;
		this.queuedCount = 0;
		this.currentDelta = this._firstSpawnDelta;
		this.isDisabled = false;
		this.isMuted = false;
	}
	,onUserMove: function() {
		this.currentDelta++;
		this.tryMakeSpawn();
	}
	,free: function() {
	}
	,__class__: com_sq_m3lib_board_spawners_SpecialSpawner
};
var com_sq_m3lib_board_spawners_ExplosionStopperSpecialSpawner = function(gameEngine,params) {
	com_sq_m3lib_board_spawners_SpecialSpawner.call(this,gameEngine,params);
	this._callback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("destroy_items",$bind(this,this.onItemDestroyed));
};
$hxClasses["com.sq.m3lib.board.spawners.ExplosionStopperSpecialSpawner"] = com_sq_m3lib_board_spawners_ExplosionStopperSpecialSpawner;
com_sq_m3lib_board_spawners_ExplosionStopperSpecialSpawner.__name__ = true;
com_sq_m3lib_board_spawners_ExplosionStopperSpecialSpawner.__super__ = com_sq_m3lib_board_spawners_SpecialSpawner;
com_sq_m3lib_board_spawners_ExplosionStopperSpecialSpawner.prototype = $extend(com_sq_m3lib_board_spawners_SpecialSpawner.prototype,{
	onItemDestroyed: function(e) {
		if(!js_Boot.__instanceof(e,com_sq_m3lib_events_CoreItemDestroyEvent)) {
			return;
		}
		if(com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualItems((js_Boot.__cast(e , com_sq_m3lib_events_CoreItemDestroyEvent)).getItem().getCurrentItemDescription(),this.spawnItemDescription)) {
			this.mute();
		}
	}
	,onUserMove: function() {
		if(this.isMuted) {
			this.unmute();
		}
		com_sq_m3lib_board_spawners_SpecialSpawner.prototype.onUserMove.call(this);
	}
	,free: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("destroy_items",this._callback);
		com_sq_m3lib_board_spawners_SpecialSpawner.prototype.free.call(this);
	}
	,__class__: com_sq_m3lib_board_spawners_ExplosionStopperSpecialSpawner
});
var com_sq_m3lib_board_spawners_GravityChangerSpecialSpawner = function(gameEngine,params) {
	com_sq_m3lib_board_spawners_SpecialSpawner.call(this,gameEngine,params);
	this._callback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreCellGravityUpdateEvent.FIELD_FULL,$bind(this,this.disable));
};
$hxClasses["com.sq.m3lib.board.spawners.GravityChangerSpecialSpawner"] = com_sq_m3lib_board_spawners_GravityChangerSpecialSpawner;
com_sq_m3lib_board_spawners_GravityChangerSpecialSpawner.__name__ = true;
com_sq_m3lib_board_spawners_GravityChangerSpecialSpawner.__super__ = com_sq_m3lib_board_spawners_SpecialSpawner;
com_sq_m3lib_board_spawners_GravityChangerSpecialSpawner.prototype = $extend(com_sq_m3lib_board_spawners_SpecialSpawner.prototype,{
	free: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreCellGravityUpdateEvent.FIELD_FULL,this._callback);
		com_sq_m3lib_board_spawners_SpecialSpawner.prototype.free.call(this);
	}
	,resetForcedSpawnCount: function() {
		this.forcedSpawnCount = 0;
	}
	,getOnFieldCount: function() {
		return com_sq_m3lib_board_spawners_SpecialSpawner.prototype.getOnFieldCount.call(this) + this.forcedSpawnCount;
	}
	,__class__: com_sq_m3lib_board_spawners_GravityChangerSpecialSpawner
});
var com_sq_m3lib_board_spawners_SpawnFactory = function(engine) {
	this.karmaBombColorSpawned = false;
	this._gameEngine = engine;
	this.spawners = [];
	this._spawnersCount = 0;
	this.specialSpawners = [];
	this._specialSpawnersCount = 0;
};
$hxClasses["com.sq.m3lib.board.spawners.SpawnFactory"] = com_sq_m3lib_board_spawners_SpawnFactory;
com_sq_m3lib_board_spawners_SpawnFactory.__name__ = true;
com_sq_m3lib_board_spawners_SpawnFactory.prototype = {
	initSpawners: function(levelConfig) {
		com_sq_m3lib_board_spawners_CommonItemSpawner.spawnersCount = 0;
		this.spawners = [];
		this.specialSpawners = [];
		this._spawnersCount = 0;
		this._specialSpawnersCount = 0;
		if(levelConfig.spawns == null) {
			return;
		}
		this.addListeners();
		var _g = 0;
		var _g1 = levelConfig.spawns;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			this.addSpawner(this.createSpawnerByConfig(spawner));
		}
		if(levelConfig.specialSpawns == null) {
			return;
		}
		var _g2 = 0;
		var _g11 = levelConfig.specialSpawns;
		while(_g2 < _g11.length) {
			var specialSpawner = _g11[_g2];
			++_g2;
			this.addSpecialSpawner(this.createSpecialSpawnerByConfig(specialSpawner));
		}
	}
	,addSpawner: function(newSpawner) {
		var spawnerLength = this._spawnersCount;
		while(--spawnerLength >= 0) if(this.spawners[spawnerLength].coord.isEqual(newSpawner.coord)) {
			return false;
		}
		this._gameEngine.board.getCellByCoords(newSpawner.coord.x,newSpawner.coord.y,true).spawner = newSpawner;
		this.spawners[this._spawnersCount] = newSpawner;
		this._spawnersCount++;
		return true;
	}
	,addSpecialSpawner: function(newSpawner) {
		this.specialSpawners[this._specialSpawnersCount] = newSpawner;
		this._specialSpawnersCount++;
	}
	,removeSpecialSpawner: function(oldSpawner) {
		HxOverrides.remove(this.specialSpawners,oldSpawner);
		this._specialSpawnersCount--;
	}
	,clearSpecialSpawners: function() {
		this.specialSpawners.splice(0,this.specialSpawners.length);
		this._specialSpawnersCount = 0;
	}
	,createSpawnerByConfig: function(spawner) {
		return new com_sq_m3lib_board_spawners_CommonItemSpawner(spawner);
	}
	,createSpecialSpawnerByConfig: function(spawner) {
		var currentConfig = com_sq_m3lib_coreSettings_CoreClassesDictionary.cloneDef(spawner);
		var specialSpawnerItemConfig = com_sq_m3lib_board_spawners_SpecialSpawnerItemDictionary.getByAlias(spawner.className);
		var itemClass = specialSpawnerItemConfig.classType;
		if(currentConfig.item == null) {
			currentConfig.item = specialSpawnerItemConfig.params;
		}
		return Type.createInstance(itemClass,[this._gameEngine,currentConfig]);
	}
	,cloneAttributes: function(attributes) {
		var result = { };
		var _g = 0;
		var _g1 = Reflect.fields(attributes);
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			var tmp;
			var tmp1;
			if(attributes == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(attributes.__properties__) {
					tmp = attributes.__properties__["get_" + param];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = attributes[tmp]();
				} else {
					tmp1 = attributes[param];
				}
			}
			result[param] = tmp1;
		}
		return result;
	}
	,makeSpawn: function() {
		var result = [];
		var resultCount = 0;
		if(this._gameEngine.board.boardUtils.getEmptyCells(false).length == 0) {
			return result;
		}
		var queuedSpecialSpawn = this.prepareSpecialSpawn();
		var queuedSpecialSpawnCount = queuedSpecialSpawn.length;
		var tmpSpawners = com_sq_m3lib_core_Mersenne.getInstance().safeShuffleArray(this.spawners);
		var spawner;
		var cell;
		var item;
		var possibleSpawn;
		var i = -1;
		var j;
		while(++i < this._spawnersCount) {
			spawner = tmpSpawners[i];
			cell = this._gameEngine.board.getCellByCoords(spawner.coord.x,spawner.coord.y,true);
			if(cell.canHaveItem() && cell.item == null) {
				if(!com_sq_m3lib_geometry_CellVector.ofSameDirection(cell.getCurrentMoveVector(),spawner.spawnVector)) {
					continue;
				}
				possibleSpawn = null;
				if(queuedSpecialSpawnCount > 0) {
					j = -1;
					while(++j < queuedSpecialSpawnCount) if(spawner.canSpecialSpawn(queuedSpecialSpawn[j].spawnItemDescription)) {
						possibleSpawn = queuedSpecialSpawn[j].getSomethingToSpawn();
						if(!queuedSpecialSpawn[j].hasSomethingToSpawn()) {
							queuedSpecialSpawn[j] = queuedSpecialSpawn[queuedSpecialSpawnCount - 1];
							--queuedSpecialSpawnCount;
							--j;
						}
						break;
					}
				}
				if(possibleSpawn == null) {
					possibleSpawn = spawner.trySpawn(this._gameEngine.targetsManager.areTargetsComplete());
				}
				item = this.makeOneSpawn(spawner,cell,possibleSpawn);
				if(item != null) {
					result[resultCount] = item;
					++resultCount;
				}
			}
		}
		return result;
	}
	,makeOneSpawn: function(spawner,cell,possibleItemDesc) {
		var item;
		var nextCell;
		var nextItem;
		if(possibleItemDesc == null) {
			return null;
		}
		var spawnCoords = spawner.spawnCoord;
		item = this._gameEngine.itemsFactory.getItem(possibleItemDesc,this._gameEngine.board.getOnBoardCoords(spawnCoords.x,spawnCoords.y));
		item.currentMoveVector = spawner.spawnVector;
		item.isMoving = true;
		cell.setItem(item);
		nextCell = cell.toCell;
		if(nextCell != null && nextCell.item != null) {
			nextItem = nextCell.item;
			if(com_sq_m3lib_geometry_CellVector.areEqual(cell.getCurrentMoveVector(),spawner.spawnVector)) {
				item.speed = nextItem.speed - com_sq_m3lib_coreSettings_CoreSettings.moveParams.commonAcceleration;
			}
		}
		return item;
	}
	,prepareSpecialSpawn: function() {
		var i = -1;
		var count = this._specialSpawnersCount;
		var result = [];
		var resultCount = 0;
		var spawner;
		while(++i < count) {
			spawner = this.specialSpawners[i];
			if(spawner.hasSomethingToSpawn()) {
				result[resultCount] = spawner;
				++resultCount;
			}
		}
		return result;
	}
	,onUserMoveOrBoost: function(e) {
		var i = this._specialSpawnersCount;
		while(--i >= 0) this.specialSpawners[i].onUserMove();
	}
	,getSpecialSpawnersByClass: function(spawnerClass) {
		var i = this.specialSpawners.length;
		while(--i >= 0) if(js_Boot.__instanceof(this.specialSpawners[i],spawnerClass)) {
			return this.specialSpawners[i];
		}
		return null;
	}
	,getSpawnByCoords: function(coord) {
		var i = this._spawnersCount;
		while(--i >= 0) if(this.spawners[i].coord.isEqual(coord)) {
			return this.spawners[i];
		}
		return null;
	}
	,addListeners: function() {
		this._onUserMove = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreItemsSwitchEvent.ITEM_SWITCH_SUCCESS,$bind(this,this.onUserMoveOrBoost));
		this._onUserBoost = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("booster_activated",$bind(this,this.onUserMoveOrBoost));
	}
	,removeListeners: function() {
		var i = this._specialSpawnersCount;
		while(--i >= 0) this.specialSpawners[i].free();
		this.specialSpawners = [];
		this._specialSpawnersCount = 0;
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreItemsSwitchEvent.ITEM_SWITCH_SUCCESS,this._onUserMove);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("booster_activated",this._onUserBoost);
	}
	,__class__: com_sq_m3lib_board_spawners_SpawnFactory
};
var com_sq_m3lib_board_spawners_SpecialSpawnerItemDictionary = function() { };
$hxClasses["com.sq.m3lib.board.spawners.SpecialSpawnerItemDictionary"] = com_sq_m3lib_board_spawners_SpecialSpawnerItemDictionary;
com_sq_m3lib_board_spawners_SpecialSpawnerItemDictionary.__name__ = true;
com_sq_m3lib_board_spawners_SpecialSpawnerItemDictionary.getByAlias = function(alias) {
	var _this = com_sq_m3lib_coreSettings_CoreClassesDictionary.specialSpawnerClassDictionary;
	if(__map_reserved[alias] != null?_this.existsReserved(alias):_this.h.hasOwnProperty(alias)) {
		var _this1 = com_sq_m3lib_coreSettings_CoreClassesDictionary.specialSpawnerClassDictionary;
		return __map_reserved[alias] != null?_this1.getReserved(alias):_this1.h[alias];
	}
	return null;
};
com_sq_m3lib_board_spawners_SpecialSpawnerItemDictionary.getByClass = function(classDef) {
	var tmp = com_sq_m3lib_coreSettings_CoreClassesDictionary.specialSpawnerClassDictionary.keys();
	while(tmp.hasNext()) {
		var alias = tmp.next();
		var _this = com_sq_m3lib_coreSettings_CoreClassesDictionary.specialSpawnerClassDictionary;
		if((__map_reserved[alias] != null?_this.getReserved(alias):_this.h[alias]).classType == classDef) {
			return alias;
		}
	}
	return null;
};
var com_sq_m3lib_bot_BaseBot = function() {
	this.targetMoves = 0;
	this.seed = 0;
	this._shouldStop = false;
	this.gameEngine = new com_sq_m3lib_GameEngine();
	this.karma = new com_sq_m3lib_karma_KarmaManager(this.gameEngine);
	var gameConfig = new com_sq_m3lib_game_GameParams();
	gameConfig.parseFromSettings();
	this.gameEngine.setupGameParams(gameConfig);
};
$hxClasses["com.sq.m3lib.bot.BaseBot"] = com_sq_m3lib_bot_BaseBot;
com_sq_m3lib_bot_BaseBot.__name__ = true;
com_sq_m3lib_bot_BaseBot.prototype = {
	loadConfig: function(jsonLevelConfig,seed,karmaPreset,karmaMap,karmaPresetId,strategy,jsonPriority,onComplete,onProgress) {
		this._currentState = null;
		this._shouldStop = false;
		if(this.gameEngine == null) {
			this.gameEngine = new com_sq_m3lib_GameEngine();
			var gameConfig = new com_sq_m3lib_game_GameParams();
			gameConfig.parseFromSettings();
			this.gameEngine.setupGameParams(gameConfig);
		} else {
			this.gameEngine.removeListeners();
		}
		com_sq_m3lib_log_CoreLog.log("[BOT] Start gameEngine init");
		var levelConfig = new com_sq_m3lib_board_LevelConfig();
		levelConfig.loadFromParsedConfig(jsonLevelConfig);
		this.seed = seed;
		this.targetMoves = jsonLevelConfig.moves;
		this.gameEngine.loadLevelConfig(levelConfig,seed);
		this._moveSelector = new com_sq_m3lib_bot_moveStrategy_BotMoveSelector(strategy);
		this._onComplete = onComplete;
		this._onProgress = onProgress;
		this._currentMove = 1;
		if(karmaPresetId > -2) {
			this.karma.init(karmaPreset,karmaMap);
			this.karma.setKarma(karmaPresetId);
		}
		this.addListeners();
		this.launchTicker();
	}
	,getKarmaPresets: function(presets) {
		return JSON.parse(presets);
	}
	,getKarmaMap: function(map) {
		return JSON.parse(map);
	}
	,launchTicker: function() {
		this.continueLoop();
	}
	,makeLoop: function(callback) {
		var i = 1000;
		while(--i >= 0) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreEvent(com_sq_m3lib_events_CoreEventDispatcher.TICK));
			if(this._shouldStop) {
				break;
			}
		}
		callback();
	}
	,continueLoop: function() {
		if(!this._shouldStop) {
			this.makeLoop($bind(this,this.continueLoop));
		}
	}
	,getReplay: function() {
		return com_sq_m3lib_log_CoreEventLogger.getFullEvents();
	}
	,addListeners: function() {
		this._stableCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreEventDispatcher.BOARD_STABLE,$bind(this,this.onBoardStabilized),-2147483646);
		this._onViewPointChanged = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED,$bind(this,this.onViewPointChanged),-2147483646);
		this._onLevelFinishBoostComplete = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("finish_level_boost_complete",$bind(this,this.onBotFinished),-2147483646);
	}
	,onBotFinished: function(e) {
		this.removeListeners();
		this.free();
		this._shouldStop = true;
		this.karma.reset();
		if(this._onComplete != null) {
			this._onComplete();
		}
	}
	,removeListeners: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreEventDispatcher.BOARD_STABLE,this._stableCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED,this._onViewPointChanged);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("finish_level_boost_complete",this._onLevelFinishBoostComplete);
		this.gameEngine.removeListeners();
	}
	,onBoardStabilized: function(e) {
	}
	,onViewPointChanged: function(e) {
		this.gameEngine.board.onViewPortScrollFinished();
	}
	,onAllChecked: function() {
	}
	,getLogMakeTryMove: function() {
		var candidate = this._currentState.getCandidateByIndex();
		return "Checking move #" + this._currentState.candidateIndex + " of " + this._currentState.count + " Moving: " + this.getCoordsString(candidate.cell.coords) + ", " + this.getCoordsString(candidate.switchCell.coords);
	}
	,getLogMoveSelected: function(bestMoveIndex) {
		var candidate = this._currentState.candidatesMap[bestMoveIndex];
		return "Best Move #" + bestMoveIndex + " of " + this._currentState.count + "\n" + " Moving: " + this.getCoordsString(candidate.cell.coords) + ", " + this.getCoordsString(candidate.switchCell.coords);
	}
	,getCoordsString: function(coords) {
		return "(x:" + coords.x + ",y:" + coords.y + ")";
	}
	,free: function() {
	}
	,__class__: com_sq_m3lib_bot_BaseBot
};
var com_sq_m3lib_bot_BotStableStateDescription = function(currentSnapshot,candidates,previousState) {
	this.snapshot = currentSnapshot;
	this.candidatesMap = candidates;
	this.count = this.candidatesMap.length;
	this.candidateIndex = -1;
	this.candidateWeight = [];
	this.candidateWeight[this.count] = 0;
	this.candidateResultSnapshot = [];
	this.candidateResultSnapshot[this.count] = null;
	this.previousStateDescription = previousState;
};
$hxClasses["com.sq.m3lib.bot.BotStableStateDescription"] = com_sq_m3lib_bot_BotStableStateDescription;
com_sq_m3lib_bot_BotStableStateDescription.__name__ = true;
com_sq_m3lib_bot_BotStableStateDescription.prototype = {
	isAllChecked: function() {
		return this.candidateIndex >= this.count;
	}
	,getCandidateByIndex: function() {
		return this.candidatesMap[this.candidateIndex];
	}
	,__class__: com_sq_m3lib_bot_BotStableStateDescription
};
var com_sq_m3lib_bot_LevelBot = $hx_exports["com"]["sq"]["m3lib"]["bot"]["LevelBot"] = function() {
	this._eventCallbacks = new haxe_ds_StringMap();
	com_sq_m3lib_bot_BaseBot.call(this);
};
$hxClasses["com.sq.m3lib.bot.LevelBot"] = com_sq_m3lib_bot_LevelBot;
com_sq_m3lib_bot_LevelBot.__name__ = true;
com_sq_m3lib_bot_LevelBot.__super__ = com_sq_m3lib_bot_BaseBot;
com_sq_m3lib_bot_LevelBot.prototype = $extend(com_sq_m3lib_bot_BaseBot.prototype,{
	loadConfig: function(jsonLevelConfig,seed,karmaPreset,karmaMap,karmaPresetId,strategy,jsonPriority,onComplete,onProgress) {
		this._stableStates = [];
		this._eventsPriority = new haxe_ds_StringMap();
		this.parseEventPriorities(jsonPriority);
		com_sq_m3lib_bot_BaseBot.prototype.loadConfig.call(this,jsonLevelConfig,seed,karmaPreset,karmaMap,karmaPresetId,strategy,jsonPriority,onComplete,onProgress);
	}
	,addListeners: function() {
		com_sq_m3lib_bot_BaseBot.prototype.addListeners.call(this);
		if(this._currentState != null) {
			this.addBotEventsListeners();
		}
	}
	,addBotEventsListeners: function() {
		var tmp = this._eventsPriority.keys();
		while(tmp.hasNext()) {
			var eventKey = tmp.next();
			var v = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(eventKey,$bind(this,this.onEvent));
			var _this = this._eventCallbacks;
			if(__map_reserved[eventKey] != null) {
				_this.setReserved(eventKey,v);
			} else {
				_this.h[eventKey] = v;
			}
		}
	}
	,removeBotEventsListeners: function() {
		var tmp = this._eventCallbacks.keys();
		while(tmp.hasNext()) {
			var eventName = tmp.next();
			var tmp1 = com_sq_m3lib_events_CoreEventDispatcher.getInstance();
			var _this = this._eventCallbacks;
			tmp1.removeEventCallback(eventName,__map_reserved[eventName] != null?_this.getReserved(eventName):_this.h[eventName]);
		}
	}
	,removeListeners: function() {
		com_sq_m3lib_bot_BaseBot.prototype.removeListeners.call(this);
		this.removeBotEventsListeners();
	}
	,onBoardStabilized: function(e) {
		if(this._currentState == null) {
			this._currentState = this.createNewStableState();
			this.addBotEventsListeners();
		}
		this.checkNextMove();
		com_sq_m3lib_bot_BaseBot.prototype.onBoardStabilized.call(this,e);
	}
	,onAllChecked: function() {
		var bestIndex = this._moveSelector.selectMove(this._currentState);
		com_sq_m3lib_log_CoreEventLogger.removeListeners();
		com_sq_m3lib_snapshots_SnapshotFactory.getInstance().load(this._currentState.candidateResultSnapshot[bestIndex],this.gameEngine);
		this.updateOnBoardParams(this._currentState);
		com_sq_m3lib_log_CoreEventLogger.addListeners();
		this._currentState.candidateResultSnapshot = [];
		this._currentState = this.createNewStableState();
		this.onMoveSelected();
	}
	,onMoveSelected: function() {
		this._currentMove++;
		this._moveSelector.strategy.onMoveSelected();
		if(this.gameEngine.targetsManager.areTargetsComplete()) {
			this.gameEngine.onLevelFinished();
		} else if(this.gameEngine.targetsManager.areTargetsFailed()) {
			this.onBotFinished();
		} else {
			this.checkNextMove();
		}
	}
	,checkNextMove: function() {
		if(this._currentState.candidateIndex < 0) {
			if(this._onProgress != null) {
				this._onProgress(this._currentMove);
			}
		}
		if(this._currentState.candidateIndex >= 0) {
			this._currentState.candidateResultSnapshot[this._currentState.candidateIndex] = com_sq_m3lib_snapshots_SnapshotFactory.getInstance().make(this.gameEngine);
			this._currentState.candidateWeight[this._currentState.candidateIndex] = this._currentWeight;
		}
		if(!this._moveSelector.strategy.previewMoveResult()) {
			if(this._currentState.candidateIndex < 0) {
				this._currentState.candidateIndex++;
				this.removeBotEventsListeners();
				this.tryCombo(this._currentState.candidatesMap[this._moveSelector.selectMove(this._currentState)]);
			} else {
				this.addBotEventsListeners();
				this._currentState = this.createNewStableState();
				this.onMoveSelected();
			}
		} else {
			this._currentWeight = 0;
			this._currentState.candidateIndex++;
			if(this._currentState.isAllChecked()) {
				this.onAllChecked();
			} else {
				if(this._currentState.candidateIndex != 0) {
					com_sq_m3lib_snapshots_SnapshotFactory.getInstance().load(this._currentState.snapshot,this.gameEngine);
				}
				this.updateOnBoardParams(this._currentState);
				this.tryCombo(this._currentState.getCandidateByIndex());
			}
		}
	}
	,tryCombo: function(candidate) {
		this.gameEngine.board.moveFactory.switchCellByCoords(candidate.cell.coords,candidate.switchCell.coords);
	}
	,createNewStableState: function() {
		var resultState = new com_sq_m3lib_bot_BotStableStateDescription(com_sq_m3lib_snapshots_SnapshotFactory.getInstance().make(this.gameEngine),this.gameEngine.comboFactory.combinationCandidateList,this._currentState);
		this.updateOnBoardParams(resultState);
		return resultState;
	}
	,updateOnBoardParams: function(state) {
		state.onBoardCells = this.gameEngine.board.getNonVoidCells();
		state.onBoardItems = [];
		var i = state.onBoardCells.length;
		while(--i >= 0) if(state.onBoardCells[i].item != null) {
			state.onBoardItems.push(state.onBoardCells[i].item);
		}
	}
	,onEvent: function(e) {
		var key = e.getName();
		var _this = this._eventsPriority;
		var weights = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		var i = weights.length;
		while(--i >= 0) if(weights[i].checkParams(this._currentState,this.gameEngine,e)) {
			this._currentWeight += weights[i].weight;
		}
	}
	,parseEventPriorities: function(data) {
		this._eventsPriority = data;
	}
	,free: function() {
		this._stableStates = null;
		this._currentState = null;
		this._currentWeight = 0;
	}
	,__class__: com_sq_m3lib_bot_LevelBot
});
var com_sq_m3lib_bot_botEventPriorities_SimpleBotEventPriority = function(data) {
	this.weight = 0;
	this.parse(data);
};
$hxClasses["com.sq.m3lib.bot.botEventPriorities.SimpleBotEventPriority"] = com_sq_m3lib_bot_botEventPriorities_SimpleBotEventPriority;
com_sq_m3lib_bot_botEventPriorities_SimpleBotEventPriority.__name__ = true;
com_sq_m3lib_bot_botEventPriorities_SimpleBotEventPriority.prototype = {
	parse: function(data) {
		this.eventName = data.eventArgs.eventName;
		this.eventArgs = data.eventArgs;
		this.weight = data.weight;
	}
	,checkParams: function(currentState,gameEngine,e) {
		return true;
	}
	,__class__: com_sq_m3lib_bot_botEventPriorities_SimpleBotEventPriority
};
var com_sq_m3lib_bot_moveStrategy_BotMoveSelectionStrategy = function(params,seed) {
	this.params = params;
	this.isBestMove = false;
	this.randomizer = new com_sq_m3lib_core_Mersenne();
	if(seed == null) {
		this.randomizer.randomizeSeed();
	}
	this.randomizer.setSeed(seed);
};
$hxClasses["com.sq.m3lib.bot.moveStrategy.BotMoveSelectionStrategy"] = com_sq_m3lib_bot_moveStrategy_BotMoveSelectionStrategy;
com_sq_m3lib_bot_moveStrategy_BotMoveSelectionStrategy.__name__ = true;
com_sq_m3lib_bot_moveStrategy_BotMoveSelectionStrategy.prototype = {
	previewMoveResult: function() {
		return this.isBestMove;
	}
	,selectMove: function(currentState) {
		return this.randomizer.randomIntRange(currentState.candidatesMap.length);
	}
	,onMoveSelected: function() {
	}
	,__class__: com_sq_m3lib_bot_moveStrategy_BotMoveSelectionStrategy
};
var com_sq_m3lib_bot_moveStrategy_BestMoveSelectionStrategy = function(params,seed) {
	com_sq_m3lib_bot_moveStrategy_BotMoveSelectionStrategy.call(this,params,seed);
	this.onMoveSelected();
};
$hxClasses["com.sq.m3lib.bot.moveStrategy.BestMoveSelectionStrategy"] = com_sq_m3lib_bot_moveStrategy_BestMoveSelectionStrategy;
com_sq_m3lib_bot_moveStrategy_BestMoveSelectionStrategy.__name__ = true;
com_sq_m3lib_bot_moveStrategy_BestMoveSelectionStrategy.__super__ = com_sq_m3lib_bot_moveStrategy_BotMoveSelectionStrategy;
com_sq_m3lib_bot_moveStrategy_BestMoveSelectionStrategy.prototype = $extend(com_sq_m3lib_bot_moveStrategy_BotMoveSelectionStrategy.prototype,{
	selectMove: function(currentState) {
		if(this.isBestMove) {
			return this.getBestCandidateIndex(currentState.candidateWeight,currentState.count);
		} else {
			return this.randomizer.randomIntRange(currentState.count);
		}
	}
	,onMoveSelected: function() {
		this.isBestMove = this.randomizer.randomIntRange(this.params.totalPriority) < this.params.bestMovePriority;
	}
	,getBestCandidateIndex: function(candidateWeight,count) {
		var i = 0;
		var bestCandidate = 0;
		var maxWeight = candidateWeight[0];
		while(++i < count) if(candidateWeight[i] > maxWeight) {
			bestCandidate = i;
			maxWeight = candidateWeight[i];
		}
		return bestCandidate;
	}
	,__class__: com_sq_m3lib_bot_moveStrategy_BestMoveSelectionStrategy
});
var com_sq_m3lib_bot_moveStrategy_BotMoveSelector = function(strategy) {
	if(strategy == null) {
		strategy = 0;
	}
	this.strategy = Type.createInstance(com_sq_m3lib_bot_moveStrategy_BotMoveSelector.STRATEGIES.h[strategy].classType,[com_sq_m3lib_bot_moveStrategy_BotMoveSelector.STRATEGIES.h[strategy].params,com_sq_m3lib_core_Mersenne.getInstance().getSeed()]);
};
$hxClasses["com.sq.m3lib.bot.moveStrategy.BotMoveSelector"] = com_sq_m3lib_bot_moveStrategy_BotMoveSelector;
com_sq_m3lib_bot_moveStrategy_BotMoveSelector.__name__ = true;
com_sq_m3lib_bot_moveStrategy_BotMoveSelector.prototype = {
	selectMove: function(currentState) {
		return this.strategy.selectMove(currentState);
	}
	,__class__: com_sq_m3lib_bot_moveStrategy_BotMoveSelector
};
var com_sq_m3lib_core_CoreErrorKeys = function() {
};
$hxClasses["com.sq.m3lib.core.CoreErrorKeys"] = com_sq_m3lib_core_CoreErrorKeys;
com_sq_m3lib_core_CoreErrorKeys.__name__ = true;
com_sq_m3lib_core_CoreErrorKeys.prototype = {
	__class__: com_sq_m3lib_core_CoreErrorKeys
};
var com_sq_m3lib_core_Mersenne = function() {
	this._index = 0;
	this._mt = [];
};
$hxClasses["com.sq.m3lib.core.Mersenne"] = com_sq_m3lib_core_Mersenne;
com_sq_m3lib_core_Mersenne.__name__ = true;
com_sq_m3lib_core_Mersenne.getInstance = function() {
	if(com_sq_m3lib_core_Mersenne._instance == null) {
		com_sq_m3lib_core_Mersenne._instance = new com_sq_m3lib_core_Mersenne();
	}
	return com_sq_m3lib_core_Mersenne._instance;
};
com_sq_m3lib_core_Mersenne.prototype = {
	randomUint: function() {
		if(this._index == 0) {
			var y;
			var i = -1;
			while(++i < 624) {
				y = this._mt[i] & -2147483648 | this._mt[(i + 1) % 624] & 2147483647;
				this._mt[i] = this._mt[(i + 397) % 624] ^ y >>> 1;
				if((y & 1) == 1) {
					this._mt[i] = this._mt[i] ^ -1727483681;
				}
				this._mt[i] = this._mt[i] & 2147483647;
			}
		}
		var y1 = this._mt[this._index];
		y1 ^= y1 >>> 11;
		y1 ^= y1 << 7 & -1658038656;
		y1 ^= y1 << 15 & -272236544;
		y1 ^= y1 << 18;
		this._index = (this._index + 1) % 624;
		return y1 & 2147483647 & -1;
	}
	,randomInt: function() {
		return this.random();
	}
	,random: function() {
		if(this._index == 0) {
			var y;
			var i = -1;
			while(++i < 624) {
				y = this._mt[i] & -2147483648 | this._mt[(i + 1) % 624] & 2147483647;
				this._mt[i] = this._mt[(i + 397) % 624] ^ y >>> 1;
				if((y & 1) == 1) {
					this._mt[i] = this._mt[i] ^ -1727483681;
				}
				this._mt[i] = this._mt[i] & 2147483647;
			}
		}
		var y1 = this._mt[this._index];
		y1 ^= y1 >>> 11;
		y1 ^= y1 << 7 & -1658038656;
		y1 ^= y1 << 15 & -272236544;
		y1 ^= y1 << 18;
		this._index = (this._index + 1) % 624;
		var result = y1 & 2147483647;
		if(result < 0) {
			result *= -1;
		}
		return result;
	}
	,randomIntRange: function(Max,Min) {
		if(Min == null) {
			Min = 0;
		}
		if(Min == Max) {
			return Min;
		}
		if(Min > Max) {
			var Swap = Min;
			Min = Max;
			Max = Swap;
		}
		return Min + this.random() % (Max - Min);
	}
	,randomizeSeed: function() {
		this.setSeed(Math.round(Math.random() * 2147483647));
	}
	,clamp: function(a) {
		return a & 2147483647;
	}
	,mul32: function(a,b) {
		return (a * (b & 65535) & 2147483647) + (a * (b >>> 16) << 16 & 2147483647) & 2147483647;
	}
	,setSeed: function(seed) {
		this._index = 0;
		this._mt = [];
		this._mt[0] = seed & 2147483647;
		var i = 0;
		while(++i < 624) {
			var a = this._mt[i - 1] ^ this._mt[i - 1] >>> 30;
			var b = (1812433253 * (a & 65535) & 2147483647) + (1812433253 * (a >>> 16) << 16 & 2147483647) & 2147483647;
			this._mt[i] = b + js_Boot.__cast(i , Int) & 2147483647;
		}
	}
	,getSeed: function() {
		return this._mt[this._index];
	}
	,getIndex: function() {
		return this._index;
	}
	,cloneMatrix: function() {
		return this._mt.slice();
	}
	,setMatrix: function(mt,index) {
		this._mt = mt;
		this._index = index;
	}
	,shuffleArray: function(array) {
		var result = [];
		var length = array.length;
		var maxLength = length;
		var rand;
		while(length > 0) {
			rand = this.randomIntRange(length);
			result[maxLength - length] = array[rand];
			if(rand < length - 1) {
				array[rand] = array[length - 1];
			}
			--length;
		}
		return result;
	}
	,safeShuffleArray: function(arrayOriginal) {
		return this.shuffleArray(arrayOriginal.slice());
	}
	,_regenerateMatrix: function() {
		var y;
		var i = -1;
		while(++i < 624) {
			y = this._mt[i] & -2147483648 | this._mt[(i + 1) % 624] & 2147483647;
			this._mt[i] = this._mt[(i + 397) % 624] ^ y >>> 1;
			if((y & 1) == 1) {
				this._mt[i] = this._mt[i] ^ -1727483681;
			}
			this._mt[i] = this._mt[i] & 2147483647;
		}
	}
	,_extractInt: function() {
		if(this._index == 0) {
			var y;
			var i = -1;
			while(++i < 624) {
				y = this._mt[i] & -2147483648 | this._mt[(i + 1) % 624] & 2147483647;
				this._mt[i] = this._mt[(i + 397) % 624] ^ y >>> 1;
				if((y & 1) == 1) {
					this._mt[i] = this._mt[i] ^ -1727483681;
				}
				this._mt[i] = this._mt[i] & 2147483647;
			}
		}
		var y1 = this._mt[this._index];
		y1 ^= y1 >>> 11;
		y1 ^= y1 << 7 & -1658038656;
		y1 ^= y1 << 15 & -272236544;
		y1 ^= y1 << 18;
		this._index = (this._index + 1) % 624;
		return y1 & 2147483647;
	}
	,__class__: com_sq_m3lib_core_Mersenne
};
var com_sq_m3lib_game_gameTargets_GameTarget = function(params) {
	this.params = params;
	this.targetId = params.id;
	this.value = params.count == null?0:params.count;
};
$hxClasses["com.sq.m3lib.game.gameTargets.GameTarget"] = com_sq_m3lib_game_gameTargets_GameTarget;
com_sq_m3lib_game_gameTargets_GameTarget.__name__ = true;
com_sq_m3lib_game_gameTargets_GameTarget.prototype = {
	getId: function() {
		return this.targetId;
	}
	,getValue: function() {
		return this.value;
	}
	,toJson: function() {
		var result = { id : this.targetId, count : this.value, gravityParams : this.params.gravityParams, hiddenObjectsParams : this.params.hiddenObjectsParams};
		return result;
	}
	,getProgressClass: function() {
		return null;
	}
	,getWeightForCell: function(cell,startCell,gameEngine) {
		var weight = 0;
		if(cell.item != null) {
			weight = this.getItemWeight(cell.item);
		}
		if(!cell.blockerSet.isEmpty()) {
			weight += this.getBlockerWeight(cell.blockerSet);
		}
		return weight;
	}
	,getItemWeight: function(item) {
		var weight = 0;
		var weights = this.getWeightsForItems();
		var i = weights != null?weights.length:0;
		var baseWeight = 0;
		while(--i >= 0) {
			if(item.getCurrentItemDescription().className == weights[i].alias) {
				weight += weights[i].weight;
			}
			if(weights[i].alias == com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BASE) {
				baseWeight = weights[i].weight;
			}
		}
		if(i < 0) {
			weight += baseWeight;
		}
		return weight;
	}
	,getBlockerWeight: function(blockerSet) {
		var weight = 0;
		var blockersCount = blockerSet.blockers.length;
		var weights = this.getWeightsForBlockers();
		var i = weights != null?weights.length:0;
		var baseWeight = 0;
		while(--blockersCount >= 0) {
			baseWeight = 0;
			i = weights.length;
			while(--i >= 0) {
				if(blockerSet.blockers[blockersCount].alias == weights[i].alias && (weights[i].step == 0 || weights[i].step == blockerSet.blockers[blockersCount].step)) {
					weight += weights[i].weight;
					break;
				}
				if(weights[i].alias == "blocker_base") {
					baseWeight = weights[i].weight;
				}
			}
			if(i < 0) {
				weight += baseWeight;
			}
		}
		return weight;
	}
	,getWeightsForItems: function() {
		var _this = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
		var key = this.targetId;
		var weights = (__map_reserved[key] != null?_this.getReserved(key):_this.h[key]).itemsWeights;
		if(weights == null) {
			var _this1 = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
			return (__map_reserved.target_base != null?_this1.getReserved("target_base"):_this1.h["target_base"]).itemsWeights;
		} else {
			var _this2 = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
			return weights.concat((__map_reserved.target_base != null?_this2.getReserved("target_base"):_this2.h["target_base"]).itemsWeights);
		}
	}
	,getWeightsForBlockers: function() {
		var _this = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
		var key = this.targetId;
		var weights = (__map_reserved[key] != null?_this.getReserved(key):_this.h[key]).blockersWeights;
		if(weights == null) {
			var _this1 = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
			return (__map_reserved.target_base != null?_this1.getReserved("target_base"):_this1.h["target_base"]).blockersWeights;
		} else {
			var _this2 = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
			return weights.concat((__map_reserved.target_base != null?_this2.getReserved("target_base"):_this2.h["target_base"]).blockersWeights);
		}
	}
	,getPopularColorForTarget: function(core) {
		return core.board.boardUtils.getPopularColors();
	}
	,__class__: com_sq_m3lib_game_gameTargets_GameTarget
};
var com_sq_m3lib_game_gameTargets_ScoreGameTarget = function(params) {
	com_sq_m3lib_game_gameTargets_GameTarget.call(this,params);
};
$hxClasses["com.sq.m3lib.game.gameTargets.ScoreGameTarget"] = com_sq_m3lib_game_gameTargets_ScoreGameTarget;
com_sq_m3lib_game_gameTargets_ScoreGameTarget.__name__ = true;
com_sq_m3lib_game_gameTargets_ScoreGameTarget.__super__ = com_sq_m3lib_game_gameTargets_GameTarget;
com_sq_m3lib_game_gameTargets_ScoreGameTarget.prototype = $extend(com_sq_m3lib_game_gameTargets_GameTarget.prototype,{
	getProgressClass: function() {
		return com_sq_m3lib_game_gameTargets_targetProgress_ScoreGameTargetProgress;
	}
	,__class__: com_sq_m3lib_game_gameTargets_ScoreGameTarget
});
var com_sq_m3lib_game_gameTargets_CollectItemGameTarget = function(params) {
	com_sq_m3lib_game_gameTargets_GameTarget.call(this,params);
	this._itemDescription = params.description;
};
$hxClasses["com.sq.m3lib.game.gameTargets.CollectItemGameTarget"] = com_sq_m3lib_game_gameTargets_CollectItemGameTarget;
com_sq_m3lib_game_gameTargets_CollectItemGameTarget.__name__ = true;
com_sq_m3lib_game_gameTargets_CollectItemGameTarget.__super__ = com_sq_m3lib_game_gameTargets_GameTarget;
com_sq_m3lib_game_gameTargets_CollectItemGameTarget.prototype = $extend(com_sq_m3lib_game_gameTargets_GameTarget.prototype,{
	getDescription: function() {
		return this._itemDescription;
	}
	,toJson: function() {
		var result = com_sq_m3lib_game_gameTargets_GameTarget.prototype.toJson.call(this);
		result.description = this._itemDescription;
		result.gravityParams = this.params.gravityParams;
		return result;
	}
	,getProgressClass: function() {
		return com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress;
	}
	,getPopularColorForTarget: function(core) {
		var colorsCount = new haxe_ds_IntMap();
		var result = [];
		var _g = 0;
		var _g1 = core.board.getItems();
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.getItemDescription().className == com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_GRAVITY_CHANGER) {
				var currentColor = item.getItemDescription().color;
				if(!colorsCount.h.hasOwnProperty(currentColor)) {
					colorsCount.h[currentColor] = 0;
					result.push(currentColor);
				}
				colorsCount.h[currentColor] = colorsCount.h[currentColor] + 1;
			}
		}
		haxe_ds_ArraySort.sort(result,function(val1,val2) {
			return colorsCount.h[val2] - colorsCount.h[val1];
		});
		return result;
	}
	,__class__: com_sq_m3lib_game_gameTargets_CollectItemGameTarget
});
var com_sq_m3lib_game_gameTargets_CollectGravityItemGameTarget = function(params) {
	com_sq_m3lib_game_gameTargets_CollectItemGameTarget.call(this,params);
};
$hxClasses["com.sq.m3lib.game.gameTargets.CollectGravityItemGameTarget"] = com_sq_m3lib_game_gameTargets_CollectGravityItemGameTarget;
com_sq_m3lib_game_gameTargets_CollectGravityItemGameTarget.__name__ = true;
com_sq_m3lib_game_gameTargets_CollectGravityItemGameTarget.__super__ = com_sq_m3lib_game_gameTargets_CollectItemGameTarget;
com_sq_m3lib_game_gameTargets_CollectGravityItemGameTarget.prototype = $extend(com_sq_m3lib_game_gameTargets_CollectItemGameTarget.prototype,{
	__class__: com_sq_m3lib_game_gameTargets_CollectGravityItemGameTarget
});
var com_sq_m3lib_game_gameTargets_ChangeGravityGameTarget = function(params) {
	com_sq_m3lib_game_gameTargets_GameTarget.call(this,params);
	this._gravityParams = params.gravityParams;
};
$hxClasses["com.sq.m3lib.game.gameTargets.ChangeGravityGameTarget"] = com_sq_m3lib_game_gameTargets_ChangeGravityGameTarget;
com_sq_m3lib_game_gameTargets_ChangeGravityGameTarget.__name__ = true;
com_sq_m3lib_game_gameTargets_ChangeGravityGameTarget.__super__ = com_sq_m3lib_game_gameTargets_GameTarget;
com_sq_m3lib_game_gameTargets_ChangeGravityGameTarget.prototype = $extend(com_sq_m3lib_game_gameTargets_GameTarget.prototype,{
	getGravityParams: function() {
		return this._gravityParams;
	}
	,getProgressClass: function() {
		return com_sq_m3lib_game_gameTargets_targetProgress_ChangeGravityTargetProgress;
	}
	,__class__: com_sq_m3lib_game_gameTargets_ChangeGravityGameTarget
});
var com_sq_m3lib_game_gameTargets_ReachTargetCellGameTarget = function(params) {
	com_sq_m3lib_game_gameTargets_CollectItemGameTarget.call(this,params);
	this._targetCellParams = params.reachCellParams;
};
$hxClasses["com.sq.m3lib.game.gameTargets.ReachTargetCellGameTarget"] = com_sq_m3lib_game_gameTargets_ReachTargetCellGameTarget;
com_sq_m3lib_game_gameTargets_ReachTargetCellGameTarget.__name__ = true;
com_sq_m3lib_game_gameTargets_ReachTargetCellGameTarget.__super__ = com_sq_m3lib_game_gameTargets_CollectItemGameTarget;
com_sq_m3lib_game_gameTargets_ReachTargetCellGameTarget.prototype = $extend(com_sq_m3lib_game_gameTargets_CollectItemGameTarget.prototype,{
	getTargetCellParams: function() {
		return this._targetCellParams;
	}
	,toJson: function() {
		var result = com_sq_m3lib_game_gameTargets_CollectItemGameTarget.prototype.toJson.call(this);
		result.reachCellParams = this._targetCellParams;
		return result;
	}
	,getProgressClass: function() {
		return com_sq_m3lib_game_gameTargets_targetProgress_ReachTargetCellsTargetProgress;
	}
	,getWeightForCell: function(cell,startCell,gameEngine) {
		var weight = com_sq_m3lib_game_gameTargets_CollectItemGameTarget.prototype.getWeightForCell.call(this,cell,startCell);
		if(weight == 0) {
			return 0;
		}
		if(gameEngine.collectablesManager.cellsOnCollectableWay.indexOf(cell) >= 0) {
			if(!cell.blockerSet.isEmpty()) {
				var _this = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
				weight += (__map_reserved.reach_target_cell != null?_this.getReserved("reach_target_cell"):_this.h["reach_target_cell"]).onPathBlockerWeight;
			}
			if(cell.hasItemInCell()) {
				var _this1 = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
				weight += (__map_reserved.reach_target_cell != null?_this1.getReserved("reach_target_cell"):_this1.h["reach_target_cell"]).onPathItemWeight;
			}
		}
		return weight;
	}
	,getPopularColorForTarget: function(core) {
		return core.board.boardUtils.getPopularColorsInArray(core.collectablesManager.getItemsOnCollectableWay());
	}
	,__class__: com_sq_m3lib_game_gameTargets_ReachTargetCellGameTarget
});
var com_sq_m3lib_game_gameTargets_DiscoverObjectGameTarget = function(params) {
	com_sq_m3lib_game_gameTargets_GameTarget.call(this,params);
};
$hxClasses["com.sq.m3lib.game.gameTargets.DiscoverObjectGameTarget"] = com_sq_m3lib_game_gameTargets_DiscoverObjectGameTarget;
com_sq_m3lib_game_gameTargets_DiscoverObjectGameTarget.__name__ = true;
com_sq_m3lib_game_gameTargets_DiscoverObjectGameTarget.__super__ = com_sq_m3lib_game_gameTargets_GameTarget;
com_sq_m3lib_game_gameTargets_DiscoverObjectGameTarget.prototype = $extend(com_sq_m3lib_game_gameTargets_GameTarget.prototype,{
	getProgressClass: function() {
		return com_sq_m3lib_game_gameTargets_targetProgress_DiscoverObjectsTargetProgress;
	}
	,getWeightForCell: function(cell,startCell,gameEngine) {
		var weight = com_sq_m3lib_game_gameTargets_GameTarget.prototype.getWeightForCell.call(this,cell,startCell);
		if(this.getHiddenWeight() == 0) {
			if(cell.hasCover() && !cell.hasHiddenObject()) {
				weight += 500;
			}
		} else if(cell.hasCover()) {
			weight += this.getHiddenWeight();
		}
		return weight;
	}
	,getHiddenWeight: function() {
		var _this = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
		return (__map_reserved.discover != null?_this.getReserved("discover"):_this.h["discover"]).mainTargetWeight;
	}
	,getPopularColorForTarget: function(core) {
		var colorsCount = new haxe_ds_IntMap();
		var result = [];
		var _g = 0;
		var _g1 = core.board.getCells();
		while(_g < _g1.length) {
			var row = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < row.length) {
				var cell = row[_g2];
				++_g2;
				if(cell.hasHiddenObject() && cell.getItem() != null) {
					var currentColor = cell.getItem().getItemDescription().color;
					if(!colorsCount.h.hasOwnProperty(currentColor)) {
						colorsCount.h[currentColor] = 0;
						result.push(currentColor);
					}
					colorsCount.h[currentColor] = colorsCount.h[currentColor] + 1;
				}
			}
		}
		haxe_ds_ArraySort.sort(result,function(val1,val2) {
			return colorsCount.h[val2] - colorsCount.h[val1];
		});
		return result;
	}
	,__class__: com_sq_m3lib_game_gameTargets_DiscoverObjectGameTarget
});
var com_sq_m3lib_game_gameTargets_CollectBlockerGameTarget = function(params) {
	com_sq_m3lib_game_gameTargets_GameTarget.call(this,params);
	this._blockerAlias = params.blocker;
};
$hxClasses["com.sq.m3lib.game.gameTargets.CollectBlockerGameTarget"] = com_sq_m3lib_game_gameTargets_CollectBlockerGameTarget;
com_sq_m3lib_game_gameTargets_CollectBlockerGameTarget.__name__ = true;
com_sq_m3lib_game_gameTargets_CollectBlockerGameTarget.__super__ = com_sq_m3lib_game_gameTargets_GameTarget;
com_sq_m3lib_game_gameTargets_CollectBlockerGameTarget.prototype = $extend(com_sq_m3lib_game_gameTargets_GameTarget.prototype,{
	getBlockerAlias: function() {
		return this._blockerAlias;
	}
	,toJson: function() {
		var result = com_sq_m3lib_game_gameTargets_GameTarget.prototype.toJson.call(this);
		result.blocker = this._blockerAlias;
		return result;
	}
	,getProgressClass: function() {
		return com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress;
	}
	,__class__: com_sq_m3lib_game_gameTargets_CollectBlockerGameTarget
});
var com_sq_m3lib_game_gameTargets_CollectViralBlockerGameTarget = function(params) {
	com_sq_m3lib_game_gameTargets_CollectBlockerGameTarget.call(this,params);
};
$hxClasses["com.sq.m3lib.game.gameTargets.CollectViralBlockerGameTarget"] = com_sq_m3lib_game_gameTargets_CollectViralBlockerGameTarget;
com_sq_m3lib_game_gameTargets_CollectViralBlockerGameTarget.__name__ = true;
com_sq_m3lib_game_gameTargets_CollectViralBlockerGameTarget.__super__ = com_sq_m3lib_game_gameTargets_CollectBlockerGameTarget;
com_sq_m3lib_game_gameTargets_CollectViralBlockerGameTarget.prototype = $extend(com_sq_m3lib_game_gameTargets_CollectBlockerGameTarget.prototype,{
	getProgressClass: function() {
		return com_sq_m3lib_game_gameTargets_targetProgress_CollectViralBlockersGameTargetProgress;
	}
	,getPopularColorForTarget: function(core) {
		return core.board.boardUtils.getPopularColorsInArray(core.board.boardUtils.getItemsFromCellArray(core.viralBlockerManager.getCellsByBlockerAlias(this._blockerAlias)));
	}
	,__class__: com_sq_m3lib_game_gameTargets_CollectViralBlockerGameTarget
});
var com_sq_m3lib_game_gameTargets_LockedCollectablesGameTarget = function(params) {
	com_sq_m3lib_game_gameTargets_CollectItemGameTarget.call(this,params);
};
$hxClasses["com.sq.m3lib.game.gameTargets.LockedCollectablesGameTarget"] = com_sq_m3lib_game_gameTargets_LockedCollectablesGameTarget;
com_sq_m3lib_game_gameTargets_LockedCollectablesGameTarget.__name__ = true;
com_sq_m3lib_game_gameTargets_LockedCollectablesGameTarget.__super__ = com_sq_m3lib_game_gameTargets_CollectItemGameTarget;
com_sq_m3lib_game_gameTargets_LockedCollectablesGameTarget.prototype = $extend(com_sq_m3lib_game_gameTargets_CollectItemGameTarget.prototype,{
	getProgressClass: function() {
		return com_sq_m3lib_game_gameTargets_targetProgress_LockedCollectablesTargetProgress;
	}
	,__class__: com_sq_m3lib_game_gameTargets_LockedCollectablesGameTarget
});
var com_sq_m3lib_game_gameTargets_CaptureCellsGameTarget = function(params) {
	com_sq_m3lib_game_gameTargets_GameTarget.call(this,params);
};
$hxClasses["com.sq.m3lib.game.gameTargets.CaptureCellsGameTarget"] = com_sq_m3lib_game_gameTargets_CaptureCellsGameTarget;
com_sq_m3lib_game_gameTargets_CaptureCellsGameTarget.__name__ = true;
com_sq_m3lib_game_gameTargets_CaptureCellsGameTarget.__super__ = com_sq_m3lib_game_gameTargets_GameTarget;
com_sq_m3lib_game_gameTargets_CaptureCellsGameTarget.prototype = $extend(com_sq_m3lib_game_gameTargets_GameTarget.prototype,{
	getProgressClass: function() {
		return com_sq_m3lib_game_gameTargets_targetProgress_CaptureCellsTargetProgress;
	}
	,getWeightForCell: function(cell,startCell,gameEngine) {
		var weight = com_sq_m3lib_game_gameTargets_GameTarget.prototype.getWeightForCell.call(this,cell,startCell);
		if(startCell.captured != null) {
			if(cell.captured == null) {
				if(!cell.blockerSet.isEmpty()) {
					var _this = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
					weight += (__map_reserved.capture_cells != null?_this.getReserved("capture_cells"):_this.h["capture_cells"]).notCapturedBlocker;
				} else {
					var _this1 = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
					weight += (__map_reserved.capture_cells != null?_this1.getReserved("capture_cells"):_this1.h["capture_cells"]).anyNotCaptured;
				}
			} else if(startCell.captured.type != cell.captured.type) {
				var _this2 = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
				weight += (__map_reserved.capture_cells != null?_this2.getReserved("capture_cells"):_this2.h["capture_cells"]).capturedByOther;
			}
		}
		return weight;
	}
	,__class__: com_sq_m3lib_game_gameTargets_CaptureCellsGameTarget
});
var com_sq_m3lib_coreSettings_CoreClassesDictionary = function() {
	this.boosterAliases = ["colorRemover","crossRemover","extraHoming","freeMove","oneRemover","starterPack"];
};
$hxClasses["com.sq.m3lib.coreSettings.CoreClassesDictionary"] = com_sq_m3lib_coreSettings_CoreClassesDictionary;
com_sq_m3lib_coreSettings_CoreClassesDictionary.__name__ = true;
com_sq_m3lib_coreSettings_CoreClassesDictionary.cloneDef = function(def) {
	var result = { };
	var _g = 0;
	var _g1 = Reflect.fields(def);
	while(_g < _g1.length) {
		var param = _g1[_g];
		++_g;
		var tmp;
		var tmp1;
		if(def == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(def.__properties__) {
				tmp = def.__properties__["get_" + param];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = def[tmp]();
			} else {
				tmp1 = def[param];
			}
		}
		result[param] = tmp1;
	}
	return result;
};
com_sq_m3lib_coreSettings_CoreClassesDictionary.cloneDefTo = function(def,copyDef) {
	var _g = 0;
	var _g1 = Reflect.fields(def);
	while(_g < _g1.length) {
		var param = _g1[_g];
		++_g;
		var tmp;
		var tmp1;
		if(def == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(def.__properties__) {
				tmp = def.__properties__["get_" + param];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = def[tmp]();
			} else {
				tmp1 = def[param];
			}
		}
		if(tmp1 != null) {
			var tmp3;
			var tmp4;
			if(def == null) {
				tmp4 = null;
			} else {
				var tmp5;
				if(def.__properties__) {
					tmp3 = def.__properties__["get_" + param];
					tmp5 = tmp3;
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					tmp4 = def[tmp3]();
				} else {
					tmp4 = def[param];
				}
			}
			copyDef[param] = tmp4;
		}
	}
};
com_sq_m3lib_coreSettings_CoreClassesDictionary.prototype = {
	__class__: com_sq_m3lib_coreSettings_CoreClassesDictionary
};
var com_sq_m3lib_geometry_CellVector = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["com.sq.m3lib.geometry.CellVector"] = com_sq_m3lib_geometry_CellVector;
com_sq_m3lib_geometry_CellVector.__name__ = true;
com_sq_m3lib_geometry_CellVector.ofSameDirection = function(v1,v2) {
	if(v1 == null || v2 == null) {
		return true;
	}
	return com_sq_m3lib_math_CoreMathUtils.abs(v1.x + v2.x) + com_sq_m3lib_math_CoreMathUtils.abs(v1.y + v2.y) > 0;
};
com_sq_m3lib_geometry_CellVector.add = function(v1,v2) {
	if(v1 == null) {
		return v2.clone();
	}
	if(v2 == null) {
		return v1.clone();
	}
	return new com_sq_m3lib_geometry_CellVector(v1.x + v2.x,v1.y + v2.y);
};
com_sq_m3lib_geometry_CellVector.substract = function(v1,v2) {
	if(v1 == null) {
		return new com_sq_m3lib_geometry_CellVector(-v2.x,-v2.y);
	}
	if(v2 == null) {
		return v1.clone();
	}
	return new com_sq_m3lib_geometry_CellVector(v1.x - v2.x,v1.y - v2.y);
};
com_sq_m3lib_geometry_CellVector.multiply = function(v1,v2) {
	return v1.x * v2.x + v1.y * v2.y;
};
com_sq_m3lib_geometry_CellVector.rotateCoords = function(x,y,currentVector,rotateVector) {
	return new com_sq_m3lib_geometry_Coord(y * rotateVector.x * currentVector.y,x * rotateVector.y * currentVector.x);
};
com_sq_m3lib_geometry_CellVector.getNormals = function(vector) {
	var resultX = 0;
	var resultY = 0;
	if(vector == null) {
		return [new com_sq_m3lib_geometry_CellVector(0,0)];
	}
	if(vector.x != 0) {
		resultY = vector.x;
	} else {
		resultX = vector.y;
	}
	var result = [];
	result.push(new com_sq_m3lib_geometry_CellVector(resultX,resultY));
	result.push(new com_sq_m3lib_geometry_CellVector(-resultX,-resultY));
	return result;
};
com_sq_m3lib_geometry_CellVector.areEqual = function(v1,v2) {
	if(v1.x == v2.x) {
		return v1.y == v2.y;
	} else {
		return false;
	}
};
com_sq_m3lib_geometry_CellVector.prototype = {
	get_x: function() {
		return this.x;
	}
	,get_y: function() {
		return this.y;
	}
	,absoluteX: function() {
		if(this.x >= 0) {
			return this.x;
		}
		return -this.x;
	}
	,absoluteY: function() {
		if(this.y >= 0) {
			return this.y;
		}
		return -this.y;
	}
	,getAxisLengthSumm: function() {
		return this.absoluteX() + this.absoluteY();
	}
	,getSignedAxisLength: function() {
		return this.x + this.y;
	}
	,toViewPoint: function() {
		return { x : this.x, y : this.y};
	}
	,clone: function() {
		return new com_sq_m3lib_geometry_CellVector(this.x,this.y);
	}
	,__class__: com_sq_m3lib_geometry_CellVector
};
var com_sq_m3lib_coreSettings_CoreSettings = function() {
};
$hxClasses["com.sq.m3lib.coreSettings.CoreSettings"] = com_sq_m3lib_coreSettings_CoreSettings;
com_sq_m3lib_coreSettings_CoreSettings.__name__ = true;
com_sq_m3lib_coreSettings_CoreSettings.getVectorByDirection = function(direction) {
	switch(direction) {
	case 0:
		return new com_sq_m3lib_geometry_CellVector(0,1);
	case 1:
		return new com_sq_m3lib_geometry_CellVector(-1,0);
	case 2:
		return new com_sq_m3lib_geometry_CellVector(0,-1);
	case 3:
		return new com_sq_m3lib_geometry_CellVector(1,0);
	default:
		return null;
	}
};
com_sq_m3lib_coreSettings_CoreSettings.getOppositeDirection = function(moveDirection) {
	return (moveDirection + 2) % 4;
};
com_sq_m3lib_coreSettings_CoreSettings.getDirectionByVector = function(vector) {
	if(vector.x < 0) {
		return 1;
	} else if(vector.x > 0) {
		return 3;
	} else if(vector.y < 0) {
		return 2;
	} else {
		return 0;
	}
};
com_sq_m3lib_coreSettings_CoreSettings.getConfigFromJson = function(source) {
	return JSON.parse(source);
};
com_sq_m3lib_coreSettings_CoreSettings.init = function(parsed) {
	if(parsed == null) {
		parsed = com_sq_m3lib_coreSettings_CoreSettings.createTypedDef();
	}
	com_sq_m3lib_coreSettings_CoreSettings.scoreParams = parsed.scoreParams != null?com_sq_m3lib_coreSettings_CoreSettings.parseScoreSettings(parsed.scoreParams):com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultScoreParams;
	com_sq_m3lib_coreSettings_CoreSettings.bombScenarioSettings = parsed.bombScenarioSettings != null?com_sq_m3lib_coreSettings_CoreSettings.parseBombScenarioSettings(parsed.bombScenarioSettings):com_sq_m3lib_coreSettings_CoreSettings.parseBombScenarioSettings(com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultBombScenarioParams);
	com_sq_m3lib_coreSettings_CoreSettings.moveParams = parsed.moveParams != null?parsed.moveParams:com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultMoveParams;
	com_sq_m3lib_coreSettings_CoreSettings.animationParams = parsed.animationParams != null?com_sq_m3lib_coreSettings_CoreSettings.parseAnimationSettings(parsed.animationParams):com_sq_m3lib_coreSettings_CoreSettings.parseAnimationSettings(com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultAnimationParams);
	com_sq_m3lib_coreSettings_CoreSettings.viralParams = parsed.viralParams != null?parsed.viralParams:com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultViralParams;
	com_sq_m3lib_coreSettings_CoreSettings.homingBombParams = parsed.homingBombParams != null?parsed.homingBombParams:com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultHomingBombParams;
	com_sq_m3lib_coreSettings_CoreSettings.blockerParams = parsed.blockerParams != null?parsed.blockerParams:com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultBlockerParams;
	com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget = parsed.cellWeightsByTarget != null?com_sq_m3lib_coreSettings_CoreSettings.parseWeightSettings(parsed.cellWeightsByTarget):com_sq_m3lib_coreSettings_CoreSettings.parseWeightSettings(com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultCellWeights);
	com_sq_m3lib_coreSettings_CoreSettings.baseGravityDirection = parsed.baseGravityDirection != null?parsed.baseGravityDirection:0;
	com_sq_m3lib_coreSettings_CoreSettings.maxShuffleTries = parsed.maxShuffleTries != null?parsed.maxShuffleTries:100;
	com_sq_m3lib_coreSettings_CoreSettings.maxRerollTries = parsed.maxRerollTries != null?parsed.maxRerollTries:100;
	com_sq_m3lib_coreSettings_CoreSettings.clientTickDelta = parsed.clientTickDelta != null?parsed.clientTickDelta:16;
	com_sq_m3lib_coreSettings_CoreSettings.levelFinishParams = parsed.levelFinishParams != null?parsed.levelFinishParams:com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultLevelFinishBoostParams;
};
com_sq_m3lib_coreSettings_CoreSettings.toJson = function() {
	var parsed = com_sq_m3lib_coreSettings_CoreSettings.createTypedDef();
	parsed.scoreParams = com_sq_m3lib_coreSettings_CoreSettings.createTypedDef();
	parsed.scoreParams.minCombo = com_sq_m3lib_coreSettings_CoreSettings.scoreParams.minCombo;
	parsed.scoreParams.maxBonusMutiplier = com_sq_m3lib_coreSettings_CoreSettings.scoreParams.maxBonusMutiplier;
	parsed.scoreParams.itemsScore = com_sq_m3lib_coreSettings_CoreSettings.scoreParams.itemsScore;
	parsed.scoreParams.comboScoreDictionary = [];
	var _this = com_sq_m3lib_coreSettings_CoreSettings.scoreParams.comboScoreDictionary;
	var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(tmp.hasNext()) parsed.scoreParams.comboScoreDictionary.push(tmp.next());
	parsed.bombScenarioSettings = [];
	var _this1 = com_sq_m3lib_coreSettings_CoreSettings.bombScenarioSettings;
	var tmp1 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
	while(tmp1.hasNext()) parsed.bombScenarioSettings.push(tmp1.next());
	parsed.moveParams = com_sq_m3lib_coreSettings_CoreSettings.moveParams;
	parsed.animationParams = [];
	var _this2 = com_sq_m3lib_coreSettings_CoreSettings.animationParams;
	var tmp2 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
	while(tmp2.hasNext()) parsed.animationParams.push(tmp2.next());
	parsed.viralParams = com_sq_m3lib_coreSettings_CoreSettings.viralParams;
	parsed.homingBombParams = com_sq_m3lib_coreSettings_CoreSettings.homingBombParams;
	parsed.blockerParams = com_sq_m3lib_coreSettings_CoreSettings.blockerParams;
	parsed.cellWeightsByTarget = [];
	var _this3 = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
	var tmp3 = new haxe_ds__$StringMap_StringMapIterator(_this3,_this3.arrayKeys());
	while(tmp3.hasNext()) parsed.cellWeightsByTarget.push(tmp3.next());
	parsed.baseGravityDirection = com_sq_m3lib_coreSettings_CoreSettings.baseGravityDirection;
	parsed.maxShuffleTries = com_sq_m3lib_coreSettings_CoreSettings.maxShuffleTries;
	parsed.maxRerollTries = com_sq_m3lib_coreSettings_CoreSettings.maxRerollTries;
	parsed.clientTickDelta = com_sq_m3lib_coreSettings_CoreSettings.clientTickDelta;
	parsed.levelFinishParams = com_sq_m3lib_coreSettings_CoreSettings.levelFinishParams;
	return parsed;
};
com_sq_m3lib_coreSettings_CoreSettings.parseBombScenarioSettings = function(object) {
	var result = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < object.length) {
		var params = object[_g];
		++_g;
		var key = params.id;
		if(__map_reserved[key] != null) {
			result.setReserved(key,params);
		} else {
			result.h[key] = params;
		}
	}
	return result;
};
com_sq_m3lib_coreSettings_CoreSettings.parseAnimationSettings = function(object) {
	var result = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < object.length) {
		var params = object[_g];
		++_g;
		var key = params.id;
		if(__map_reserved[key] != null) {
			result.setReserved(key,params);
		} else {
			result.h[key] = params;
		}
	}
	return result;
};
com_sq_m3lib_coreSettings_CoreSettings.parseWeightSettings = function(object) {
	var result = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < object.length) {
		var params = object[_g];
		++_g;
		var key = params.id;
		if(__map_reserved[key] != null) {
			result.setReserved(key,params);
		} else {
			result.h[key] = params;
		}
	}
	return result;
};
com_sq_m3lib_coreSettings_CoreSettings.parseScoreSettings = function(object) {
	var result = com_sq_m3lib_coreSettings_CoreSettings.createTypedDef();
	result.itemsScore = object.itemsScore;
	result.maxBonusMutiplier = object.maxBonusMutiplier;
	result.minCombo = object.minCombo;
	result.comboScoreDictionary = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = object.comboScoreDictionary;
	while(_g < _g1.length) {
		var params = _g1[_g];
		++_g;
		var _this = result.comboScoreDictionary;
		var key = params.comboSize;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,params);
		} else {
			_this.h[key] = params;
		}
	}
	return result;
};
com_sq_m3lib_coreSettings_CoreSettings.createTypedDef = function() {
	var result = { };
	return result;
};
com_sq_m3lib_coreSettings_CoreSettings.prototype = {
	__class__: com_sq_m3lib_coreSettings_CoreSettings
};
var com_sq_m3lib_coreSettings_CoreSettingsDefault = function() {
};
$hxClasses["com.sq.m3lib.coreSettings.CoreSettingsDefault"] = com_sq_m3lib_coreSettings_CoreSettingsDefault;
com_sq_m3lib_coreSettings_CoreSettingsDefault.__name__ = true;
com_sq_m3lib_coreSettings_CoreSettingsDefault.getDefaultParams = function() {
	var result = new com_sq_m3lib_game_GameParams();
	result.viewPortSize = new com_sq_m3lib_geometry_Size(9,9);
	result.totalMaxCommonColors = 7;
	result.combinations = com_sq_m3lib_coreSettings_CoreSettingsDefault.getDefaultTemplates();
	result.specialCombinations = [];
	result.itemScore = [];
	result.animationConfig = new haxe_ds_StringMap();
	result.blockersActivationRule = [];
	result.viralPriorityRules = [];
	result.viralIncreaseProbability = com_sq_m3lib_coreSettings_CoreSettings.viralParams.baseIncreaseProbability;
	return result;
};
com_sq_m3lib_coreSettings_CoreSettingsDefault.getDefaultTemplates = function() {
	var result = [];
	result.push({ priority : 1, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0}], item : null, special : [], secondary : [], scenario : "", type : ["horizontal"]});
	result.push({ priority : 2, cells : [{ x : 0, y : 0},{ x : 0, y : 1},{ x : 0, y : 2}], item : null, special : [], secondary : [], scenario : "", type : ["vertical"]});
	return result;
};
com_sq_m3lib_coreSettings_CoreSettingsDefault.prototype = {
	__class__: com_sq_m3lib_coreSettings_CoreSettingsDefault
};
var com_sq_m3lib_events_CoreEvent = function(eventName,params) {
	this._stopDispatching = false;
	this._name = eventName;
	this._params = params;
};
$hxClasses["com.sq.m3lib.events.CoreEvent"] = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreEvent.__name__ = true;
com_sq_m3lib_events_CoreEvent.prototype = {
	getName: function() {
		return this._name;
	}
	,getParams: function() {
		return this._params;
	}
	,stopDispatching: function() {
		this._stopDispatching = true;
	}
	,needStopDispatching: function() {
		return this._stopDispatching;
	}
	,__class__: com_sq_m3lib_events_CoreEvent
};
var com_sq_m3lib_events_CoreAddScoreEvent = function(score,scoreStarter,cause) {
	com_sq_m3lib_events_CoreEvent.call(this,com_sq_m3lib_events_CoreAddScoreEvent.ADD_SCORE);
	this._score = score;
	this._cause = cause;
	this._scoreStarter = scoreStarter;
};
$hxClasses["com.sq.m3lib.events.CoreAddScoreEvent"] = com_sq_m3lib_events_CoreAddScoreEvent;
com_sq_m3lib_events_CoreAddScoreEvent.__name__ = true;
com_sq_m3lib_events_CoreAddScoreEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreAddScoreEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getScore: function() {
		return this._score;
	}
	,getCause: function() {
		return this._cause;
	}
	,getScoreStarter: function() {
		return this._scoreStarter;
	}
	,__class__: com_sq_m3lib_events_CoreAddScoreEvent
});
var com_sq_m3lib_events_CoreBlockerEvent = function(name,blocker,cause,destroyInfo) {
	if(cause == null) {
		cause = "";
	}
	com_sq_m3lib_events_CoreEvent.call(this,name);
	this._blocker = blocker;
	this._cause = cause;
	this._destroyInfo = destroyInfo;
};
$hxClasses["com.sq.m3lib.events.CoreBlockerEvent"] = com_sq_m3lib_events_CoreBlockerEvent;
com_sq_m3lib_events_CoreBlockerEvent.__name__ = true;
com_sq_m3lib_events_CoreBlockerEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreBlockerEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getBlocker: function() {
		return this._blocker;
	}
	,getCause: function() {
		return this._cause;
	}
	,getDestroyInfo: function() {
		return this._destroyInfo;
	}
	,__class__: com_sq_m3lib_events_CoreBlockerEvent
});
var com_sq_m3lib_events_CoreBoosterEvent = function(booster,params) {
	com_sq_m3lib_events_CoreEvent.call(this,"booster_activated");
	this._booster = booster;
	this._applyParams = params;
};
$hxClasses["com.sq.m3lib.events.CoreBoosterEvent"] = com_sq_m3lib_events_CoreBoosterEvent;
com_sq_m3lib_events_CoreBoosterEvent.__name__ = true;
com_sq_m3lib_events_CoreBoosterEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreBoosterEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getBooster: function() {
		return this._booster;
	}
	,getApplyParams: function() {
		return this._applyParams;
	}
	,__class__: com_sq_m3lib_events_CoreBoosterEvent
});
var com_sq_m3lib_events_CoreCaptureCellEvent = function(cell) {
	com_sq_m3lib_events_CoreEvent.call(this,com_sq_m3lib_events_CoreCaptureCellEvent.CAPTURED);
	this._cell = cell;
};
$hxClasses["com.sq.m3lib.events.CoreCaptureCellEvent"] = com_sq_m3lib_events_CoreCaptureCellEvent;
com_sq_m3lib_events_CoreCaptureCellEvent.__name__ = true;
com_sq_m3lib_events_CoreCaptureCellEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreCaptureCellEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getCell: function() {
		return this._cell;
	}
	,__class__: com_sq_m3lib_events_CoreCaptureCellEvent
});
var com_sq_m3lib_events_CoreCellGravityUpdateEvent = function(cells) {
	com_sq_m3lib_events_CoreEvent.call(this,com_sq_m3lib_events_CoreCellGravityUpdateEvent.CHANGE_CELL_MOVE_VECTOR);
	this._cells = cells;
};
$hxClasses["com.sq.m3lib.events.CoreCellGravityUpdateEvent"] = com_sq_m3lib_events_CoreCellGravityUpdateEvent;
com_sq_m3lib_events_CoreCellGravityUpdateEvent.__name__ = true;
com_sq_m3lib_events_CoreCellGravityUpdateEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreCellGravityUpdateEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getCells: function() {
		return this._cells;
	}
	,__class__: com_sq_m3lib_events_CoreCellGravityUpdateEvent
});
var com_sq_m3lib_events_CoreCellHitEvent = function(cell,starter,cause,scenario) {
	com_sq_m3lib_events_CoreEvent.call(this,"cell_hit");
	this.cell = cell;
	this.starter = starter;
	this.cause = cause;
	this.scenario = scenario;
};
$hxClasses["com.sq.m3lib.events.CoreCellHitEvent"] = com_sq_m3lib_events_CoreCellHitEvent;
com_sq_m3lib_events_CoreCellHitEvent.__name__ = true;
com_sq_m3lib_events_CoreCellHitEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreCellHitEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	__class__: com_sq_m3lib_events_CoreCellHitEvent
});
var com_sq_m3lib_events_CoreComboEvent = function(combo) {
	com_sq_m3lib_events_CoreEvent.call(this,"destroyed");
	this._combo = combo;
};
$hxClasses["com.sq.m3lib.events.CoreComboEvent"] = com_sq_m3lib_events_CoreComboEvent;
com_sq_m3lib_events_CoreComboEvent.__name__ = true;
com_sq_m3lib_events_CoreComboEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreComboEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getCombo: function() {
		return this._combo;
	}
	,__class__: com_sq_m3lib_events_CoreComboEvent
});
var com_sq_m3lib_events_CoreError = function(name,message) {
	if(message == null) {
		message = "";
	}
	com_sq_m3lib_events_CoreEvent.call(this,name);
	this.message = message;
};
$hxClasses["com.sq.m3lib.events.CoreError"] = com_sq_m3lib_events_CoreError;
com_sq_m3lib_events_CoreError.__name__ = true;
com_sq_m3lib_events_CoreError.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreError.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	__class__: com_sq_m3lib_events_CoreError
});
var com_sq_m3lib_events_CoreEventCallback = function(callback,priority) {
	this._callback = callback;
	this._priority = priority;
};
$hxClasses["com.sq.m3lib.events.CoreEventCallback"] = com_sq_m3lib_events_CoreEventCallback;
com_sq_m3lib_events_CoreEventCallback.__name__ = true;
com_sq_m3lib_events_CoreEventCallback.prototype = {
	getPriority: function() {
		return this._priority;
	}
	,getCallback: function() {
		return this._callback;
	}
	,__class__: com_sq_m3lib_events_CoreEventCallback
};
var com_sq_m3lib_events_CoreEventDispatcher = function() {
	this._callbacks = new haxe_ds_StringMap();
};
$hxClasses["com.sq.m3lib.events.CoreEventDispatcher"] = com_sq_m3lib_events_CoreEventDispatcher;
com_sq_m3lib_events_CoreEventDispatcher.__name__ = true;
com_sq_m3lib_events_CoreEventDispatcher.getInstance = function() {
	if(com_sq_m3lib_events_CoreEventDispatcher._instance == null) {
		com_sq_m3lib_events_CoreEventDispatcher._instance = new com_sq_m3lib_events_CoreEventDispatcher();
	}
	return com_sq_m3lib_events_CoreEventDispatcher._instance;
};
com_sq_m3lib_events_CoreEventDispatcher.prototype = {
	addEventCallback: function(event,callback,priority) {
		if(priority == null) {
			priority = 0;
		}
		var _this = this._callbacks;
		if((__map_reserved[event] != null?_this.getReserved(event):_this.h[event]) == null) {
			var v = [];
			var _this1 = this._callbacks;
			if(__map_reserved[event] != null) {
				_this1.setReserved(event,v);
			} else {
				_this1.h[event] = v;
			}
		} else {
			var _this2 = this._callbacks;
			var i = (__map_reserved[event] != null?_this2.getReserved(event):_this2.h[event]).length;
			while(--i >= 0) {
				var _this3 = this._callbacks;
				if(Reflect.compareMethods((__map_reserved[event] != null?_this3.getReserved(event):_this3.h[event])[i].getCallback(),callback)) {
					com_sq_m3lib_log_CoreLog.log("CoreError_DUBLICATE_EVENT" + ":" + event);
					com_sq_m3lib_log_CoreLog.log(haxe_CallStack.toString(haxe_CallStack.callStack()));
					return null;
				}
			}
		}
		var eventCallback = new com_sq_m3lib_events_CoreEventCallback(callback,priority);
		var _this4 = this._callbacks;
		(__map_reserved[event] != null?_this4.getReserved(event):_this4.h[event]).push(eventCallback);
		var _this5 = this._callbacks;
		haxe_ds_ArraySort.sort(__map_reserved[event] != null?_this5.getReserved(event):_this5.h[event],function(val1,val2) {
			return val2.getPriority() - val1.getPriority();
		});
		return eventCallback;
	}
	,removeEventCallback: function(event,callback) {
		var _this = this._callbacks;
		if((__map_reserved[event] != null?_this.getReserved(event):_this.h[event]) == null) {
			return;
		}
		if(callback == null) {
			return;
		}
		var _this1 = this._callbacks;
		if((__map_reserved[event] != null?_this1.getReserved(event):_this1.h[event]).indexOf(callback) >= 0) {
			var _this2 = this._callbacks;
			HxOverrides.remove(__map_reserved[event] != null?_this2.getReserved(event):_this2.h[event],callback);
		}
	}
	,dispatchEvent: function(event) {
		var key = event.getName();
		var _this = this._callbacks;
		if((__map_reserved[key] != null?_this.getReserved(key):_this.h[key]) == null) {
			return;
		}
		var key1 = event.getName();
		var _this1 = this._callbacks;
		var _callbackCopy = (__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]).slice();
		var i = -1;
		var length = _callbackCopy.length;
		while(++i < length) {
			(_callbackCopy[i].getCallback())(event);
			if(event.needStopDispatching()) {
				break;
			}
		}
	}
	,getEventCallbacks: function(eventName) {
		var _this = this._callbacks;
		if((__map_reserved[eventName] != null?_this.getReserved(eventName):_this.h[eventName]) == null) {
			return [];
		}
		var _this1 = this._callbacks;
		return (__map_reserved[eventName] != null?_this1.getReserved(eventName):_this1.h[eventName]).slice();
	}
	,__class__: com_sq_m3lib_events_CoreEventDispatcher
};
var com_sq_m3lib_events_CoreEventPriority = function() { };
$hxClasses["com.sq.m3lib.events.CoreEventPriority"] = com_sq_m3lib_events_CoreEventPriority;
com_sq_m3lib_events_CoreEventPriority.__name__ = true;
var com_sq_m3lib_events_CoreFailLevelBoostEvent = function(event,count) {
	if(count == null) {
		count = 0;
	}
	com_sq_m3lib_events_CoreEvent.call(this,event);
	this.count = count;
};
$hxClasses["com.sq.m3lib.events.CoreFailLevelBoostEvent"] = com_sq_m3lib_events_CoreFailLevelBoostEvent;
com_sq_m3lib_events_CoreFailLevelBoostEvent.__name__ = true;
com_sq_m3lib_events_CoreFailLevelBoostEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreFailLevelBoostEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	__class__: com_sq_m3lib_events_CoreFailLevelBoostEvent
});
var com_sq_m3lib_events_CoreFinishLevelBoostEvent = function(event) {
	com_sq_m3lib_events_CoreEvent.call(this,event);
};
$hxClasses["com.sq.m3lib.events.CoreFinishLevelBoostEvent"] = com_sq_m3lib_events_CoreFinishLevelBoostEvent;
com_sq_m3lib_events_CoreFinishLevelBoostEvent.__name__ = true;
com_sq_m3lib_events_CoreFinishLevelBoostEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreFinishLevelBoostEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	__class__: com_sq_m3lib_events_CoreFinishLevelBoostEvent
});
var com_sq_m3lib_events_CoreHiddenObjectEvent = function(name,cell,object) {
	com_sq_m3lib_events_CoreEvent.call(this,name);
	this._cell = cell;
	this._object = object;
};
$hxClasses["com.sq.m3lib.events.CoreHiddenObjectEvent"] = com_sq_m3lib_events_CoreHiddenObjectEvent;
com_sq_m3lib_events_CoreHiddenObjectEvent.__name__ = true;
com_sq_m3lib_events_CoreHiddenObjectEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreHiddenObjectEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getCell: function() {
		return this._cell;
	}
	,getObject: function() {
		return this._object;
	}
	,__class__: com_sq_m3lib_events_CoreHiddenObjectEvent
});
var com_sq_m3lib_events_CoreItemAddedEvent = function(name,items) {
	com_sq_m3lib_events_CoreEvent.call(this,name);
	this._items = items;
};
$hxClasses["com.sq.m3lib.events.CoreItemAddedEvent"] = com_sq_m3lib_events_CoreItemAddedEvent;
com_sq_m3lib_events_CoreItemAddedEvent.__name__ = true;
com_sq_m3lib_events_CoreItemAddedEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreItemAddedEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getItems: function() {
		return this._items;
	}
	,__class__: com_sq_m3lib_events_CoreItemAddedEvent
});
var com_sq_m3lib_events_CoreItemChangedEvent = function(priviousItem,newItem,cell) {
	com_sq_m3lib_events_CoreEvent.call(this,com_sq_m3lib_events_CoreItemChangedEvent.CHANGE_ITEM_IN_CELL);
	this._previousItem = priviousItem;
	this._newItem = newItem;
	this._cell = cell;
};
$hxClasses["com.sq.m3lib.events.CoreItemChangedEvent"] = com_sq_m3lib_events_CoreItemChangedEvent;
com_sq_m3lib_events_CoreItemChangedEvent.__name__ = true;
com_sq_m3lib_events_CoreItemChangedEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreItemChangedEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getPreviousItem: function() {
		return this._previousItem;
	}
	,getItem: function() {
		return this._newItem;
	}
	,getCell: function() {
		return this._cell;
	}
	,__class__: com_sq_m3lib_events_CoreItemChangedEvent
});
var com_sq_m3lib_events_CoreItemDestroyEvent = function(name,item,cause,targetAnimationCell,params) {
	com_sq_m3lib_events_CoreEvent.call(this,name,params);
	this._item = item;
	this._cause = cause;
	this._targetAnimationCell = targetAnimationCell;
};
$hxClasses["com.sq.m3lib.events.CoreItemDestroyEvent"] = com_sq_m3lib_events_CoreItemDestroyEvent;
com_sq_m3lib_events_CoreItemDestroyEvent.__name__ = true;
com_sq_m3lib_events_CoreItemDestroyEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreItemDestroyEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getItem: function() {
		return this._item;
	}
	,getCause: function() {
		return this._cause;
	}
	,getTargetAnimationCell: function() {
		return this._targetAnimationCell;
	}
	,__class__: com_sq_m3lib_events_CoreItemDestroyEvent
});
var com_sq_m3lib_events_CoreItemPositionUpdatedEvent = function(items,params) {
	com_sq_m3lib_events_CoreEvent.call(this,"item_position_changed",params);
	this._items = items;
};
$hxClasses["com.sq.m3lib.events.CoreItemPositionUpdatedEvent"] = com_sq_m3lib_events_CoreItemPositionUpdatedEvent;
com_sq_m3lib_events_CoreItemPositionUpdatedEvent.__name__ = true;
com_sq_m3lib_events_CoreItemPositionUpdatedEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreItemPositionUpdatedEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getItems: function() {
		return this._items;
	}
	,__class__: com_sq_m3lib_events_CoreItemPositionUpdatedEvent
});
var com_sq_m3lib_events_CoreItemsSwitchEvent = function(eventName,item,switchItem,params) {
	com_sq_m3lib_events_CoreEvent.call(this,eventName,params);
	this._item = item;
	this._switchItem = switchItem;
};
$hxClasses["com.sq.m3lib.events.CoreItemsSwitchEvent"] = com_sq_m3lib_events_CoreItemsSwitchEvent;
com_sq_m3lib_events_CoreItemsSwitchEvent.__name__ = true;
com_sq_m3lib_events_CoreItemsSwitchEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreItemsSwitchEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getItem: function() {
		return this._item;
	}
	,getSwitchItem: function() {
		return this._switchItem;
	}
	,__class__: com_sq_m3lib_events_CoreItemsSwitchEvent
});
var com_sq_m3lib_events_CoreScenarioEvent = function(eventName,scenario,scenarioParams) {
	com_sq_m3lib_events_CoreEvent.call(this,eventName);
	this._scenario = scenario;
	this._scenarioParams = scenarioParams;
};
$hxClasses["com.sq.m3lib.events.CoreScenarioEvent"] = com_sq_m3lib_events_CoreScenarioEvent;
com_sq_m3lib_events_CoreScenarioEvent.__name__ = true;
com_sq_m3lib_events_CoreScenarioEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreScenarioEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getScenario: function() {
		return this._scenario;
	}
	,getScenarioParams: function() {
		return this._scenarioParams;
	}
	,__class__: com_sq_m3lib_events_CoreScenarioEvent
});
var com_sq_m3lib_events_CoreShuffleEvent = function(items,params) {
	com_sq_m3lib_events_CoreEvent.call(this,com_sq_m3lib_events_CoreShuffleEvent.SHUFFLED,params);
	this._items = items;
};
$hxClasses["com.sq.m3lib.events.CoreShuffleEvent"] = com_sq_m3lib_events_CoreShuffleEvent;
com_sq_m3lib_events_CoreShuffleEvent.__name__ = true;
com_sq_m3lib_events_CoreShuffleEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreShuffleEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getShuffledItems: function() {
		return this._items;
	}
	,__class__: com_sq_m3lib_events_CoreShuffleEvent
});
var com_sq_m3lib_events_CoreTargetUpdateEvent = function(eventName,target,reason,params) {
	com_sq_m3lib_events_CoreEvent.call(this,eventName,params);
	this._target = target;
	this._reason = reason;
};
$hxClasses["com.sq.m3lib.events.CoreTargetUpdateEvent"] = com_sq_m3lib_events_CoreTargetUpdateEvent;
com_sq_m3lib_events_CoreTargetUpdateEvent.__name__ = true;
com_sq_m3lib_events_CoreTargetUpdateEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreTargetUpdateEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getTarget: function() {
		return this._target;
	}
	,getReason: function() {
		return this._reason;
	}
	,__class__: com_sq_m3lib_events_CoreTargetUpdateEvent
});
var com_sq_m3lib_events_TargetFailReason = { __ename__ : true, __constructs__ : ["OUT_OF_MOVES","NO_POSSIBLE_COMBOS"] };
com_sq_m3lib_events_TargetFailReason.OUT_OF_MOVES = ["OUT_OF_MOVES",0];
com_sq_m3lib_events_TargetFailReason.OUT_OF_MOVES.toString = $estr;
com_sq_m3lib_events_TargetFailReason.OUT_OF_MOVES.__enum__ = com_sq_m3lib_events_TargetFailReason;
com_sq_m3lib_events_TargetFailReason.NO_POSSIBLE_COMBOS = ["NO_POSSIBLE_COMBOS",1];
com_sq_m3lib_events_TargetFailReason.NO_POSSIBLE_COMBOS.toString = $estr;
com_sq_m3lib_events_TargetFailReason.NO_POSSIBLE_COMBOS.__enum__ = com_sq_m3lib_events_TargetFailReason;
var com_sq_m3lib_events_CoreViewPointUpdateEvent = function(eventName,viewPoint,params) {
	com_sq_m3lib_events_CoreEvent.call(this,eventName,params);
	this._viewPoint = viewPoint;
};
$hxClasses["com.sq.m3lib.events.CoreViewPointUpdateEvent"] = com_sq_m3lib_events_CoreViewPointUpdateEvent;
com_sq_m3lib_events_CoreViewPointUpdateEvent.__name__ = true;
com_sq_m3lib_events_CoreViewPointUpdateEvent.__super__ = com_sq_m3lib_events_CoreEvent;
com_sq_m3lib_events_CoreViewPointUpdateEvent.prototype = $extend(com_sq_m3lib_events_CoreEvent.prototype,{
	getViewPoint: function() {
		return this._viewPoint;
	}
	,__class__: com_sq_m3lib_events_CoreViewPointUpdateEvent
});
var com_sq_m3lib_game_GameParams = function() {
};
$hxClasses["com.sq.m3lib.game.GameParams"] = com_sq_m3lib_game_GameParams;
com_sq_m3lib_game_GameParams.__name__ = true;
com_sq_m3lib_game_GameParams.prototype = {
	parseFromJson: function(data) {
		var parsed = JSON.parse(data);
		this.parse(parsed);
	}
	,parseFromSettings: function(coreParams) {
		this.parse(com_sq_m3lib_coreSettings_CoreSettings.gameConfig,coreParams);
	}
	,parse: function(parsed,coreParams) {
		com_sq_m3lib_coreSettings_CoreSettings.init(coreParams);
		this.viewPortSize = new com_sq_m3lib_geometry_Size(parsed.viewPortSize.x,parsed.viewPortSize.y);
		this.totalMaxCommonColors = parsed.totalMaxColors;
		this.combinations = parsed.combinations;
		this.specialCombinations = parsed.specialCombinations;
		this.itemScore = com_sq_m3lib_coreSettings_CoreSettings.scoreParams.itemsScore;
		this.animationConfig = com_sq_m3lib_coreSettings_CoreSettings.animationParams;
		this.blockersActivationRule = com_sq_m3lib_coreSettings_CoreSettings.blockerParams.activationRules;
		this.viralPriorityRules = com_sq_m3lib_coreSettings_CoreSettings.viralParams.priorityRules;
		this.viralIncreaseProbability = parsed.viralIncreaseProbability == 0?com_sq_m3lib_coreSettings_CoreSettings.viralParams.baseIncreaseProbability:parsed.viralIncreaseProbability;
	}
	,__class__: com_sq_m3lib_game_GameParams
};
var com_sq_m3lib_game_gameTargets_GameTargetsManger = function(engine) {
	this.viewPointUpdated = false;
	this.shuffleFailed = false;
	this._gameEngine = engine;
	this.targetsCount = 0;
};
$hxClasses["com.sq.m3lib.game.gameTargets.GameTargetsManger"] = com_sq_m3lib_game_gameTargets_GameTargetsManger;
com_sq_m3lib_game_gameTargets_GameTargetsManger.__name__ = true;
com_sq_m3lib_game_gameTargets_GameTargetsManger.prototype = {
	loadConfig: function(levelConfig) {
		this.free();
		this.addListeners();
		if(levelConfig.targets == null) {
			this._gameEngine.board.initViewPoints();
			return;
		}
		var targetsLength = levelConfig.targets.length;
		var i = -1;
		this.targetsCount = 0;
		while(++i < targetsLength) {
			if(levelConfig.targets[i].hiddenObjectsParams != null) {
				this._gameEngine.hiddenObjectsManager.loadConfig(levelConfig.targets[i].hiddenObjectsParams);
			}
			this.targets[this.targetsCount] = this.createTargetProgressByTarget(levelConfig.targets[i]);
			this.targetsCount++;
			if(levelConfig.targets[i].gravityParams != null) {
				this._gameEngine.gravityChangeFactory.loadConfig(levelConfig.targets[i].gravityParams);
			}
			if(levelConfig.targets[i].reachCellParams != null) {
				var tmp = (js_Boot.__cast(this.targets[this.targetsCount - 1].target , com_sq_m3lib_game_gameTargets_CollectItemGameTarget)).getDescription();
				this._gameEngine.collectablesManager.loadConfig(levelConfig.targets[i].reachCellParams,tmp);
			}
		}
		this.targetMoves = levelConfig.moves;
		this.onBoardStableCheckViewPoint();
		this._gameEngine.board.initViewPoints();
	}
	,addListeners: function() {
		this._onItemSwitchCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreItemsSwitchEvent.ITEM_SWITCH_SUCCESS,$bind(this,this.onUserMove),100);
		this._onViewPortUpdatedCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED,$bind(this,this.onViewPointChanged));
	}
	,createTargetProgressByTarget: function(targetConfig) {
		var currentTargetConfig = { };
		var _this = com_sq_m3lib_coreSettings_CoreClassesDictionary.gameTargetClassesDictionary;
		var key = targetConfig.id;
		com_sq_m3lib_coreSettings_CoreClassesDictionary.cloneDefTo((__map_reserved[key] != null?_this.getReserved(key):_this.h[key]).params,currentTargetConfig);
		com_sq_m3lib_coreSettings_CoreClassesDictionary.cloneDefTo(targetConfig,currentTargetConfig);
		var _this1 = com_sq_m3lib_coreSettings_CoreClassesDictionary.gameTargetClassesDictionary;
		var key1 = targetConfig.id;
		var gameTarget = Type.createInstance((__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]).classType,[currentTargetConfig]);
		var result = Type.createInstance(gameTarget.getProgressClass(),[gameTarget,$bind(this,this.onTargetProgressUpdated),$bind(this,this.onTargetComplete),this._gameEngine]);
		result.init();
		if(js_Boot.__instanceof(result,com_sq_m3lib_game_gameTargets_targetProgress_ScoreGameTargetProgress)) {
			this._scoreTarget = js_Boot.__cast(result , com_sq_m3lib_game_gameTargets_targetProgress_ScoreGameTargetProgress);
		}
		return result;
	}
	,onTargetProgressUpdated: function(targetProgress) {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreTargetUpdateEvent("one_target_updated",targetProgress));
	}
	,onTargetComplete: function(targetProgress) {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreTargetUpdateEvent("one_target_completed",targetProgress));
		this.completedCount++;
		if(this.areTargetsComplete()) {
			this.removeListeners();
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreTargetUpdateEvent("all_targets_completed"));
		}
	}
	,onUserMove: function(e) {
		this.changeMovesCount(this._movesDone + 1);
	}
	,onBoardStable: function() {
		if(!this.areTargetsComplete()) {
			this.checkMovesDone();
		}
	}
	,checkMovesDone: function() {
		if(this.isOutOfMoves()) {
			this.removeListeners();
			this.failedCount++;
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreTargetUpdateEvent("target_failed",null,com_sq_m3lib_events_TargetFailReason.OUT_OF_MOVES));
		}
	}
	,getMovesDone: function() {
		return this._movesDone;
	}
	,getMovesLeft: function() {
		return this.targetMoves + this.extraMoves - this._movesDone;
	}
	,changeMovesCount: function(val) {
		this._movesDone = val;
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreTargetUpdateEvent("moves_count_changed"));
	}
	,onShuffleFailed: function() {
		this.shuffleFailed = true;
		this.removeListeners();
	}
	,setMovesDone: function(val) {
		this.changeMovesCount(val);
		if(this._onItemSwitchCallback == null) {
			this.addListeners();
			var i = this.targetsCount;
			while(--i >= 0) this.targets[i].addListeners();
		}
		this.checkMovesDone();
	}
	,getTotalScore: function() {
		if(this._scoreTarget != null) {
			return this._scoreTarget.progress;
		}
		return 0;
	}
	,getTargetById: function(id) {
		var i = this.targetsCount;
		while(--i >= 0) if(this.targets[i].target.targetId == id) {
			return this.targets[i];
		}
		return null;
	}
	,getProgrees: function() {
		var i = this.targetsCount;
		var progress = 1;
		while(--i >= 0) progress *= this.targets[i].getStatsProgress();
		return progress;
	}
	,getKarmaProgrees: function() {
		var i = this.targetsCount;
		var progress = 1;
		while(--i >= 0) progress *= this.targets[i].getKarmaProgress();
		return progress;
	}
	,removeListeners: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreItemsSwitchEvent.ITEM_SWITCH_SUCCESS,this._onItemSwitchCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED,this._onViewPortUpdatedCallback);
		this._onItemSwitchCallback = null;
		var i = this.targetsCount;
		while(--i >= 0) this.targets[i].removeListeners();
	}
	,getTargets: function() {
		return this.targets;
	}
	,areTargetsComplete: function() {
		return this.completedCount >= this.targetsCount;
	}
	,areTargetsFailed: function() {
		if(this.failedCount <= 0) {
			return this.shuffleFailed;
		} else {
			return true;
		}
	}
	,isOutOfMoves: function() {
		if(this.getMovesLeft() <= 0) {
			return this.targetMoves > 0;
		} else {
			return false;
		}
	}
	,addExtraMoves: function(val) {
		com_sq_m3lib_log_CoreLog.log("addExtraMoves");
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreFailLevelBoostEvent("fail_level_add_moves",val));
		if(this.isOutOfMoves()) {
			this.failedCount--;
		}
		this.extraMoves += val;
		this.setMovesDone(this._movesDone);
	}
	,free: function() {
		this.removeListeners();
		this.targets = [];
		this.targetsCount = 0;
		this._movesDone = 0;
		this.targetMoves = 0;
		this.completedCount = 0;
		this.failedCount = 0;
		this.extraMoves = 0;
		this._scoreTarget = null;
		this.shuffleFailed = false;
	}
	,onBoardStableCheckViewPoint: function() {
		var i = this.targetsCount;
		while(--i >= 0) this.targets[i].onBoardStable();
		if(this.viewPointUpdated) {
			this.viewPointUpdated = false;
			return false;
		}
		return true;
	}
	,onViewPointChanged: function(e) {
		this.viewPointUpdated = true;
	}
	,__class__: com_sq_m3lib_game_gameTargets_GameTargetsManger
};
var com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress = function(target,onUpdate,onComplete,gameEngine) {
	this.target = target;
	this._onTargetUpdate = onUpdate;
	this._onTargetComplete = onComplete;
	this.progress = 0;
	this._gameEngine = gameEngine;
	this.targetCount = target.value;
	this.addListeners();
};
$hxClasses["com.sq.m3lib.game.gameTargets.targetProgress.GameTargetProgress"] = com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.__name__ = true;
com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype = {
	init: function() {
	}
	,reinit: function() {
		this.removeListeners();
		this.addListeners();
	}
	,addListeners: function() {
		this._onActionCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(this._actionName,$bind(this,this.onAction),-100);
	}
	,onAction: function(e) {
		(this.getActionCallback())(e);
	}
	,getActionCallback: function() {
		return this._actionCallback;
	}
	,onProgressChanged: function() {
		if(this.isComplete()) {
			this.removeListeners();
			this._onTargetComplete(this);
		} else {
			this._onTargetUpdate(this);
		}
	}
	,removeListeners: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(this._actionName,this._onActionCallback);
	}
	,isComplete: function() {
		return this.progress >= this.targetCount;
	}
	,getTarget: function() {
		return this.target;
	}
	,getProgress: function() {
		return this.progress;
	}
	,setProgeress: function(val) {
		this.progress = val;
		this.onProgressChanged();
	}
	,getStatsProgress: function() {
		return this.progress / this.targetCount;
	}
	,getTargetCount: function() {
		return this.targetCount;
	}
	,onBoardStable: function() {
	}
	,getKarmaProgress: function() {
		return this.getStatsProgress();
	}
	,getCellPriority: function(cell) {
		return 1;
	}
	,__class__: com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress
};
var com_sq_m3lib_game_gameTargets_targetProgress_CaptureCellsTargetProgress = function(target,onUpdate,onComplete,gameEngine) {
	this._actionName = com_sq_m3lib_events_CoreCaptureCellEvent.CAPTURED;
	this._actionCallback = $bind(this,this.onCellCaptured);
	com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.call(this,target,onUpdate,onComplete,gameEngine);
	this.progress = gameEngine.board.boardUtils.getCapturedCells().length;
	this.targetCount = this._gameEngine.board.getNonVoidCells(true).length;
	this.reinit();
};
$hxClasses["com.sq.m3lib.game.gameTargets.targetProgress.CaptureCellsTargetProgress"] = com_sq_m3lib_game_gameTargets_targetProgress_CaptureCellsTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_CaptureCellsTargetProgress.__name__ = true;
com_sq_m3lib_game_gameTargets_targetProgress_CaptureCellsTargetProgress.__super__ = com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_CaptureCellsTargetProgress.prototype = $extend(com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype,{
	reinit: function() {
		com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype.reinit.call(this);
		this._gameEngine.captureManager.init();
	}
	,onCellCaptured: function(e) {
		if(js_Boot.__cast(e , com_sq_m3lib_events_CoreCaptureCellEvent) == null) {
			return;
		}
		this.progress++;
		this.onProgressChanged();
	}
	,getCellPriority: function(cell) {
		if(cell.captured == null) {
			return 2;
		}
		return com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype.getCellPriority.call(this,cell);
	}
	,__class__: com_sq_m3lib_game_gameTargets_targetProgress_CaptureCellsTargetProgress
});
var com_sq_m3lib_game_gameTargets_targetProgress_ChangeGravityTargetProgress = function(target,onUpdate,onComplete,gameEngine) {
	this._actionName = com_sq_m3lib_events_CoreCellGravityUpdateEvent.CHANGE_CELL_MOVE_VECTOR;
	this._actionCallback = $bind(this,this.onGravityChanged);
	this._gravityParams = target.getGravityParams();
	com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.call(this,target,onUpdate,onComplete,gameEngine);
	this.setTargetCount();
};
$hxClasses["com.sq.m3lib.game.gameTargets.targetProgress.ChangeGravityTargetProgress"] = com_sq_m3lib_game_gameTargets_targetProgress_ChangeGravityTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_ChangeGravityTargetProgress.__name__ = true;
com_sq_m3lib_game_gameTargets_targetProgress_ChangeGravityTargetProgress.__super__ = com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_ChangeGravityTargetProgress.prototype = $extend(com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype,{
	setTargetCount: function() {
		if(this._gravityParams.fillMap != null && this._gravityParams.fillMap.length > 0) {
			this.progress = 0;
			this.targetCount = 0;
			var i = this._gravityParams.fillMap.length;
			while(--i >= 0) this.targetCount += this._gravityParams.fillMap[i].length;
		} else {
			this.progress = this._gameEngine.board.getGravityChangedCells().length;
			this.targetCount = this._gameEngine.board.getNonVoidCells(true).length;
		}
	}
	,onGravityChanged: function(e) {
		var event = js_Boot.__cast(e , com_sq_m3lib_events_CoreCellGravityUpdateEvent);
		if(event == null) {
			return;
		}
		this.progress += event.getCells().length;
		this.onProgressChanged();
	}
	,getStatsProgress: function() {
		return this.progress / this.targetCount;
	}
	,getCellPriority: function(cell) {
		if(cell.hasGravityChanger) {
			return 2;
		}
		return com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype.getCellPriority.call(this,cell);
	}
	,__class__: com_sq_m3lib_game_gameTargets_targetProgress_ChangeGravityTargetProgress
});
var com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress = function(target,onUpdate,onComplete,gameEngine) {
	this._actionName = "destroy_blocker";
	this._actionCallback = $bind(this,this.onBlockerRemoved);
	this._blockerAlias = target.getBlockerAlias();
	com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.call(this,target,onUpdate,onComplete,gameEngine);
};
$hxClasses["com.sq.m3lib.game.gameTargets.targetProgress.CollectBlockerGameTargetProgress"] = com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress.__name__ = true;
com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress.__super__ = com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress.prototype = $extend(com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype,{
	onBlockerRemoved: function(e) {
		var event = js_Boot.__cast(e , com_sq_m3lib_events_CoreBlockerEvent);
		if(event == null) {
			return;
		}
		if(!event.getBlocker().isDestroyed()) {
			return;
		}
		if(event.getBlocker().alias != this._blockerAlias) {
			return;
		}
		this.progress++;
		this.onProgressChanged();
	}
	,getCellPriority: function(cell) {
		if(cell.hasStableBlocker()) {
			return 2;
		}
		return com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype.getCellPriority.call(this,cell);
	}
	,__class__: com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress
});
var com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress = function(target,onUpdate,onComplete,gameEngine) {
	this._targetDescription = target.getDescription();
	this._actionName = "destroy_items";
	this._actionCallback = $bind(this,this.onItemDestroyed);
	com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.call(this,target,onUpdate,onComplete,gameEngine);
	if(this.targetCount == 0) {
		this.targetCount = gameEngine.board.boardUtils.getItemsOnBoard([this._targetDescription],true).length;
	}
};
$hxClasses["com.sq.m3lib.game.gameTargets.targetProgress.CollectItemGameTargetProgress"] = com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.__name__ = true;
com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.__super__ = com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.prototype = $extend(com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype,{
	onItemDestroyed: function(e) {
		if(this._targetDescription == null) {
			return;
		}
		var event = js_Boot.__cast(e , com_sq_m3lib_events_CoreItemDestroyEvent);
		if(event == null) {
			return;
		}
		if(!com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualItems(event.getItem().getItemDescription(),this._targetDescription)) {
			return;
		}
		this.progress++;
		this.onProgressChanged();
	}
	,getCellPriority: function(cell) {
		if(cell.hasGravityChanger) {
			return 2;
		}
		return com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype.getCellPriority.call(this,cell);
	}
	,__class__: com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress
});
var com_sq_m3lib_game_gameTargets_targetProgress_CollectViralBlockersGameTargetProgress = function(target,onUpdate,onComplete,gameEngine) {
	this._secondaryActionName = "spawn_blocker";
	this._recalculateFunction = ($_=gameEngine.board.boardUtils,$bind($_,$_.getBlockerCountByAlias));
	com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress.call(this,target,onUpdate,onComplete,gameEngine);
	this.progress = this._recalculateFunction(this._blockerAlias);
};
$hxClasses["com.sq.m3lib.game.gameTargets.targetProgress.CollectViralBlockersGameTargetProgress"] = com_sq_m3lib_game_gameTargets_targetProgress_CollectViralBlockersGameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_CollectViralBlockersGameTargetProgress.__name__ = true;
com_sq_m3lib_game_gameTargets_targetProgress_CollectViralBlockersGameTargetProgress.__super__ = com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_CollectViralBlockersGameTargetProgress.prototype = $extend(com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress.prototype,{
	addListeners: function() {
		com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress.prototype.addListeners.call(this);
		this._secondaryCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(this._secondaryActionName,this._actionCallback,-100);
	}
	,removeListeners: function() {
		com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress.prototype.removeListeners.call(this);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(this._secondaryActionName,this._secondaryCallback);
	}
	,onBlockerRemoved: function(e) {
		var event = js_Boot.__cast(e , com_sq_m3lib_events_CoreBlockerEvent);
		if(event == null) {
			return;
		}
		if(event.getBlocker().alias != this._blockerAlias) {
			return;
		}
		this.progress = this._recalculateFunction(this._blockerAlias);
		this.onProgressChanged();
	}
	,isComplete: function() {
		return this.progress <= this.targetCount;
	}
	,getCellPriority: function(cell) {
		if(cell.getBlocker() != null && cell.getBlocker().viralBlocker != null) {
			return 2;
		}
		return com_sq_m3lib_game_gameTargets_targetProgress_CollectBlockerGameTargetProgress.prototype.getCellPriority.call(this,cell);
	}
	,__class__: com_sq_m3lib_game_gameTargets_targetProgress_CollectViralBlockersGameTargetProgress
});
var com_sq_m3lib_game_gameTargets_targetProgress_DiscoverObjectsTargetProgress = function(target,onUpdate,onComplete,gameEngine) {
	this.karmaProgress = 0;
	this.totalCountOfHiddenCells = 0;
	this._actionName = com_sq_m3lib_events_CoreHiddenObjectEvent.DISCOVERED;
	this._actionCallback = $bind(this,this.onDiscovered);
	com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.call(this,target,onUpdate,onComplete,gameEngine);
};
$hxClasses["com.sq.m3lib.game.gameTargets.targetProgress.DiscoverObjectsTargetProgress"] = com_sq_m3lib_game_gameTargets_targetProgress_DiscoverObjectsTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_DiscoverObjectsTargetProgress.__name__ = true;
com_sq_m3lib_game_gameTargets_targetProgress_DiscoverObjectsTargetProgress.__super__ = com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_DiscoverObjectsTargetProgress.prototype = $extend(com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype,{
	init: function() {
		com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype.init.call(this);
		this.totalCountOfHiddenCells = this.CalcHiddenCells();
		this._onCellCoverBlownCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreHiddenObjectEvent.DESTROYED,$bind(this,this.onCellCoverBlown),1000);
	}
	,CalcHiddenCells: function() {
		var result = 0;
		var cells = this._gameEngine.board.getCells(true);
		var _g = 0;
		while(_g < cells.length) {
			var row = cells[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < row.length) {
				var cell = row[_g1];
				++_g1;
				if(cell != null && cell.hiddenObject != null) {
					++result;
				}
			}
		}
		return result;
	}
	,onDiscovered: function(e) {
		if(js_Boot.__cast(e , com_sq_m3lib_events_CoreHiddenObjectEvent) == null) {
			return;
		}
		this.progress++;
		this.onProgressChanged();
	}
	,onCellCoverBlown: function(e) {
		if(!js_Boot.__instanceof(e,com_sq_m3lib_events_CoreHiddenObjectEvent)) {
			return;
		}
		var eventCell = (js_Boot.__cast(e , com_sq_m3lib_events_CoreHiddenObjectEvent)).getCell();
		if(eventCell == null) {
			return;
		}
		if(eventCell.hiddenObject != null) {
			this.karmaProgress++;
		}
	}
	,removeListeners: function() {
		com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype.removeListeners.call(this);
		if(this._onCellCoverBlownCallback != null) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreHiddenObjectEvent.DESTROYED,this._onCellCoverBlownCallback);
		}
	}
	,getKarmaProgress: function() {
		return this.karmaProgress / this.totalCountOfHiddenCells;
	}
	,getCellPriority: function(cell) {
		if(cell.hasHiddenObject()) {
			return 2;
		}
		return com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype.getCellPriority.call(this,cell);
	}
	,__class__: com_sq_m3lib_game_gameTargets_targetProgress_DiscoverObjectsTargetProgress
});
var com_sq_m3lib_game_gameTargets_targetProgress_LockedCollectablesTargetProgress = function(target,onUpdate,onComplete,gameEngine) {
	com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.call(this,target,onUpdate,onComplete,gameEngine);
};
$hxClasses["com.sq.m3lib.game.gameTargets.targetProgress.LockedCollectablesTargetProgress"] = com_sq_m3lib_game_gameTargets_targetProgress_LockedCollectablesTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_LockedCollectablesTargetProgress.__name__ = true;
com_sq_m3lib_game_gameTargets_targetProgress_LockedCollectablesTargetProgress.__super__ = com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_LockedCollectablesTargetProgress.prototype = $extend(com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.prototype,{
	init: function() {
		this._targetItem = (js_Boot.__cast(this.target , com_sq_m3lib_game_gameTargets_CollectItemGameTarget)).getDescription();
		this._itemsOnBoard = this._gameEngine.board.getItemOnBoardCount(this._targetItem);
	}
	,onBoardStable: function() {
		if(this._itemsOnBoard != 0) {
			return;
		}
		if(!this.blowAllSpecialLockBlockers()) {
			this.changeViewPoint();
		}
	}
	,blowAllSpecialLockBlockers: function() {
		var result = false;
		var blockers = this._gameEngine.board.getBlockers(false);
		var i = blockers.length;
		var blocker;
		var destroyCells = [];
		var destroyCount = 0;
		var cell;
		var priorityBlocker;
		while(--i >= 0) {
			blocker = blockers[i];
			if(!js_Boot.__instanceof(blocker,com_sq_m3lib_board_cellBlockers_SpecialItemLockCellBlocker)) {
				continue;
			}
			if(blocker.isDestroyed()) {
				continue;
			}
			cell = blocker.cell;
			priorityBlocker = this.getFirstSpecialItemLockBlocker(cell);
			if(priorityBlocker == null) {
				priorityBlocker = blocker;
			}
			if(destroyCells.indexOf(priorityBlocker.cell) == -1) {
				priorityBlocker.step = com_sq_m3lib_coreSettings_CoreSettings.blockerParams.minLevel;
				destroyCells[destroyCount] = priorityBlocker.cell;
				++destroyCount;
			}
			if(blocker != priorityBlocker) {
				this._destroyBlockerQueue[this._destroyBlockersCount] = blocker;
				this._destroyBlockersCount++;
			}
		}
		if(destroyCount > 0) {
			result = true;
			this._gameEngine.destroyFactory.destroyCellItems(destroyCells,"specialLockedItemCollect");
		}
		if(this._destroyBlockersCount > 0) {
			if(this._onTickCallback == null) {
				this._onTickCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreEventDispatcher.TICK,$bind(this,this.tryDestroyBlockers),-50);
			}
		}
		return result;
	}
	,getFirstSpecialItemLockBlocker: function(cell) {
		var all = cell.blockerSet.blockers;
		var i = -1;
		while(++i >= 0) if(js_Boot.__instanceof(all[i],com_sq_m3lib_board_cellBlockers_SpecialItemLockCellBlocker)) {
			return all[i];
		}
		return null;
	}
	,tryDestroyBlockers: function(e) {
		var i = this._destroyBlockersCount;
		var cell;
		var destroyCells = [];
		var destroyCount = 0;
		while(--i >= 0) {
			cell = this._destroyBlockerQueue[i].cell;
			if(cell.blockerSet.isEmpty()) {
				continue;
			}
			if(cell.blockerSet.priorityBlocker.isDestroyed()) {
				continue;
			}
			if(!cell.blockerSet.priorityBlocker.isAnimationStable()) {
				continue;
			}
			if(destroyCells.indexOf(cell) == -1) {
				cell.blockerSet.priorityBlocker.step = com_sq_m3lib_coreSettings_CoreSettings.blockerParams.minLevel;
				this._destroyBlockersCount--;
				if(i < this._destroyBlockersCount) {
					this._destroyBlockerQueue[i] = this._destroyBlockerQueue[this._destroyBlockersCount - 1];
				}
				this._destroyBlockerQueue.pop();
				destroyCells[destroyCount] = cell;
				++destroyCount;
			}
		}
		if(this._destroyBlockersCount == 0) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreEventDispatcher.TICK,this._onTickCallback);
			this._onTickCallback = null;
		}
		if(destroyCount > 0) {
			this._gameEngine.destroyFactory.destroyCellItems(destroyCells,"specialLockedItemCollect");
		}
	}
	,changeViewPoint: function() {
		this._gameEngine.board.viewPoints.pop();
		this._gameEngine.board.setViewPoint(this._gameEngine.board.viewPoints.getCurrent());
	}
	,addListeners: function() {
		com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.prototype.addListeners.call(this);
		this._onDestroyedCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("destroy_blocker",$bind(this,this.onBlockerDestroyed),-50);
		this._onViewPortUpdated = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED,$bind(this,this.onViewPointChanged));
	}
	,removeListeners: function() {
		com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.prototype.removeListeners.call(this);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("destroy_blocker",this._onDestroyedCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED,this._onViewPortUpdated);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreEventDispatcher.TICK,this._onTickCallback);
		this._onTickCallback = null;
		this._destroyBlockerQueue = [];
		this._destroyBlockersCount = 0;
	}
	,onBlockerDestroyed: function(e) {
		if(!js_Boot.__instanceof(e,com_sq_m3lib_events_CoreBlockerEvent)) {
			return;
		}
		var event = js_Boot.__cast(e , com_sq_m3lib_events_CoreBlockerEvent);
		var cell = event.getBlocker().cell;
		if(!cell.hasItemInCell()) {
			return;
		}
		if(!cell.blockerSet.isEmpty() && !cell.blockerSet.isDestroyed()) {
			return;
		}
		if(com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualItems(cell.item.getItemDescription(),this._targetItem)) {
			this._gameEngine.destroyFactory.destroySingleItemAndAddScore(cell,cell.item,event.getCause());
			this._itemsOnBoard--;
		}
	}
	,onViewPointChanged: function(e) {
		this._itemsOnBoard = this._gameEngine.board.getItemOnBoardCount(this._targetItem);
	}
	,getCellPriority: function(cell) {
		if(cell.hasStableBlocker()) {
			return 2;
		}
		return com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.prototype.getCellPriority.call(this,cell);
	}
	,__class__: com_sq_m3lib_game_gameTargets_targetProgress_LockedCollectablesTargetProgress
});
var com_sq_m3lib_game_gameTargets_targetProgress_ReachTargetCellsTargetProgress = function(target,onUpdate,onComplete,gameEngine) {
	this._currentViewPortPriority = 0;
	this.currentViewPointIndex = 0;
	com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.call(this,target,onUpdate,onComplete,gameEngine);
};
$hxClasses["com.sq.m3lib.game.gameTargets.targetProgress.ReachTargetCellsTargetProgress"] = com_sq_m3lib_game_gameTargets_targetProgress_ReachTargetCellsTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_ReachTargetCellsTargetProgress.__name__ = true;
com_sq_m3lib_game_gameTargets_targetProgress_ReachTargetCellsTargetProgress.__super__ = com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_ReachTargetCellsTargetProgress.prototype = $extend(com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.prototype,{
	init: function() {
		this._viewPortTargetCellsCount = 0;
		this._viewPortTargetCells = [];
		this.targetCells = [];
		this._reachCellParams = (js_Boot.__cast(this.target , com_sq_m3lib_game_gameTargets_ReachTargetCellGameTarget)).getTargetCellParams();
		if(this._reachCellParams == null) {
			return;
		}
		this.calculateTargetCells();
		this.recalculateActiveTargetCells();
		this.calculateStartDistanceToCells();
	}
	,reinit: function() {
		com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.prototype.reinit.call(this);
		this._viewPortTargetCellsCount = 0;
		this.calculateTargetCells();
	}
	,addListeners: function() {
		com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.prototype.addListeners.call(this);
		this._onViewPointChangedCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED,$bind(this,this.recalculateActiveTargetCells));
	}
	,recalculateActiveTargetCells: function(e) {
		var wasCount = this._viewPortTargetCellsCount;
		this._viewPortTargetCellsCount = 0;
		this._viewPortTargetCells = [];
		var viewPoint = this._gameEngine.board.viewPoint;
		var viewPortSize = this._gameEngine.board.viewPortSize;
		if(viewPoint == null) {
			return;
		}
		var minX = viewPoint.x;
		var minY = viewPoint.y;
		var maxX = minX + viewPortSize.width;
		var maxY = minY + viewPortSize.height;
		var i = this.targetCells.length;
		var cell;
		while(--i >= 0) {
			cell = this.targetCells[i];
			if(cell.coords.isInBorder(minX,minY,maxX,maxY)) {
				this._viewPortTargetCells[this._viewPortTargetCellsCount] = cell;
				this._viewPortTargetCellsCount++;
			}
		}
		if(wasCount == this._viewPortTargetCellsCount) {
			return;
		}
		if(this._viewPortTargetCellsCount == 0) {
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("item_position_changed",this._onItemsMovedCallback);
			this._onItemsMovedCallback = null;
		} else if(this._onItemsMovedCallback == null) {
			this._onItemsMovedCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("item_position_changed",$bind(this,this.onBoardChanged),-50);
		}
	}
	,calculateTargetCells: function() {
		if(this._reachCellParams == null) {
			return;
		}
		var targetCellsCount = 0;
		this.targetCells = [];
		var i = this._reachCellParams.targetCells.length;
		var cell;
		while(--i >= 0) {
			cell = this._gameEngine.board.getCellByCoords(this._reachCellParams.targetCells[i].x,this._reachCellParams.targetCells[i].y,true);
			if(cell != null && !cell.isVoid) {
				this.targetCells[targetCellsCount] = cell;
				++targetCellsCount;
			}
		}
	}
	,calculateStartDistanceToCells: function() {
		com_sq_m3lib_game_gameTargets_targetProgress_ReachTargetCellsTargetProgress._startDistanceToTargetCells = 0;
		var items = this._gameEngine.board.boardUtils.getItemsOnBoard([this._targetDescription],true);
		var i = items.length;
		var j;
		var targetCells = this.targetCells;
		var itemCell;
		var distance;
		var minDistance = 2147483647;
		while(--i >= 0) {
			minDistance = 2147483647;
			j = targetCells.length;
			itemCell = items[i].cell;
			while(--j >= 0) {
				distance = com_sq_m3lib_geometry_Coord.getSquareDistance(targetCells[j].coords,itemCell.coords);
				if(distance < minDistance) {
					minDistance = distance;
				}
			}
			com_sq_m3lib_game_gameTargets_targetProgress_ReachTargetCellsTargetProgress._startDistanceToTargetCells += Math.sqrt(minDistance) | 0;
		}
	}
	,calculateCurrentDistanceToCells: function() {
		var result = 0;
		var items = this._gameEngine.board.boardUtils.getItemsOnBoard([this._targetDescription],true);
		var i = items.length;
		var j;
		var targetCells = this.targetCells;
		var itemCell;
		var distance;
		var minDistance = 2147483647;
		while(--i >= 0) {
			minDistance = 2147483647;
			j = targetCells.length;
			itemCell = items[i].cell;
			while(--j >= 0) {
				distance = com_sq_m3lib_geometry_Coord.getSquareDistance(targetCells[j].coords,itemCell.coords);
				if(distance < minDistance) {
					minDistance = distance;
				}
			}
			result += Math.sqrt(minDistance) | 0;
		}
		return result;
	}
	,getStatsProgress: function() {
		return (com_sq_m3lib_game_gameTargets_targetProgress_ReachTargetCellsTargetProgress._startDistanceToTargetCells - this.calculateCurrentDistanceToCells()) / com_sq_m3lib_game_gameTargets_targetProgress_ReachTargetCellsTargetProgress._startDistanceToTargetCells;
	}
	,getCurrentViewPortPriorityInItems: function(items) {
		if(items.length == 0) {
			return 0;
		}
		var result = items[0].viewPortPriority;
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			if(item.viewPortPriority < result) {
				result = item.viewPortPriority;
			}
		}
		return result;
	}
	,getCollectableItemsByPriority: function(items,priority) {
		var result = [];
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			if(item.viewPortPriority == priority) {
				result.push(item);
			}
		}
		return result;
	}
	,onBoardStable: function() {
		this.onBoardChanged();
		if(!this._gameEngine.board.isStable()) {
			return;
		}
		var items = this._gameEngine.board.getItems(true);
		var i = items.length;
		var item;
		var colItems = [];
		while(--i >= 0) {
			item = items[i];
			if(!com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualItems(this._targetDescription,item.getItemDescription())) {
				continue;
			}
			colItems.push(js_Boot.__cast(item , com_sq_m3lib_board_items_CollectableItem));
		}
		this._currentViewPortPriority = this.getCurrentViewPortPriorityInItems(colItems);
		colItems = this.getCollectableItemsByPriority(colItems,this._currentViewPortPriority);
		var itemsCoord = [];
		var j = colItems.length;
		var colItem;
		var count = 0;
		var cell;
		while(--j >= 0) {
			colItem = colItems[j];
			cell = colItem.cell;
			itemsCoord[count] = this.getExpectedViewCoordsIndex(cell);
			++count;
		}
		if(count == 0) {
			return;
		}
		haxe_ds_ArraySort.sort(itemsCoord,function(val1,val2) {
			return val1 - val2;
		});
		var coordIndex = itemsCoord[itemsCoord.length - 1];
		if(this._gameEngine.board.forbiddenMoves != null) {
			var _g = 0;
			var _g1 = this._gameEngine.board.forbiddenMoves;
			while(_g < _g1.length) {
				var forbiddenMove = _g1[_g];
				++_g;
				if(coordIndex == forbiddenMove.to && this.currentViewPointIndex == forbiddenMove.from) {
					coordIndex = this.currentViewPointIndex;
				}
			}
		}
		this.currentViewPointIndex = coordIndex;
		var targetCoord = this._gameEngine.board.viewPoints.viewPoints[coordIndex];
		if(this._gameEngine.board.viewPoint.isEqual(targetCoord)) {
			return;
		}
		this._gameEngine.board.setViewPoint(targetCoord);
	}
	,onBoardChanged: function(e) {
		var i = this._viewPortTargetCellsCount;
		var cell;
		var item;
		while(--i >= 0) {
			cell = this._viewPortTargetCells[i];
			if(!cell.hasItemInCell()) {
				continue;
			}
			item = cell.item;
			if(item.disabled) {
				continue;
			}
			if(!com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualItems(this._targetDescription,item.getItemDescription())) {
				continue;
			}
			if(this._gameEngine.board.getMoveFactory().willPassCell(cell,item)) {
				this._gameEngine.destroyFactory.destroySingleItemAndAddScore(cell,item,"collectCellReached");
			}
		}
	}
	,getExpectedViewCoordsIndex: function(cell) {
		var x = cell.coords.x + cell.getCurrentMoveVector().x * 2;
		var y = cell.coords.y + cell.getCurrentMoveVector().y * 2;
		var viewPoints = this._gameEngine.board.viewPoints.viewPoints;
		var distance = 0;
		var minDistance = 2147483647;
		var minDistanceIndex = 0;
		var count = viewPoints.length;
		var i = -1;
		var halfWidth = this._gameEngine.board.viewPortSize.width / 2 | 0;
		var halfHeight = this._gameEngine.board.viewPortSize.height / 2 | 0;
		while(++i < count) if(this.checkCellVisibility(cell,viewPoints[i])) {
			distance = com_sq_m3lib_math_CoreMathUtils.abs(viewPoints[i].x + halfWidth - x) + com_sq_m3lib_math_CoreMathUtils.abs(viewPoints[i].y + halfHeight - y);
			if(distance < minDistance) {
				minDistance = distance;
				minDistanceIndex = i;
			}
		}
		return minDistanceIndex;
	}
	,checkCellVisibility: function(cell,vp) {
		if(cell.coords.x <= vp.x + this._gameEngine.board.viewPortSize.width && cell.coords.y <= vp.y + this._gameEngine.board.viewPortSize.height && cell.coords.x >= vp.x) {
			return cell.coords.y >= vp.y;
		} else {
			return false;
		}
	}
	,removeListeners: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED,this._onViewPointChangedCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("item_position_changed",this._onItemsMovedCallback);
		this._onViewPointChangedCallback = null;
		this._onItemsMovedCallback = null;
		com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.prototype.removeListeners.call(this);
	}
	,getCellPriority: function(cell) {
		if(cell.hasGravityChanger) {
			return 2;
		}
		return com_sq_m3lib_game_gameTargets_targetProgress_CollectItemGameTargetProgress.prototype.getCellPriority.call(this,cell);
	}
	,__class__: com_sq_m3lib_game_gameTargets_targetProgress_ReachTargetCellsTargetProgress
});
var com_sq_m3lib_game_gameTargets_targetProgress_ScoreGameTargetProgress = function(target,onUpdate,onComplete,gameEngine) {
	this._actionName = com_sq_m3lib_events_CoreAddScoreEvent.ADD_SCORE;
	this._actionCallback = $bind(this,this.onAddScore);
	com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.call(this,target,onUpdate,onComplete,gameEngine);
};
$hxClasses["com.sq.m3lib.game.gameTargets.targetProgress.ScoreGameTargetProgress"] = com_sq_m3lib_game_gameTargets_targetProgress_ScoreGameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_ScoreGameTargetProgress.__name__ = true;
com_sq_m3lib_game_gameTargets_targetProgress_ScoreGameTargetProgress.__super__ = com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress;
com_sq_m3lib_game_gameTargets_targetProgress_ScoreGameTargetProgress.prototype = $extend(com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.prototype,{
	onAddScore: function(e) {
		if(this.progress >= this.target.value) {
			return;
		}
		if(!js_Boot.__instanceof(e,com_sq_m3lib_events_CoreAddScoreEvent)) {
			return;
		}
		this.progress += (js_Boot.__cast(e , com_sq_m3lib_events_CoreAddScoreEvent)).getScore();
		this.onProgressChanged();
	}
	,__class__: com_sq_m3lib_game_gameTargets_targetProgress_ScoreGameTargetProgress
});
var com_sq_m3lib_geometry_Coord = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.y = 0;
	this.x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["com.sq.m3lib.geometry.Coord"] = com_sq_m3lib_geometry_Coord;
com_sq_m3lib_geometry_Coord.__name__ = true;
com_sq_m3lib_geometry_Coord.fromViewPoint = function(point) {
	return new com_sq_m3lib_geometry_Coord(point.x,point.y);
};
com_sq_m3lib_geometry_Coord.getSquareDistance = function(coord1,coord2) {
	return (coord1.x - coord2.x) * (coord1.x - coord2.x) + (coord1.y - coord2.y) * (coord1.y - coord2.y);
};
com_sq_m3lib_geometry_Coord.add = function(coord1,coord2) {
	return new com_sq_m3lib_geometry_Coord(coord1.x + coord2.x,coord1.y + coord2.y);
};
com_sq_m3lib_geometry_Coord.prototype = {
	get_x: function() {
		return this.x;
	}
	,get_y: function() {
		return this.y;
	}
	,set_x: function(val) {
		this.x = val;
	}
	,set_y: function(val) {
		this.y = val;
	}
	,isEqual: function(coords) {
		if(this.x == coords.x) {
			return this.y == coords.y;
		} else {
			return false;
		}
	}
	,isInBorder: function(minX,minY,maxX,maxY) {
		if(minX > maxX) {
			var tmp = maxX;
			maxX = minX;
			minX = tmp;
		}
		if(minY > maxY) {
			var tmp1 = maxY;
			maxY = minY;
			minY = tmp1;
		}
		if(this.x >= minX && this.x < maxX) {
			if(this.y >= minY) {
				return this.y < maxY;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,getDifferenceVector: function(coordX,coordY) {
		return new com_sq_m3lib_geometry_CellVector(this.x - coordX,this.y - coordY);
	}
	,toViewPoint: function() {
		return { x : this.x, y : this.y};
	}
	,clone: function() {
		return new com_sq_m3lib_geometry_Coord(this.x,this.y);
	}
	,toString: function() {
		return "[" + this.x + ", " + this.y + "]";
	}
	,__class__: com_sq_m3lib_geometry_Coord
};
var com_sq_m3lib_geometry_Size = function(width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.height = 0;
	this.width = 0;
	this.width = width;
	this.height = height;
};
$hxClasses["com.sq.m3lib.geometry.Size"] = com_sq_m3lib_geometry_Size;
com_sq_m3lib_geometry_Size.__name__ = true;
com_sq_m3lib_geometry_Size.prototype = {
	__class__: com_sq_m3lib_geometry_Size
};
var com_sq_m3lib_karma_IKarmaProvider = function() { };
$hxClasses["com.sq.m3lib.karma.IKarmaProvider"] = com_sq_m3lib_karma_IKarmaProvider;
com_sq_m3lib_karma_IKarmaProvider.__name__ = true;
com_sq_m3lib_karma_IKarmaProvider.prototype = {
	__class__: com_sq_m3lib_karma_IKarmaProvider
};
var com_sq_m3lib_karma_KarmaProvider = function(karmaSet) {
	this.karmaSet = karmaSet;
};
$hxClasses["com.sq.m3lib.karma.KarmaProvider"] = com_sq_m3lib_karma_KarmaProvider;
com_sq_m3lib_karma_KarmaProvider.__name__ = true;
com_sq_m3lib_karma_KarmaProvider.__interfaces__ = [com_sq_m3lib_karma_IKarmaProvider];
com_sq_m3lib_karma_KarmaProvider.prototype = {
	log: function() {
		return "KarmaProvider";
	}
	,run: function(core) {
		if(this.karmaSet != null) {
			this.karmaSet.run(core);
		}
	}
	,init: function(core) {
		if(this.karmaSet != null) {
			this.karmaSet.init(core);
		}
	}
	,uninit: function(core) {
		if(this.karmaSet != null) {
			this.karmaSet.uninit(core);
		}
	}
	,__class__: com_sq_m3lib_karma_KarmaProvider
};
var com_sq_m3lib_karma_DebuffKarmaProvider = function(karmaSet) {
	com_sq_m3lib_karma_KarmaProvider.call(this,karmaSet);
};
$hxClasses["com.sq.m3lib.karma.DebuffKarmaProvider"] = com_sq_m3lib_karma_DebuffKarmaProvider;
com_sq_m3lib_karma_DebuffKarmaProvider.__name__ = true;
com_sq_m3lib_karma_DebuffKarmaProvider.__super__ = com_sq_m3lib_karma_KarmaProvider;
com_sq_m3lib_karma_DebuffKarmaProvider.prototype = $extend(com_sq_m3lib_karma_KarmaProvider.prototype,{
	log: function() {
		return "km_provider_db";
	}
	,__class__: com_sq_m3lib_karma_DebuffKarmaProvider
});
var com_sq_m3lib_karma__$DynamicMap_DynamicMap_$Impl_$ = {};
$hxClasses["com.sq.m3lib.karma._DynamicMap.DynamicMap_Impl_"] = com_sq_m3lib_karma__$DynamicMap_DynamicMap_$Impl_$;
com_sq_m3lib_karma__$DynamicMap_DynamicMap_$Impl_$.__name__ = true;
com_sq_m3lib_karma__$DynamicMap_DynamicMap_$Impl_$.Get = function(this1,key) {
	return this1[key];
};
com_sq_m3lib_karma__$DynamicMap_DynamicMap_$Impl_$.Set = function(this1,key,value) {
	this1[key] = value;
};
com_sq_m3lib_karma__$DynamicMap_DynamicMap_$Impl_$.Has = function(this1,key) {
	return Object.prototype.hasOwnProperty.call(this1,key);
};
com_sq_m3lib_karma__$DynamicMap_DynamicMap_$Impl_$.Delete = function(this1,key) {
	return Reflect.deleteField(this1,key);
};
com_sq_m3lib_karma__$DynamicMap_DynamicMap_$Impl_$.Keys = function(this1) {
	var fields = Reflect.fields(this1);
	HxOverrides.remove(fields,"$type");
	return fields;
};
com_sq_m3lib_karma__$DynamicMap_DynamicMap_$Impl_$.OrderedKeys = function(this1) {
	var fields = Reflect.fields(this1);
	HxOverrides.remove(fields,"$type");
	var keys = fields;
	keys.sort();
	return keys;
};
com_sq_m3lib_karma__$DynamicMap_DynamicMap_$Impl_$.Count = function(this1) {
	var fields = Reflect.fields(this1);
	HxOverrides.remove(fields,"$type");
	return fields.length;
};
var com_sq_m3lib_karma_HighBuffKarmaProvider = function(karmaSet) {
	com_sq_m3lib_karma_KarmaProvider.call(this,karmaSet);
};
$hxClasses["com.sq.m3lib.karma.HighBuffKarmaProvider"] = com_sq_m3lib_karma_HighBuffKarmaProvider;
com_sq_m3lib_karma_HighBuffKarmaProvider.__name__ = true;
com_sq_m3lib_karma_HighBuffKarmaProvider.__super__ = com_sq_m3lib_karma_KarmaProvider;
com_sq_m3lib_karma_HighBuffKarmaProvider.prototype = $extend(com_sq_m3lib_karma_KarmaProvider.prototype,{
	log: function() {
		return "km_provider_hb";
	}
	,__class__: com_sq_m3lib_karma_HighBuffKarmaProvider
});
var com_sq_m3lib_karma_KarmaManager = function(engine) {
	this._isTestMode = false;
	this._karmaVal = 0;
	this.core = engine;
};
$hxClasses["com.sq.m3lib.karma.KarmaManager"] = com_sq_m3lib_karma_KarmaManager;
com_sq_m3lib_karma_KarmaManager.__name__ = true;
com_sq_m3lib_karma_KarmaManager.prototype = {
	init: function(config,map) {
		this.sets = this.setMap(map.map);
		this.karmas = this.setKarmas(config.karmas);
	}
	,setKarmas: function(data) {
		var result = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = com_sq_m3lib_karma__$DynamicMap_DynamicMap_$Impl_$.OrderedKeys(data);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var _points = data[key];
			var res = new haxe_ds_IntMap();
			var _g2 = 0;
			var _g3 = com_sq_m3lib_karma__$DynamicMap_DynamicMap_$Impl_$.OrderedKeys(_points);
			while(_g2 < _g3.length) {
				var key1 = _g3[_g2];
				++_g2;
				var key2 = Std.parseInt(key1);
				res.h[key2] = _points[key1];
			}
			if(__map_reserved[key] != null) {
				result.setReserved(key,res);
			} else {
				result.h[key] = res;
			}
		}
		return result;
	}
	,setProviders: function() {
		var res = new haxe_ds_IntMap();
		var value = new com_sq_m3lib_karma_DebuffKarmaProvider(this.getKarmaSet(com_sq_m3lib_karma_KarmaManager.PROVIDER_DEBUFF_NAME,this._targetAlias));
		res.h[3] = value;
		var value1 = new com_sq_m3lib_karma_LightBuffKarmaProvider(this.getKarmaSet(com_sq_m3lib_karma_KarmaManager.PROVIDER_LIGHT_BUFF_NAME,this._targetAlias));
		res.h[1] = value1;
		var value2 = new com_sq_m3lib_karma_HighBuffKarmaProvider(this.getKarmaSet(com_sq_m3lib_karma_KarmaManager.PROVIDER_HIGH_BUFF_NAME,this._targetAlias));
		res.h[0] = value2;
		return res;
	}
	,setMap: function(map) {
		var res = [];
		var _g1 = 0;
		var _g = map.length;
		while(_g1 < _g) res.push(new com_sq_m3lib_karma_KarmaSet(map[_g1++]));
		return res;
	}
	,setKarma: function(karmaVal) {
		this._karmaVal = karmaVal;
		var key = Std.string(this.getKarmaPreset());
		var _this = this.karmas;
		this.points = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		this.addListeners();
	}
	,getKarmaDesc: function(val) {
		var result = "";
		switch(val) {
		case -1:
			result = "preset 4";
			break;
		case 0:
			result = "preset 1";
			break;
		case 1:
			result = "preset 2";
			break;
		case 2:
			result = "preset 3";
			break;
		}
		return result;
	}
	,getKarmaPreset: function() {
		return this._karmaVal;
	}
	,setTargets: function() {
		this.steps = new haxe_ds_IntMap();
		var maxSteps = this.core.targetsManager.targetMoves;
		var tmp = this.points.keys();
		while(tmp.hasNext()) {
			var key = tmp.next();
			var key1 = Math.ceil(key * maxSteps / 100);
			this.steps.h[key1] = this.points.h[key];
		}
		this.karmaProvider = null;
		this._targetAlias = this.core.targetsManager.getTargets()[0].getTarget().targetId;
		this.providers = this.setProviders();
		this._addExtraSteps = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("fail_level_add_moves",$bind(this,this.onAddExtraMoves),1000);
	}
	,onAddExtraMoves: function(event) {
		if(this.karmaProvider != null) {
			this.karmaProvider.uninit(this.core);
		}
		this.karmaProvider = null;
		this.karmaProvider = this.providers.h[1];
		this.karmaProvider.init(this.core);
		this.karmaProvider.run(this.core);
	}
	,onBoardStabilized: function(e) {
		var tmp;
		var key = this.core.targetsManager.getMovesDone();
		if(this.steps.h.hasOwnProperty(key)) {
			tmp = !this._isTestMode;
		} else {
			tmp = false;
		}
		if(tmp) {
			if(this.karmaProvider != null) {
				this.karmaProvider.uninit(this.core);
			}
			this.karmaProvider = null;
			var key1 = this.core.targetsManager.getMovesDone();
			this.karmaProvider = this.checkLimits(this.steps.h[key1]);
			if(this.karmaProvider != null) {
				this.karmaProvider.init(this.core);
			}
		}
		if(this.karmaProvider != null) {
			this.karmaProvider.run(this.core);
		}
	}
	,setKarmaProvider: function(arg) {
		com_sq_m3lib_log_CoreLog.log("set km provider" + arg);
		if(this.karmaProvider != null) {
			this.karmaProvider.uninit(this.core);
		}
		this.karmaProvider = null;
		this.karmaProvider = this.providers.h[arg == com_sq_m3lib_karma_KarmaManager.PROVIDER_DEBUFF_NAME?3:arg == com_sq_m3lib_karma_KarmaManager.PROVIDER_LIGHT_BUFF_NAME?1:arg == com_sq_m3lib_karma_KarmaManager.PROVIDER_HIGH_BUFF_NAME?0:2];
		if(this.karmaProvider != null) {
			this.karmaProvider.init(this.core);
		}
	}
	,getTestMode: function() {
		return this._isTestMode;
	}
	,setTestMode: function(arg) {
		this._isTestMode = arg;
	}
	,checkLimits: function(limits) {
		var progress = Math.ceil(this.core.targetsManager.getTargets()[0].getKarmaProgress() * 100) | 0;
		var idx = 2;
		var _g1 = 0;
		var _g = limits.length - 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(progress >= limits[i] && progress < limits[i + 1]) {
				idx = i;
			}
		}
		return this.providers.h[idx];
	}
	,onLevelFinished: function(event) {
		this.reset();
	}
	,reset: function() {
		if(this.karmaProvider != null) {
			this.karmaProvider.uninit(this.core);
		}
		this.karmaProvider = null;
		this.removeListeners();
		this.setTestMode(false);
		this.core.spawnFactory.karmaBombColorSpawned = false;
	}
	,onLevelsLoaded: function(event) {
		this.setTargets();
	}
	,addListeners: function() {
		this._stableCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreEventDispatcher.BOARD_STABLE,$bind(this,this.onBoardStabilized),1000);
		this._levelFinished = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("all_targets_completed",$bind(this,this.onLevelFinished),1000);
		this._levelsLoaded = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreEventDispatcher.LEVEL_LOADED,$bind(this,this.onLevelsLoaded),1000);
	}
	,removeListeners: function() {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreEventDispatcher.BOARD_STABLE,this._stableCallback);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("all_targets_completed",this._levelFinished);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreEventDispatcher.LEVEL_LOADED,this._levelsLoaded);
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("fail_level_add_moves",this._addExtraSteps);
	}
	,getKarmaSet: function(type,target) {
		var _g1 = 0;
		var _g = this.sets.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(type == this.sets[i].type && target == this.sets[i].targetAlias) {
				return this.sets[i];
			}
		}
		return null;
	}
	,__class__: com_sq_m3lib_karma_KarmaManager
};
var com_sq_m3lib_karma_karmaActions_KarmaAction = function() {
};
$hxClasses["com.sq.m3lib.karma.karmaActions.KarmaAction"] = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_KarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_KarmaAction.prototype = {
	run: function(core) {
	}
	,init: function(core) {
	}
	,uninit: function(core) {
	}
	,__class__: com_sq_m3lib_karma_karmaActions_KarmaAction
};
var com_sq_m3lib_karma_karmaActions_UselessSuggestionKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.UselessSuggestionKarmaAction"] = com_sq_m3lib_karma_karmaActions_UselessSuggestionKarmaAction;
com_sq_m3lib_karma_karmaActions_UselessSuggestionKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_UselessSuggestionKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_UselessSuggestionKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	run: function(core) {
		core.comboFactory.setSuggestion(false);
	}
	,__class__: com_sq_m3lib_karma_karmaActions_UselessSuggestionKarmaAction
});
var com_sq_m3lib_karma_karmaActions_UsefulSuggestionKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.UsefulSuggestionKarmaAction"] = com_sq_m3lib_karma_karmaActions_UsefulSuggestionKarmaAction;
com_sq_m3lib_karma_karmaActions_UsefulSuggestionKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_UsefulSuggestionKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_UsefulSuggestionKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	run: function(core) {
		core.comboFactory.setSuggestion(true);
	}
	,__class__: com_sq_m3lib_karma_karmaActions_UsefulSuggestionKarmaAction
});
var com_sq_m3lib_karma_karmaActions_HighBuffSuperItemsSpawnKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.HighBuffSuperItemsSpawnKarmaAction"] = com_sq_m3lib_karma_karmaActions_HighBuffSuperItemsSpawnKarmaAction;
com_sq_m3lib_karma_karmaActions_HighBuffSuperItemsSpawnKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_HighBuffSuperItemsSpawnKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_HighBuffSuperItemsSpawnKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	init: function(core) {
		this._core = core;
	}
	,run: function(core) {
		if(!this._core.spawnFactory.karmaBombColorSpawned && core.comboFactory.combinationCandidateList.length < 3) {
			this._onItemSpawnedCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("new_items_spawned",$bind(this,this.onItemSpawned),1000);
			this.addBombSpawn(core);
		}
	}
	,uninit: function(core) {
	}
	,addBombSpawn: function(core) {
		this.colorBombSpawner = core.spawnFactory.createSpecialSpawnerByConfig(this.getColorBombSpecialSpawnConfig());
		core.spawnFactory.addSpecialSpawner(this.colorBombSpawner);
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawn = _g1[_g];
			++_g;
			spawn.addSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_COLOR_BOMB_DESCRIPTION);
		}
	}
	,removeBombSpawn: function(core) {
		core.spawnFactory.removeSpecialSpawner(this.colorBombSpawner);
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawn = _g1[_g];
			++_g;
			spawn.removeSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_COLOR_BOMB_DESCRIPTION);
		}
	}
	,onItemSpawned: function(e) {
		if(!js_Boot.__instanceof(e,com_sq_m3lib_events_CoreItemAddedEvent)) {
			return;
		}
		var _g = 0;
		var _g1 = (js_Boot.__cast(e , com_sq_m3lib_events_CoreItemAddedEvent)).getItems();
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.getItemDescription().className == com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR) {
				com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("new_items_spawned",this._onItemSpawnedCallback);
				this.removeBombSpawn(this._core);
				this._core.spawnFactory.karmaBombColorSpawned = true;
			}
		}
	}
	,getColorBombSpecialSpawnConfig: function() {
		return { className : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR, max : 5, min : 0, spawnDelta : 1, firstSpawnDelta : 0, count : 1, item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_COLOR_BOMB_DESCRIPTION};
	}
	,__class__: com_sq_m3lib_karma_karmaActions_HighBuffSuperItemsSpawnKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffChangeHomingBombBaseKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	init: function(core) {
		var weights = this.getCellWeightsByTargets();
		this.old = this.getDeepCopy(weights);
		this.setParams(weights);
	}
	,getCellWeightsByTargets: function() {
		var key = this.getTargetAlias();
		var _this = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,getTargetAlias: function() {
		return null;
	}
	,setParams: function(obj) {
	}
	,run: function(core) {
	}
	,uninit: function(core) {
		var key = this.getTargetAlias();
		var _this = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
		var value = this.old;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,getDeepCopy: function(obj) {
		var result = { };
		result.anyNotCaptured = obj.anyNotCaptured;
		result.capturedByOther = obj.capturedByOther;
		result.id = obj.id;
		result.mainTargetWeight = obj.mainTargetWeight;
		result.notCapturedBlocker = obj.notCapturedBlocker;
		result.onPathBlockerWeight = obj.onPathBlockerWeight;
		result.onPathItemWeight = obj.onPathItemWeight;
		if(obj.itemsWeights != null) {
			result.itemsWeights = [];
			var _g = 0;
			var _g1 = obj.itemsWeights;
			while(_g < _g1.length) {
				var it = _g1[_g];
				++_g;
				result.itemsWeights.push({ alias : it.alias, weight : it.weight, step : it.step});
			}
		}
		if(obj.blockersWeights != null) {
			result.blockersWeights = [];
			var _g2 = 0;
			var _g11 = obj.blockersWeights;
			while(_g2 < _g11.length) {
				var it1 = _g11[_g2];
				++_g2;
				result.blockersWeights.push({ alias : it1.alias, weight : it1.weight, step : it1.step});
			}
		}
		return result;
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombReachTargetKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffChangeHomingBombReachTargetKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombReachTargetKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombReachTargetKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombReachTargetKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombReachTargetKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.prototype,{
	getTargetAlias: function() {
		return "reach_target_cell";
	}
	,setParams: function(obj) {
		if(!Object.prototype.hasOwnProperty.call(obj,"itemsWeights")) {
			obj.itemsWeights = [];
		}
		obj.itemsWeights[0].weight = 60;
		obj.itemsWeights[1].weight = 70;
		obj.onPathBlockerWeight = 0;
		obj.onPathItemWeight = 50;
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombReachTargetKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectTargetKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffChangeHomingBombCollectTargetKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectTargetKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectTargetKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectTargetKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectTargetKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.prototype,{
	getTargetAlias: function() {
		return "collect_item";
	}
	,setParams: function(obj) {
		if(!Object.prototype.hasOwnProperty.call(obj,"itemsWeights")) {
			obj.itemsWeights = [];
		}
		obj.itemsWeights[0].weight = 70;
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectTargetKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombDiscoverTargetKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffChangeHomingBombDiscoverTargetKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombDiscoverTargetKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombDiscoverTargetKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombDiscoverTargetKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombDiscoverTargetKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.prototype,{
	getTargetAlias: function() {
		return "discover";
	}
	,setParams: function(obj) {
		obj.mainTargetWeight = 0;
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombDiscoverTargetKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectLockedTargetKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffChangeHomingBombCollectLockedTargetKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectLockedTargetKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectLockedTargetKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectLockedTargetKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectLockedTargetKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.prototype,{
	getTargetAlias: function() {
		return "collect_locked_item";
	}
	,setParams: function(obj) {
		if(!Object.prototype.hasOwnProperty.call(obj,"itemsWeights")) {
			obj.itemsWeights = [];
		}
		obj.itemsWeights[0].weight = 70;
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectLockedTargetKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveSpecialTargetKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffChangeHomingBombRemoveSpecialTargetKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveSpecialTargetKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveSpecialTargetKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveSpecialTargetKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveSpecialTargetKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.prototype,{
	getTargetAlias: function() {
		return "remove_special_viral_blocker";
	}
	,setParams: function(obj) {
		if(!Object.prototype.hasOwnProperty.call(obj,"blockersWeights")) {
			obj.blockersWeights = [];
		}
		obj.blockersWeights[0].weight = 4;
		obj.blockersWeights[1].weight = 3;
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveSpecialTargetKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveViralTargetKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffChangeHomingBombRemoveViralTargetKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveViralTargetKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveViralTargetKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveViralTargetKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveViralTargetKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.prototype,{
	getTargetAlias: function() {
		return "remove_viral_blocker";
	}
	,setParams: function(obj) {
		if(!Object.prototype.hasOwnProperty.call(obj,"blockersWeights")) {
			obj.blockersWeights = [];
		}
		obj.blockersWeights[0].weight = 70;
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveViralTargetKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveDoubleTargetKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffChangeHomingBombRemoveDoubleTargetKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveDoubleTargetKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveDoubleTargetKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveDoubleTargetKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveDoubleTargetKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.prototype,{
	getTargetAlias: function() {
		return "remove_double_viral_blocker";
	}
	,setParams: function(obj) {
		if(!Object.prototype.hasOwnProperty.call(obj,"blockersWeights")) {
			obj.blockersWeights = [];
		}
		obj.blockersWeights[0].weight = 60;
		obj.blockersWeights[1].weight = 50;
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveDoubleTargetKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCaptureTargetKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffChangeHomingBombCaptureTargetKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCaptureTargetKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCaptureTargetKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCaptureTargetKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCaptureTargetKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.prototype,{
	getTargetAlias: function() {
		return "capture_cells";
	}
	,setParams: function(obj) {
		obj.anyNotCaptured = 10;
		obj.notCapturedBlocker = 50;
		obj.capturedByOther = 100;
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCaptureTargetKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombScoreTargetKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffChangeHomingBombScoreTargetKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombScoreTargetKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombScoreTargetKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombScoreTargetKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombScoreTargetKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombBaseKarmaAction.prototype,{
	getTargetAlias: function() {
		return "capture_cells";
	}
	,setParams: function(obj) {
		if(!Object.prototype.hasOwnProperty.call(obj,"itemsWeights")) {
			obj.itemsWeights = [];
		}
		obj.itemsWeights[0].weight = 0;
		obj.itemsWeights[1].weight = 0;
		obj.itemsWeights[2].weight = 0;
		obj.itemsWeights[3].weight = 0;
		obj.itemsWeights[4].weight = 0;
		obj.itemsWeights[5].weight = 0;
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombScoreTargetKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffChangeSpawnItemsKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffChangeSpawnItemsKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffChangeSpawnItemsKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeSpawnItemsKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffChangeSpawnItemsKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffChangeSpawnItemsKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	init: function(core) {
		this.old = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			this.old.set(spawner,spawner.getDeepCopySpawnConfig());
		}
	}
	,run: function(core) {
		var colors = core.board.getPopularColors();
		colors.reverse();
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			var result = this.old.h[spawner.__id__];
			var count = result.length;
			while(--count >= 0) result[count].weight = com_sq_m3lib_karma_karmaActions_DebuffChangeSpawnItemsKarmaAction.spawnProbs[colors.lastIndexOf(result[count].itemParams.color)];
			spawner.setSpawnConfig(result);
		}
	}
	,uninit: function(core) {
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			spawner.setSpawnConfig(this.old.h[spawner.__id__]);
		}
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffChangeSpawnItemsKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffMatchColorBombKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffMatchColorBombKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffMatchColorBombKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffMatchColorBombKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffMatchColorBombKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffMatchColorBombKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	init: function(core) {
		this.core = core;
		this._onScenarioInited = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreScenarioEvent.INITED,$bind(this,this.onScenarioInited),1000);
		var key = core.targetsManager.targets[0].target.getId();
		var _this = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
		var params = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		this.tWeight = { alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR, weight : 10000000};
		if(!Object.prototype.hasOwnProperty.call(params,"itemsWeights")) {
			params.itemsWeights = [];
		}
		params.itemsWeights.push(this.tWeight);
	}
	,run: function(core) {
	}
	,uninit: function(core) {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreScenarioEvent.INITED,this._onScenarioInited);
		var key = core.targetsManager.targets[0].target.getId();
		var _this = com_sq_m3lib_coreSettings_CoreSettings.cellWeightsByTarget;
		HxOverrides.remove((__map_reserved[key] != null?_this.getReserved(key):_this.h[key]).itemsWeights,this.tWeight);
	}
	,onScenarioInited: function(e) {
		var event = js_Boot.__cast(e , com_sq_m3lib_events_CoreScenarioEvent);
		if(event.getScenario().getAlias() == com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR) {
			var scenario = js_Boot.__cast(event.getScenario() , com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario);
			if(scenario.getColor() == -1) {
				var count = this.core.board.getPopularColors().length;
				scenario.setColor(this.core.board.getPopularColors()[count - 1]);
			}
		}
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffMatchColorBombKarmaAction
});
var com_sq_m3lib_karma_karmaActions_DebuffRowSpawnItemsKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.DebuffRowSpawnItemsKarmaAction"] = com_sq_m3lib_karma_karmaActions_DebuffRowSpawnItemsKarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffRowSpawnItemsKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_DebuffRowSpawnItemsKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_DebuffRowSpawnItemsKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	run: function(core) {
	}
	,__class__: com_sq_m3lib_karma_karmaActions_DebuffRowSpawnItemsKarmaAction
});
var com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnItemsKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.LightBuffChangeSpawnItemsKarmaAction"] = com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnItemsKarmaAction;
com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnItemsKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnItemsKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnItemsKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	init: function(core) {
		this.old = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			this.old.set(spawner,spawner.getDeepCopySpawnConfig());
		}
		this.removeColors(core,this.getColors(core));
	}
	,getColors: function(core) {
		var colors = core.board.getPopularColors();
		var count = 0;
		if(colors.length > 5) {
			count = 5;
		} else {
			count = 4;
		}
		return colors.slice(0,count);
	}
	,removeColors: function(core,colors) {
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			var config = spawner.getSpawnConfig();
			if(config.length > 3) {
				var _g2 = 0;
				while(_g2 < config.length) {
					var prob = config[_g2];
					++_g2;
					if(colors.indexOf(prob.itemParams.color) == -1) {
						prob.weight = 0;
					}
				}
				spawner.setSpawnConfig(config);
			}
		}
	}
	,run: function(core) {
	}
	,uninit: function(core) {
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			spawner.setSpawnConfig(this.old.h[spawner.__id__]);
		}
	}
	,__class__: com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnItemsKarmaAction
});
var com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnCollectItemsKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnItemsKarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.LightBuffChangeSpawnCollectItemsKarmaAction"] = com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnCollectItemsKarmaAction;
com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnCollectItemsKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnCollectItemsKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnItemsKarmaAction;
com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnCollectItemsKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnItemsKarmaAction.prototype,{
	getColors: function(core) {
		var colors = core.board.boardUtils.getPopularColorsInArray(core.board.boardUtils.getItemsOnBoard([com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_GRAVITY_CHANGER_ITEM_DESCRIPTION],true));
		if(colors.length < 3) {
			return com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnItemsKarmaAction.prototype.getColors.call(this,core);
		}
		var count = 0;
		if(colors.length > 5) {
			count = 5;
		} else {
			count = 4;
		}
		return colors.slice(0,count);
	}
	,__class__: com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnCollectItemsKarmaAction
});
var com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.HighBuffChangeSpawnItemsKarmaAction"] = com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsKarmaAction;
com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	init: function(core) {
		this.old = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			this.old.set(spawner,spawner.getDeepCopySpawnConfig());
		}
		this.removeColors(core,this.getColors(core));
	}
	,getColors: function(core) {
		var colors = core.board.getPopularColors();
		var count = 0;
		if(colors.length > 5) {
			count = 4;
		} else {
			count = 3;
		}
		return colors.slice(0,count);
	}
	,removeColors: function(core,colors) {
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			var config = spawner.getSpawnConfig();
			if(config.length > 3) {
				var _g2 = 0;
				while(_g2 < config.length) {
					var prob = config[_g2];
					++_g2;
					if(colors.indexOf(prob.itemParams.color) == -1) {
						prob.weight = 0;
					}
				}
				spawner.setSpawnConfig(config);
			}
		}
	}
	,run: function(core) {
	}
	,uninit: function(core) {
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawner = _g1[_g];
			++_g;
			spawner.setSpawnConfig(this.old.h[spawner.__id__]);
		}
	}
	,__class__: com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsKarmaAction
});
var com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsCollectKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsKarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.HighBuffChangeSpawnItemsCollectKarmaAction"] = com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsCollectKarmaAction;
com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsCollectKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsCollectKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsKarmaAction;
com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsCollectKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsKarmaAction.prototype,{
	getColors: function(core) {
		var colors = core.board.boardUtils.getPopularColorsInArray(core.board.boardUtils.getItemsOnBoard([com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_GRAVITY_CHANGER_ITEM_DESCRIPTION],true));
		if(colors.length < 3) {
			return com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsKarmaAction.prototype.getColors.call(this,core);
		}
		var count = 0;
		if(colors.length > 5) {
			count = 5;
		} else {
			count = 4;
		}
		return colors.slice(0,count);
	}
	,__class__: com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsCollectKarmaAction
});
var com_sq_m3lib_karma_karmaActions_BuffMatchColorBombKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.BuffMatchColorBombKarmaAction"] = com_sq_m3lib_karma_karmaActions_BuffMatchColorBombKarmaAction;
com_sq_m3lib_karma_karmaActions_BuffMatchColorBombKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_BuffMatchColorBombKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_BuffMatchColorBombKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	init: function(core) {
		this.core = core;
		this._onScenarioInited = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreScenarioEvent.INITED,$bind(this,this.onScenarioInited),1000);
	}
	,run: function(core) {
	}
	,uninit: function(core) {
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback(com_sq_m3lib_events_CoreScenarioEvent.INITED,this._onScenarioInited);
	}
	,onScenarioInited: function(e) {
		var event = js_Boot.__cast(e , com_sq_m3lib_events_CoreScenarioEvent);
		if(event.getScenario().getAlias() == com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR) {
			var scenario = js_Boot.__cast(event.getScenario() , com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario);
			if(scenario.getColor() == -1) {
				scenario.setColor(this.core.targetsManager.targets[0].target.getPopularColorForTarget(this.core)[0]);
			}
		}
	}
	,__class__: com_sq_m3lib_karma_karmaActions_BuffMatchColorBombKarmaAction
});
var com_sq_m3lib_karma_karmaActions_LightBuffSpawnSuperItemsKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.LightBuffSpawnSuperItemsKarmaAction"] = com_sq_m3lib_karma_karmaActions_LightBuffSpawnSuperItemsKarmaAction;
com_sq_m3lib_karma_karmaActions_LightBuffSpawnSuperItemsKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_LightBuffSpawnSuperItemsKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_LightBuffSpawnSuperItemsKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	init: function(core) {
		this.homigBombSpawner = core.spawnFactory.createSpecialSpawnerByConfig(this.getHomingBombSpecialSpawnConfig());
		core.spawnFactory.addSpecialSpawner(this.homigBombSpawner);
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawn = _g1[_g];
			++_g;
			spawn.addSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION);
		}
	}
	,run: function(core) {
	}
	,uninit: function(core) {
		core.spawnFactory.removeSpecialSpawner(this.homigBombSpawner);
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawn = _g1[_g];
			++_g;
			spawn.removeSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION);
		}
	}
	,getHomingBombSpecialSpawnConfig: function() {
		return { className : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING, max : 3, min : 0, spawnDelta : 3, firstSpawnDelta : 1, count : 1, item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION};
	}
	,__class__: com_sq_m3lib_karma_karmaActions_LightBuffSpawnSuperItemsKarmaAction
});
var com_sq_m3lib_karma_karmaActions_HighBuffActivationSuperItemsKarmaAction = function() {
	this.homingBombCharged = false;
	this.onItemSpawnedCallbacks = [];
	this.step = 0;
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.HighBuffActivationSuperItemsKarmaAction"] = com_sq_m3lib_karma_karmaActions_HighBuffActivationSuperItemsKarmaAction;
com_sq_m3lib_karma_karmaActions_HighBuffActivationSuperItemsKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_HighBuffActivationSuperItemsKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_HighBuffActivationSuperItemsKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	init: function(core) {
		this.step = 0;
		this.core = core;
	}
	,run: function(core) {
		this.step++;
		if((this.step - 2) % 3 == 0 || this.step == 2) {
			this._onDestroyComboCallback = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("destroyed",$bind(this,this.onDestroyCombo),1000);
		}
	}
	,uninit: function(core) {
		this.removeHomingBombSpawn();
	}
	,onDestroyCombo: function(e) {
		if(!js_Boot.__instanceof(e,com_sq_m3lib_events_CoreComboEvent)) {
			return;
		}
		var cls = this.getOriginCells((js_Boot.__cast(e , com_sq_m3lib_events_CoreComboEvent)).getCombo().cells);
		if(cls.length > 0) {
			var c = cls[0];
			if(c.getItem().getItemDescription().className == com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SIMPLE) {
				this.changeItem(c);
			}
			this.core.destroyFactory.destroySingleItemNoScore(c,c.getItem(),"boosterApplied");
		}
		com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("destroyed",this._onDestroyComboCallback);
	}
	,onItemSpawned: function(e) {
		if(!js_Boot.__instanceof(e,com_sq_m3lib_events_CoreItemAddedEvent)) {
			return;
		}
		var _g = 0;
		var _g1 = (js_Boot.__cast(e , com_sq_m3lib_events_CoreItemAddedEvent)).getItems();
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.getItemDescription().className == com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING) {
				this.core.destroyFactory.destroySingleItemNoScore(item.cell,item,"boosterApplied");
				this.removeHomingBombSpawn();
			}
		}
	}
	,getOriginCells: function(cells) {
		var result = [];
		var _g = 0;
		while(_g < cells.length) {
			var cell = cells[_g];
			++_g;
			var c = this.getFromCell(cell);
			if(c != null) {
				result.push(c);
			}
		}
		return result;
	}
	,getFromCell: function(cell) {
		var _g = 0;
		var _g1 = cell.fromCells;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(!this.core.board.boardUtils.isCellInViewPort(c)) {
				return c;
			} else if(c.spawner != null && !this.homingBombCharged) {
				this.addHomingBombSpawn(c.spawner);
				break;
			} else if(c.teleportsToCell != null) {
				if(c.teleportsToCell.length > 0) {
					return c.teleportsToCell[0].getFromCell();
				}
			} else {
				return this.getFromCell(c);
			}
		}
		return null;
	}
	,changeItem: function(cell) {
		var desc = { className : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING, color : -1};
		this.core.board.changeItemInCell(this.core.itemsFactory.getItem(desc,cell.getCoords()),cell);
	}
	,getHomingBombSpecialSpawnConfig: function() {
		return { className : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING, max : 3, min : 0, spawnDelta : 1, firstSpawnDelta : 0, count : 1, item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION};
	}
	,addHomingBombSpawn: function(spawner) {
		this.homingBombCharged = true;
		this.onItemSpawnedCallbacks.push(com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("new_items_spawned",$bind(this,this.onItemSpawned),1000));
		this.homigBombSpawner = this.core.spawnFactory.createSpecialSpawnerByConfig(this.getHomingBombSpecialSpawnConfig());
		if(this.core.spawnFactory.specialSpawners.indexOf(this.homigBombSpawner) == -1) {
			this.core.spawnFactory.addSpecialSpawner(this.homigBombSpawner);
		}
		var _g = 0;
		var _g1 = this.core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawn = _g1[_g];
			++_g;
			spawn.addSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION);
		}
	}
	,removeHomingBombSpawn: function() {
		if(this.homigBombSpawner == null) {
			return;
		}
		this.clearSpawnItemsCallbacks();
		this.core.spawnFactory.removeSpecialSpawner(this.homigBombSpawner);
		var _g = 0;
		var _g1 = this.core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawn = _g1[_g];
			++_g;
			spawn.removeSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION);
		}
		this.homingBombCharged = false;
	}
	,clearSpawnItemsCallbacks: function() {
		var _g = 0;
		var _g1 = this.onItemSpawnedCallbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			com_sq_m3lib_events_CoreEventDispatcher.getInstance().removeEventCallback("new_items_spawned",callback);
		}
	}
	,__class__: com_sq_m3lib_karma_karmaActions_HighBuffActivationSuperItemsKarmaAction
});
var com_sq_m3lib_karma_karmaActions_LightBuffSpawnLineBombKarmaAction = function() {
	com_sq_m3lib_karma_karmaActions_KarmaAction.call(this);
};
$hxClasses["com.sq.m3lib.karma.karmaActions.LightBuffSpawnLineBombKarmaAction"] = com_sq_m3lib_karma_karmaActions_LightBuffSpawnLineBombKarmaAction;
com_sq_m3lib_karma_karmaActions_LightBuffSpawnLineBombKarmaAction.__name__ = true;
com_sq_m3lib_karma_karmaActions_LightBuffSpawnLineBombKarmaAction.__super__ = com_sq_m3lib_karma_karmaActions_KarmaAction;
com_sq_m3lib_karma_karmaActions_LightBuffSpawnLineBombKarmaAction.prototype = $extend(com_sq_m3lib_karma_karmaActions_KarmaAction.prototype,{
	init: function(core) {
		this.horizontalBombSpawner = core.spawnFactory.createSpecialSpawnerByConfig(this.getHomingBombSpecialSpawnConfigHorizontal());
		core.spawnFactory.addSpecialSpawner(this.horizontalBombSpawner);
		this.verticalBombSpawner = core.spawnFactory.createSpecialSpawnerByConfig(this.getHomingBombSpecialSpawnConfigVertical());
		core.spawnFactory.addSpecialSpawner(this.horizontalBombSpawner);
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawn = _g1[_g];
			++_g;
			spawn.addSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HORIZONTAL_BOMB_DESCRIPTION);
			spawn.addSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_VERTICAL_BOMB_DESCRIPTION);
		}
	}
	,run: function(core) {
	}
	,uninit: function(core) {
		core.spawnFactory.removeSpecialSpawner(this.horizontalBombSpawner);
		core.spawnFactory.removeSpecialSpawner(this.verticalBombSpawner);
		var _g = 0;
		var _g1 = core.spawnFactory.spawners;
		while(_g < _g1.length) {
			var spawn = _g1[_g];
			++_g;
			spawn.removeSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HORIZONTAL_BOMB_DESCRIPTION);
			spawn.removeSpecialSpawn(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_VERTICAL_BOMB_DESCRIPTION);
		}
	}
	,getHomingBombSpecialSpawnConfigHorizontal: function() {
		return { className : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL, max : 5, min : 0, spawnDelta : 6, firstSpawnDelta : 1, count : 1, item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HORIZONTAL_BOMB_DESCRIPTION};
	}
	,getHomingBombSpecialSpawnConfigVertical: function() {
		return { className : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL, max : 5, min : 0, spawnDelta : 6, firstSpawnDelta : 1, count : 1, item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_VERTICAL_BOMB_DESCRIPTION};
	}
	,__class__: com_sq_m3lib_karma_karmaActions_LightBuffSpawnLineBombKarmaAction
});
var com_sq_m3lib_karma_KarmaSet = function(obj) {
	this._actions = [];
	var _g = 0;
	var _g1 = Reflect.fields(obj);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		this[f] = Reflect.field(obj,f);
	}
	var _g11 = 0;
	var _g2 = this.actions.length;
	while(_g11 < _g2) this._actions.push(Type.createInstance(Type.resolveClass("com.sq.m3lib.karma.karmaActions." + this.actions[_g11++]),[]));
};
$hxClasses["com.sq.m3lib.karma.KarmaSet"] = com_sq_m3lib_karma_KarmaSet;
com_sq_m3lib_karma_KarmaSet.__name__ = true;
com_sq_m3lib_karma_KarmaSet.prototype = {
	run: function(core) {
		var _g = 0;
		var _g1 = this._actions;
		while(_g < _g1.length) {
			var act = _g1[_g];
			++_g;
			act.run(core);
		}
	}
	,init: function(core) {
		var _g = 0;
		var _g1 = this._actions;
		while(_g < _g1.length) {
			var act = _g1[_g];
			++_g;
			act.init(core);
		}
	}
	,uninit: function(core) {
		var _g = 0;
		var _g1 = this._actions;
		while(_g < _g1.length) {
			var act = _g1[_g];
			++_g;
			act.uninit(core);
		}
	}
	,__class__: com_sq_m3lib_karma_KarmaSet
};
var com_sq_m3lib_karma_KarmaSettings = function() { };
$hxClasses["com.sq.m3lib.karma.KarmaSettings"] = com_sq_m3lib_karma_KarmaSettings;
com_sq_m3lib_karma_KarmaSettings.__name__ = true;
var com_sq_m3lib_karma_LightBuffKarmaProvider = function(karmaSet) {
	com_sq_m3lib_karma_KarmaProvider.call(this,karmaSet);
};
$hxClasses["com.sq.m3lib.karma.LightBuffKarmaProvider"] = com_sq_m3lib_karma_LightBuffKarmaProvider;
com_sq_m3lib_karma_LightBuffKarmaProvider.__name__ = true;
com_sq_m3lib_karma_LightBuffKarmaProvider.__super__ = com_sq_m3lib_karma_KarmaProvider;
com_sq_m3lib_karma_LightBuffKarmaProvider.prototype = $extend(com_sq_m3lib_karma_KarmaProvider.prototype,{
	log: function() {
		return "km_provider_lb";
	}
	,__class__: com_sq_m3lib_karma_LightBuffKarmaProvider
});
var com_sq_m3lib_levelParser_LevelParser = $hx_exports["com"]["sq"]["m3lib"]["levelParser"] = function() {
};
$hxClasses["com.sq.m3lib.levelParser.LevelParser"] = com_sq_m3lib_levelParser_LevelParser;
com_sq_m3lib_levelParser_LevelParser.__name__ = true;
com_sq_m3lib_levelParser_LevelParser.main = function() {
};
com_sq_m3lib_levelParser_LevelParser.createTypedDef = function() {
	var result = { };
	return result;
};
com_sq_m3lib_levelParser_LevelParser.prototype = {
	parse: function(source,onError) {
		var parsed = JSON.parse(source);
		var result = null;
		try {
			result = this.loadFromParsedConfig(parsed);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,Error) ) {
				com_sq_m3lib_log_CoreLog.haxeTrace(e,{ fileName : "LevelParser.hx", lineNumber : 44, className : "com.sq.m3lib.levelParser.LevelParser", methodName : "parse"});
				com_sq_m3lib_log_CoreLog.haxeTrace(haxe_CallStack.toString(haxe_CallStack.exceptionStack()),{ fileName : "LevelParser.hx", lineNumber : 45, className : "com.sq.m3lib.levelParser.LevelParser", methodName : "parse"});
				if(onError != null) {
					onError(haxe_CallStack.toString(haxe_CallStack.exceptionStack()));
				}
			} else throw(e);
		}
		return result;
	}
	,loadFromParsedConfig: function(parsed) {
		this.height = parsed.tileMap.length;
		this.width = parsed.tileMap[0].length;
		var resultLevelConfig = com_sq_m3lib_board_LevelConfig.getEmptyLevelConfig(this.height,this.width);
		var j = -1;
		while(++j < parsed.numberOfItemColors) resultLevelConfig.itemsColors.push(j);
		this.parseCells(parsed,resultLevelConfig);
		this.parseDirections(parsed,resultLevelConfig);
		this.parsePortals(parsed,resultLevelConfig);
		resultLevelConfig.moves = parsed.movesLimit;
		this.parseCameraTargets(parsed,resultLevelConfig);
		this.parseCommonSpawners(parsed,resultLevelConfig);
		this.parseSpecialSpawnerParams(parsed,resultLevelConfig);
		this.parseGameTasks(parsed,resultLevelConfig);
		this.parseStars(parsed,resultLevelConfig);
		return JSON.stringify(resultLevelConfig.toJsonConfig());
	}
	,parseCells: function(parsed,resultConfig) {
		var _g = 0;
		var _g1 = parsed.tileMap;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < i.length) {
				var j = i[_g2];
				++_g2;
				var resultCellAttribute = { };
				var count = j.length;
				while(--count >= 0) {
					var cellAttribute = com_sq_m3lib_levelParser_LevelParserConfig.cellConfigMap.h[j[count]];
					if(cellAttribute == null) {
						continue;
					}
					this.cloneCellDefTo(cellAttribute,resultCellAttribute);
				}
				resultConfig.boardAttributes[parsed.tileMap.indexOf(i)][i.indexOf(j)] = resultCellAttribute;
				var count1 = j.length;
				while(--count1 >= 0) {
					var colorInfo = com_sq_m3lib_levelParser_LevelParserConfig.tileColorConfigMap.h.hasOwnProperty(j[count1])?com_sq_m3lib_levelParser_LevelParserConfig.tileColorConfigMap.h[j[count1]]:null;
					if(colorInfo == null) {
						continue;
					}
					this.applyItemColor(resultConfig.boardAttributes[parsed.tileMap.indexOf(i)][i.indexOf(j)],colorInfo);
				}
			}
		}
	}
	,applyItemColor: function(cellAttribute,info) {
		if(cellAttribute == null || cellAttribute.item == null) {
			return;
		}
		cellAttribute.item.color = info;
	}
	,parseDirections: function(parsed,resultConfig) {
		var i = this.height;
		while(--i >= 0) {
			var j = this.width;
			while(--j >= 0) {
				if(resultConfig.directions[i] == null) {
					resultConfig.directions[i] = [];
				}
				resultConfig.directions[i][j] = com_sq_m3lib_coreSettings_CoreSettings.getDirectionByVector(new com_sq_m3lib_geometry_CellVector(parsed.accelerationMap[i][j][0],parsed.accelerationMap[i][j][1]));
			}
		}
	}
	,parsePortals: function(parsed,resultConfig) {
		var i = -1;
		var count = parsed.portals.length;
		var portal;
		var connectedPortal;
		var teleport;
		var tmpPortals = [];
		var tmpCount = count;
		while(++i < tmpCount) {
			tmpPortals[parsed.portals[i].id] = parsed.portals[i];
			if(count <= parsed.portals[i].id) {
				count = parsed.portals[i].id + 1;
			}
		}
		i = -1;
		while(++i < count) {
			portal = tmpPortals[i];
			if(portal == null) {
				continue;
			}
			if(portal.connectionId < i) {
				continue;
			}
			connectedPortal = tmpPortals[portal.connectionId];
			if(connectedPortal == null) {
				continue;
			}
			teleport = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
			teleport.from = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
			teleport.from.x = portal.coordinate[0];
			teleport.from.y = portal.coordinate[1];
			teleport.to = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
			teleport.to.x = connectedPortal.coordinate[0];
			teleport.to.y = connectedPortal.coordinate[1];
			teleport.direction = com_sq_m3lib_coreSettings_CoreSettings.getOppositeDirection(com_sq_m3lib_coreSettings_CoreSettings.getDirectionByVector(new com_sq_m3lib_geometry_CellVector(portal.normal[0],portal.normal[1])));
			resultConfig.teleports.push(teleport);
			teleport = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
			teleport.from = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
			teleport.from.x = connectedPortal.coordinate[0];
			teleport.from.y = connectedPortal.coordinate[1];
			teleport.to = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
			teleport.to.x = portal.coordinate[0];
			teleport.to.y = portal.coordinate[1];
			teleport.direction = com_sq_m3lib_coreSettings_CoreSettings.getOppositeDirection(com_sq_m3lib_coreSettings_CoreSettings.getDirectionByVector(new com_sq_m3lib_geometry_CellVector(connectedPortal.normal[0],connectedPortal.normal[1])));
			resultConfig.teleports.push(teleport);
		}
	}
	,parseCameraTargets: function(parsed,resultConfig) {
		var count = parsed.cameraTargets.length;
		var i = -1;
		var viewPoint;
		resultConfig.viewPoints = [];
		if(count == 0) {
			viewPoint = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
			viewPoint.x = 0;
			viewPoint.y = 0;
			resultConfig.viewPoints.push(viewPoint);
		} else {
			while(++i < count) {
				viewPoint = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
				viewPoint.x = parsed.cameraTargets[i][0] - 4;
				viewPoint.y = parsed.cameraTargets[i][1] - 4;
				resultConfig.viewPoints.push(viewPoint);
			}
		}
	}
	,parseCommonSpawners: function(parsed,resultConfig) {
		var spawner;
		if(parsed.candyCannons == null) {
			var _g = 0;
			var _g1 = parsed.tileMap;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var _g2 = 0;
				while(_g2 < i.length) {
					var j = i[_g2];
					++_g2;
					var count = j.length;
					while(--count >= 0) {
						var spawnerDirection = com_sq_m3lib_levelParser_LevelParserConfig.spawnerConfigMap.h.hasOwnProperty(j[count])?com_sq_m3lib_levelParser_LevelParserConfig.spawnerConfigMap.h[j[count]]:null;
						if(spawnerDirection == null) {
							continue;
						}
						spawner = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
						spawner.moveDirection = spawnerDirection;
						spawner.coord = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
						spawner.coord.y = parsed.tileMap.indexOf(i);
						spawner.coord.x = i.indexOf(j);
						if(parsed.colorWeights == null || Reflect.fields(parsed.colorWeights).length == 0) {
							spawner.spawn = [this.createRandomItemSpawn()];
						} else {
							var color = -1;
							spawner.spawn = [];
							var maxColors = resultConfig.itemsColors.length;
							while(++color < maxColors) spawner.spawn.push(this.createColorItemSpawn(resultConfig.itemsColors[color],parsed.colorWeights));
						}
						resultConfig.spawns.push(spawner);
					}
				}
			}
		} else {
			var _g3 = 0;
			var _g11 = parsed.candyCannons;
			while(_g3 < _g11.length) {
				var i1 = _g11[_g3];
				++_g3;
				spawner = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
				spawner.moveDirection = com_sq_m3lib_levelParser_LevelParserConfig.spawnerConfigMap.h[i1.normalType];
				spawner.coord = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
				spawner.coord.x = i1.coordinate[0];
				spawner.coord.y = i1.coordinate[1];
				if(i1.ammunition.length > 0) {
					spawner.specialSpawn = [];
					var specialName;
					var _g21 = 0;
					var _g31 = i1.ammunition;
					while(_g21 < _g31.length) {
						var ammunition = _g31[_g21];
						++_g21;
						var _this = com_sq_m3lib_levelParser_LevelParserConfig.ammunitionConfigMap;
						if(__map_reserved[ammunition] != null?_this.existsReserved(ammunition):_this.h.hasOwnProperty(ammunition)) {
							var _this1 = com_sq_m3lib_levelParser_LevelParserConfig.ammunitionConfigMap;
							specialName = __map_reserved[ammunition] != null?_this1.getReserved(ammunition):_this1.h[ammunition];
						} else {
							specialName = null;
						}
						if(specialName != null) {
							spawner.specialSpawn.push(specialName);
						}
					}
				}
				if(i1.ammunition.length > 0 && i1.ammunition.indexOf("normalItems") == -1) {
					resultConfig.spawns.push(spawner);
					continue;
				}
				if(i1.colors.length > 0) {
					spawner.spawn = [];
					var _g22 = 0;
					var _g32 = i1.colors;
					while(_g22 < _g32.length) {
						var color1 = _g32[_g22];
						++_g22;
						if(color1 <= parsed.numberOfItemColors) {
							spawner.spawn.push(this.createColorItemSpawn(com_sq_m3lib_levelParser_LevelParserConfig.colorConvertConfigMap.h[color1],parsed.colorWeights));
						}
					}
				} else if(parsed.colorWeights == null || Reflect.fields(parsed.colorWeights).length == 0) {
					spawner.spawn = [this.createRandomItemSpawn()];
				} else {
					var color2 = -1;
					spawner.spawn = [];
					var maxColors1 = resultConfig.itemsColors.length;
					while(++color2 < maxColors1) spawner.spawn.push(this.createColorItemSpawn(resultConfig.itemsColors[color2],parsed.colorWeights));
				}
				resultConfig.spawns.push(spawner);
			}
		}
	}
	,createColorItemSpawn: function(color,colorWeights) {
		var itemSpawn = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		itemSpawn.itemParams = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		this.cloneCellDefTo(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_ITEM_DESCRIPTION,itemSpawn.itemParams);
		itemSpawn.itemParams.color = color;
		itemSpawn.weight = this.getColorWeight(colorWeights,com_sq_m3lib_levelParser_LevelParserConfig.colorConfigMap.h[color]);
		return itemSpawn;
	}
	,createRandomItemSpawn: function() {
		var itemSpawn = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		itemSpawn.itemParams = com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_ITEM_DESCRIPTION;
		itemSpawn.weight = 1;
		return itemSpawn;
	}
	,getColorWeight: function(colorWeights,colorName) {
		if(colorWeights == null || Reflect.fields(colorWeights).length == 0) {
			return 1;
		}
		if(Object.prototype.hasOwnProperty.call(colorWeights,colorName)) {
			var tmp;
			var tmp1;
			if(colorWeights == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(colorWeights.__properties__) {
					tmp = colorWeights.__properties__["get_" + colorName];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = colorWeights[tmp]();
				} else {
					tmp1 = colorWeights[colorName];
				}
			}
			return tmp1 * 100 | 0;
		} else {
			return 0;
		}
	}
	,parseSpecialSpawnerParams: function(parsed,resultConfig) {
		if(parsed.liquoriceSpawnRate + parsed.minNumLiquoriceOnScreen + parsed.maxNumLiquoriceOnScreen > 0) {
			resultConfig.specialSpawns.push(this.getItemLockSpawnParams(parsed));
		}
		var i = parsed.specialCandiesAmmunitionData == null?0:parsed.specialCandiesAmmunitionData.length;
		var specialSpawn;
		while(--i >= 0) {
			specialSpawn = this.getSpecialItemSpawnParams(parsed.specialCandiesAmmunitionData[i]);
			if(specialSpawn != null) {
				resultConfig.specialSpawns.push(specialSpawn);
			}
		}
		specialSpawn = this.getGravityChangerItemParams(parsed);
		if(specialSpawn != null) {
			resultConfig.specialSpawns.push(specialSpawn);
			var _g = 0;
			var _g1 = resultConfig.spawns;
			while(_g < _g1.length) {
				var spawn = _g1[_g];
				++_g;
				if(spawn.specialSpawn == null) {
					spawn.specialSpawn = [];
				}
				spawn.specialSpawn.push(com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_GRAVITY_CHANGER_ITEM_DESCRIPTION);
			}
		}
	}
	,getItemLockSpawnParams: function(parsed) {
		var spawnConfig = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		spawnConfig.className = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER;
		spawnConfig.firstSpawnDelta = 0;
		spawnConfig.count = 1;
		spawnConfig.min = parsed.minNumLiquoriceOnScreen;
		spawnConfig.max = parsed.maxNumLiquoriceOnScreen;
		spawnConfig.spawnDelta = parsed.liquoriceSpawnRate;
		return spawnConfig;
	}
	,getSpecialItemSpawnParams: function(params) {
		var spawnConfig = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		var spawnItemDef;
		var _this = com_sq_m3lib_levelParser_LevelParserConfig.ammunitionConfigMap;
		var key = params.ammunitionType;
		if(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key)) {
			var _this1 = com_sq_m3lib_levelParser_LevelParserConfig.ammunitionConfigMap;
			var key1 = params.ammunitionType;
			spawnItemDef = __map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1];
		} else {
			spawnItemDef = null;
		}
		if(spawnItemDef == null) {
			return null;
		}
		spawnConfig.className = spawnItemDef.className;
		spawnConfig.firstSpawnDelta = params.initialSpawnIntervalCounterValue;
		spawnConfig.count = params.amountPerSpawn;
		spawnConfig.spawnDelta = params.spawnInterval;
		spawnConfig.min = 0;
		spawnConfig.max = 0;
		return spawnConfig;
	}
	,getGravityChangerItemParams: function(parsed) {
		if(com_sq_m3lib_levelParser_LevelParserConfig.GRAVITY_CHANGE_TASKS.indexOf(parsed.gameModeName) == -1) {
			return null;
		}
		var params = null;
		var i = parsed.gameModeTasks.length;
		while(--i >= 0) {
			if(parsed.gameModeTasks[i].name != com_sq_m3lib_levelParser_LevelParserConfig.LEMONADE_SEA_TASK_NAME) {
				continue;
			}
			params = parsed.gameModeTasks[i];
		}
		var spawnConfig = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		spawnConfig.className = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_GRAVITY_CHANGER;
		spawnConfig.firstSpawnDelta = 0;
		spawnConfig.count = 1;
		spawnConfig.spawnDelta = params.spawnLemonadeBalloonAfterNumSwitches;
		spawnConfig.min = params.minNumLemonadeBalloonsOnScreen;
		spawnConfig.max = params.maxNumLemonadeBalloonsOnScreen;
		return spawnConfig;
	}
	,parseGameTasks: function(parsed,resultConfig) {
		var parseFunction = null;
		switch(parsed.gameModeName) {
		case "BubbleGum":
			parseFunction = $bind(this,this.parseCollectViralGumTask);
			break;
		case "ChocolateNemesis":
			var needCommon = false;
			var needDouble = false;
			var _g = 0;
			var _g1 = resultConfig.boardAttributes;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var _g2 = 0;
				while(_g2 < i.length) {
					var j = i[_g2];
					++_g2;
					if(j.blocker == null) {
						continue;
					}
					var _g3 = 0;
					var _g4 = j.blocker;
					while(_g3 < _g4.length) {
						var blocker = _g4[_g3];
						++_g3;
						if(blocker.className == "blocker_simple_viral") {
							needCommon = true;
						} else if(blocker.className == "blocker_double_simple_viral") {
							needDouble = true;
						}
						if(needCommon && needDouble) {
							break;
						}
					}
					if(needCommon && needDouble) {
						break;
					}
				}
				if(needCommon && needDouble) {
					break;
				}
			}
			if(needCommon) {
				resultConfig.targets.push(this.parseCollectViralBlockerTask(parsed));
			}
			if(needDouble) {
				resultConfig.targets.push(this.parseCollectDoubleViralBlockerTask(parsed));
			}
			parseFunction = null;
			break;
		case "FloatingNutsMode":
			parseFunction = $bind(this,this.parseCollectItemTask);
			break;
		case "GiantBears":
			parseFunction = $bind(this,this.parseCollectHiddenTask);
			break;
		case "Honey":
			parseFunction = $bind(this,this.parseCollectLockedItemTask);
			break;
		case "PaintBattleMode":
			parseFunction = $bind(this,this.parseCaptureTask);
			break;
		case "SodaToTheBrim":
			parseFunction = $bind(this,this.parseCollectGravityChangersTask);
			break;
		}
		if(parseFunction == null) {
			return;
		}
		resultConfig.targets.push(parseFunction(parsed));
	}
	,parseCollectGravityChangersTask: function(params) {
		var taskParams = null;
		var i = params.gameModeTasks.length;
		while(--i >= 0) {
			if(params.gameModeTasks[i].name != com_sq_m3lib_levelParser_LevelParserConfig.LEMONADE_SEA_TASK_NAME) {
				continue;
			}
			taskParams = params.gameModeTasks[i];
		}
		var result = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		var _this = com_sq_m3lib_levelParser_LevelParserConfig.tasksConfigMap;
		var key = params.gameModeName;
		result.id = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		result.gravityParams = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		result.gravityParams.autoFillPerItem = taskParams.autoFillLemonade?taskParams.numLemonadeDropsPerSplash:0;
		result.gravityParams.fillMap = [];
		if(taskParams.manualFillRows == null || taskParams.manualFillRows.length == 0) {
			return result;
		}
		var i1 = -1;
		var manualFillLength = taskParams.manualFillRows.length;
		while(++i1 < manualFillLength) {
			var j = -1;
			var manualFillWidth = taskParams.manualFillRows[i1].length;
			result.gravityParams.fillMap[i1] = [];
			while(++j < manualFillWidth) {
				var tmp = new com_sq_m3lib_geometry_Coord(taskParams.manualFillRows[i1][j][0],taskParams.manualFillRows[i1][j][1]).toViewPoint();
				result.gravityParams.fillMap[i1].push(tmp);
			}
		}
		result.count = result.gravityParams.fillMap.length;
		return result;
	}
	,parseCaptureTask: function(params) {
		var result = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		var _this = com_sq_m3lib_levelParser_LevelParserConfig.tasksConfigMap;
		var key = params.gameModeName;
		result.id = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		return result;
	}
	,parseCollectItemTask: function(params) {
		var result = this.parseCollectGravityChangersTask(params);
		result.count = 0;
		result.reachCellParams = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		result.reachCellParams.targetCells = [];
		var _g = 0;
		var _g1 = params.tileMap;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < i.length) {
				var j = i[_g2];
				++_g2;
				var count = j.length;
				while(--count >= 0) if(com_sq_m3lib_levelParser_LevelParserConfig.reachCellConfig == j[count]) {
					result.reachCellParams.targetCells.push(new com_sq_m3lib_geometry_Coord(i.indexOf(j),params.tileMap.indexOf(i)).toViewPoint());
					break;
				}
			}
		}
		return result;
	}
	,parseCollectLockedItemTask: function(params) {
		var result = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		var _this = com_sq_m3lib_levelParser_LevelParserConfig.tasksConfigMap;
		var key = params.gameModeName;
		result.id = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		result.count = 0;
		return result;
	}
	,parseCollectViralBlockerTask: function(params) {
		var result = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		var _this = com_sq_m3lib_levelParser_LevelParserConfig.tasksConfigMap;
		var key = params.gameModeName;
		result.id = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		result.count = 0;
		return result;
	}
	,parseCollectDoubleViralBlockerTask: function(params) {
		var result = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		result.id = "remove_double_viral_blocker";
		result.count = 0;
		return result;
	}
	,parseCollectViralGumTask: function(params) {
		var result = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		var _this = com_sq_m3lib_levelParser_LevelParserConfig.tasksConfigMap;
		var key = params.gameModeName;
		result.id = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		result.count = 0;
		return result;
	}
	,parseCollectHiddenTask: function(params) {
		var taskParams = null;
		var i = params.gameModeTasks.length;
		while(--i >= 0) {
			if(params.gameModeTasks[i].name != com_sq_m3lib_levelParser_LevelParserConfig.GIANT_BEAR_TASK_NAME) {
				continue;
			}
			taskParams = params.gameModeTasks[i];
		}
		var result = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
		var _this = com_sq_m3lib_levelParser_LevelParserConfig.tasksConfigMap;
		var key = params.gameModeName;
		result.id = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		result.hiddenObjectsParams = [];
		var hiddenObject;
		var objects = new haxe_ds_ObjectMap();
		var hiddenObjectParams;
		var baseHiddenObjects = [];
		var _g = 0;
		var _g1 = params.tileMap;
		while(_g < _g1.length) {
			var xArray = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < xArray.length) {
				var yArray = xArray[_g2];
				++_g2;
				var count = yArray.length;
				while(--count >= 0) {
					if(com_sq_m3lib_levelParser_LevelParserConfig.hiddenObjectConfigMap.h.hasOwnProperty(yArray[count])) {
						hiddenObject = com_sq_m3lib_levelParser_LevelParserConfig.hiddenObjectConfigMap.h[yArray[count]];
					} else {
						hiddenObject = null;
					}
					if(hiddenObject == null) {
						continue;
					}
					hiddenObjectParams = objects.h[hiddenObject.__id__];
					if(hiddenObjectParams == null) {
						hiddenObjectParams = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
						hiddenObjectParams.description = hiddenObject;
						hiddenObjectParams.placement = [];
						hiddenObjectParams.count = 0;
						objects.set(hiddenObject,hiddenObjectParams);
						baseHiddenObjects.push(new com_sq_m3lib_board_cellHiddenObjects_RectangularHiddenObject(hiddenObject));
					}
					hiddenObjectParams.placement.push({ y : params.tileMap.indexOf(xArray), x : xArray.indexOf(yArray), rotation : false, points : null});
				}
			}
		}
		var sortPlacement = { x : 0, y : 0, rotation : false, points : null};
		baseHiddenObjects.sort(function(obj1,obj2) {
			return obj1.getTakenCoords(sortPlacement).length - obj2.getTakenCoords(sortPlacement).length;
		});
		var takenCoords = [];
		var i1 = baseHiddenObjects.length;
		var placements;
		var totalCount = 0;
		while(--i1 >= 0) {
			placements = objects.h[baseHiddenObjects[i1].description.__id__].placement;
			var placementsCount = placements.length;
			var j = -1;
			var tmpPlacementCoords;
			while(++j < placementsCount) {
				tmpPlacementCoords = baseHiddenObjects[i1].getTakenCoords(placements[j]);
				var _g3 = 0;
				while(_g3 < tmpPlacementCoords.length) {
					var element = tmpPlacementCoords[_g3];
					++_g3;
					if(takenCoords[element.x] != null && takenCoords[element.x][element.y] > 0) {
						tmpPlacementCoords = null;
						break;
					}
				}
				if(tmpPlacementCoords == null) {
					continue;
				}
				var _g4 = 0;
				while(_g4 < tmpPlacementCoords.length) {
					var element1 = tmpPlacementCoords[_g4];
					++_g4;
					if(takenCoords[element1.x] == null) {
						takenCoords[element1.x] = [];
					}
					takenCoords[element1.x][element1.y] = 1;
				}
				objects.h[baseHiddenObjects[i1].description.__id__].count = objects.h[baseHiddenObjects[i1].description.__id__].count + 1;
				++totalCount;
				if(totalCount >= taskParams.preferredNumberOfGiantBears) {
					break;
				}
			}
			if(totalCount >= taskParams.preferredNumberOfGiantBears) {
				break;
			}
		}
		var resultHiddenObjectsConfig = [];
		i1 = baseHiddenObjects.length;
		while(--i1 >= 0) {
			var tmpDescription = baseHiddenObjects[i1].description;
			var key1 = tmpDescription.size.x + ":" + tmpDescription.size.y;
			var _this1 = com_sq_m3lib_levelParser_LevelParserConfig.hiddenObjectRotationConfig;
			var rotatedDescription = __map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1];
			if(objects.h[tmpDescription.__id__] == null) {
				continue;
			}
			if(objects.h[tmpDescription.__id__].count > 0 && objects.h[rotatedDescription.__id__] == null) {
				resultHiddenObjectsConfig.push(objects.h[tmpDescription.__id__]);
				continue;
			}
			if(objects.h[tmpDescription.__id__].count > 0 || objects.h[rotatedDescription.__id__].count > 0) {
				objects.h[tmpDescription.__id__].count = objects.h[tmpDescription.__id__].count + objects.h[rotatedDescription.__id__].count;
				placements = objects.h[rotatedDescription.__id__].placement;
				var _g5 = 0;
				while(_g5 < placements.length) {
					var element2 = placements[_g5];
					++_g5;
					element2.rotation = true;
				}
				objects.h[tmpDescription.__id__].placement = objects.h[tmpDescription.__id__].placement.concat(objects.h[rotatedDescription.__id__].placement);
				objects.remove(rotatedDescription);
				resultHiddenObjectsConfig.push(objects.h[tmpDescription.__id__]);
			}
		}
		result.hiddenObjectsParams = resultHiddenObjectsConfig;
		result.count = totalCount;
		return result;
	}
	,parseStars: function(parsed,resultConfig) {
		if(parsed.starlevel != null) {
			resultConfig.scoreTargets = parsed.starlevel;
		} else if(parsed.scoreTargets != null) {
			resultConfig.scoreTargets = parsed.scoreTargets;
		}
	}
	,cloneCellDefTo: function(def,copyDef) {
		var _g = 0;
		var _g1 = Reflect.fields(def);
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			var tmp;
			if(Object.prototype.hasOwnProperty.call(copyDef,param)) {
				var tmp1 = ((function($this) {
					var $r;
					var tmp21;
					$r = copyDef == null?null:copyDef.__properties__ && (tmp21 = copyDef.__properties__["get_" + param])?copyDef[tmp21]():copyDef[param];
					return $r;
				}(this)) instanceof Array);
				if(tmp1) {
					var tmp21;
					var tmp3;
					if(copyDef == null) {
						tmp3 = null;
					} else {
						var tmp4;
						if(copyDef.__properties__) {
							tmp21 = copyDef.__properties__["get_" + param];
							tmp4 = tmp21;
						} else {
							tmp4 = false;
						}
						if(tmp4) {
							tmp3 = copyDef[tmp21]();
						} else {
							tmp3 = copyDef[param];
						}
					}
					tmp = tmp3.__enum__ == null;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var tmp5;
				var tmp6;
				if(copyDef == null) {
					tmp6 = null;
				} else {
					var tmp7;
					if(copyDef.__properties__) {
						tmp5 = copyDef.__properties__["get_" + param];
						tmp7 = tmp5;
					} else {
						tmp7 = false;
					}
					if(tmp7) {
						tmp6 = copyDef[tmp5]();
					} else {
						tmp6 = copyDef[param];
					}
				}
				var tmp8 = js_Boot.__cast(tmp6 , Array);
				var tmp9;
				var tmp10;
				if(def == null) {
					tmp10 = null;
				} else {
					var tmp11;
					if(def.__properties__) {
						tmp9 = def.__properties__["get_" + param];
						tmp11 = tmp9;
					} else {
						tmp11 = false;
					}
					if(tmp11) {
						tmp10 = def[tmp9]();
					} else {
						tmp10 = def[param];
					}
				}
				tmp8.concat(tmp10);
			} else {
				var tmp12;
				var tmp13 = ((function($this) {
					var $r;
					var tmp141;
					$r = def == null?null:def.__properties__ && (tmp141 = def.__properties__["get_" + param])?def[tmp141]():def[param];
					return $r;
				}(this)) instanceof Array);
				if(tmp13) {
					var tmp141;
					var tmp15;
					if(def == null) {
						tmp15 = null;
					} else {
						var tmp16;
						if(def.__properties__) {
							tmp141 = def.__properties__["get_" + param];
							tmp16 = tmp141;
						} else {
							tmp16 = false;
						}
						if(tmp16) {
							tmp15 = def[tmp141]();
						} else {
							tmp15 = def[param];
						}
					}
					tmp12 = tmp15.__enum__ == null;
				} else {
					tmp12 = false;
				}
				if(tmp12) {
					var tmp17;
					var tmp18;
					if(def == null) {
						tmp18 = null;
					} else {
						var tmp19;
						if(def.__properties__) {
							tmp17 = def.__properties__["get_" + param];
							tmp19 = tmp17;
						} else {
							tmp19 = false;
						}
						if(tmp19) {
							tmp18 = def[tmp17]();
						} else {
							tmp18 = def[param];
						}
					}
					var defArray = js_Boot.__cast(tmp18 , Array);
					var tmp20;
					var tmp22;
					if(def == null) {
						tmp22 = null;
					} else {
						var tmp23;
						if(def.__properties__) {
							tmp20 = def.__properties__["get_" + param];
							tmp23 = tmp20;
						} else {
							tmp23 = false;
						}
						if(tmp23) {
							tmp22 = def[tmp20]();
						} else {
							tmp22 = def[param];
						}
					}
					var o = tmp22;
					var value = Type.createInstance(o == null?null:js_Boot.getClass(o),[]);
					var tmp24;
					var tmp25;
					if(copyDef.__properties__) {
						tmp24 = copyDef.__properties__["set_" + param];
						tmp25 = tmp24;
					} else {
						tmp25 = false;
					}
					if(tmp25) {
						copyDef[tmp24](value);
					} else {
						copyDef[param] = value;
					}
					var _g2 = 0;
					while(_g2 < defArray.length) {
						var element = defArray[_g2];
						++_g2;
						var newElement = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
						this.cloneCellDefTo(element,newElement);
						var tmp26;
						var tmp27;
						if(copyDef == null) {
							tmp27 = null;
						} else {
							var tmp28;
							if(copyDef.__properties__) {
								tmp26 = copyDef.__properties__["get_" + param];
								tmp28 = tmp26;
							} else {
								tmp28 = false;
							}
							if(tmp28) {
								tmp27 = copyDef[tmp26]();
							} else {
								tmp27 = copyDef[param];
							}
						}
						tmp27.push(newElement);
					}
				} else {
					var tmp29;
					var tmp30 = typeof((function($this) {
						var $r;
						var tmp31;
						$r = def == null?null:def.__properties__ && (tmp31 = def.__properties__["get_" + param])?def[tmp31]():def[param];
						return $r;
					}(this)));
					if(tmp30 != "string") {
						var tmp32;
						var tmp33;
						if(def == null) {
							tmp33 = null;
						} else {
							var tmp34;
							if(def.__properties__) {
								tmp32 = def.__properties__["get_" + param];
								tmp34 = tmp32;
							} else {
								tmp34 = false;
							}
							if(tmp34) {
								tmp33 = def[tmp32]();
							} else {
								tmp33 = def[param];
							}
						}
						tmp29 = Reflect.fields(tmp33).length > 0;
					} else {
						tmp29 = false;
					}
					if(tmp29) {
						copyDef[param] = com_sq_m3lib_levelParser_LevelParser.createTypedDef();
						var tmp35;
						var tmp36;
						if(def == null) {
							tmp36 = null;
						} else {
							var tmp37;
							if(def.__properties__) {
								tmp35 = def.__properties__["get_" + param];
								tmp37 = tmp35;
							} else {
								tmp37 = false;
							}
							if(tmp37) {
								tmp36 = def[tmp35]();
							} else {
								tmp36 = def[param];
							}
						}
						var tmp38 = tmp36;
						var tmp39;
						var tmp40;
						if(copyDef == null) {
							tmp40 = null;
						} else {
							var tmp41;
							if(copyDef.__properties__) {
								tmp39 = copyDef.__properties__["get_" + param];
								tmp41 = tmp39;
							} else {
								tmp41 = false;
							}
							if(tmp41) {
								tmp40 = copyDef[tmp39]();
							} else {
								tmp40 = copyDef[param];
							}
						}
						this.cloneCellDefTo(tmp38,tmp40);
					} else {
						var tmp42;
						var tmp43;
						if(def == null) {
							tmp43 = null;
						} else {
							var tmp44;
							if(def.__properties__) {
								tmp42 = def.__properties__["get_" + param];
								tmp44 = tmp42;
							} else {
								tmp44 = false;
							}
							if(tmp44) {
								tmp43 = def[tmp42]();
							} else {
								tmp43 = def[param];
							}
						}
						copyDef[param] = tmp43;
					}
				}
			}
		}
	}
	,__class__: com_sq_m3lib_levelParser_LevelParser
};
var com_sq_m3lib_levelParser_LevelParserConfig = function() {
};
$hxClasses["com.sq.m3lib.levelParser.LevelParserConfig"] = com_sq_m3lib_levelParser_LevelParserConfig;
com_sq_m3lib_levelParser_LevelParserConfig.__name__ = true;
com_sq_m3lib_levelParser_LevelParserConfig.prototype = {
	__class__: com_sq_m3lib_levelParser_LevelParserConfig
};
var com_sq_m3lib_log_CoreEventLogger = function() { };
$hxClasses["com.sq.m3lib.log.CoreEventLogger"] = com_sq_m3lib_log_CoreEventLogger;
com_sq_m3lib_log_CoreEventLogger.__name__ = true;
com_sq_m3lib_log_CoreEventLogger.init = function(gameEngine) {
	com_sq_m3lib_log_CoreEventLogger.free();
	com_sq_m3lib_log_CoreEventLogger._events = [];
	com_sq_m3lib_log_CoreEventLogger._callbacks = new haxe_ds_StringMap();
	com_sq_m3lib_log_CoreEventLogger._gameEngine = gameEngine;
	com_sq_m3lib_log_CoreEventLogger.addListeners();
};
com_sq_m3lib_log_CoreEventLogger.log = function(event) {
	com_sq_m3lib_log_CoreEventLogger._events.push(event);
	com_sq_m3lib_events_CoreEventDispatcher.getInstance().dispatchEvent(new com_sq_m3lib_events_CoreEvent("EventAdded"));
};
com_sq_m3lib_log_CoreEventLogger.setKarma = function(val) {
	com_sq_m3lib_log_CoreEventLogger.karma = val;
};
com_sq_m3lib_log_CoreEventLogger.getKarma = function() {
	return com_sq_m3lib_log_CoreEventLogger.karma;
};
com_sq_m3lib_log_CoreEventLogger.getFullLog = function() {
	var eventsLength = com_sq_m3lib_log_CoreEventLogger._events.length;
	var shortEvents = [];
	var index = 0;
	while(index < eventsLength) {
		shortEvents.push(com_sq_m3lib_log_CoreEventLogger._events[index].toJsonLoggerEvent());
		++index;
	}
	var result = { karma : com_sq_m3lib_log_CoreEventLogger.karma, levelConfig : com_sq_m3lib_log_CoreEventLogger._gameEngine.getLevelConfig().toJsonConfig(), coreConfig : com_sq_m3lib_coreSettings_CoreSettings.toJson(), events : shortEvents};
	return JSON.stringify(result);
};
com_sq_m3lib_log_CoreEventLogger.getFullEvents = function() {
	return com_sq_m3lib_log_CoreEventLogger._events;
};
com_sq_m3lib_log_CoreEventLogger.setFullEvents = function(events) {
	com_sq_m3lib_log_CoreEventLogger._events = events.slice();
};
com_sq_m3lib_log_CoreEventLogger.onDestroy = function(event) {
	var e = js_Boot.__cast(event , com_sq_m3lib_events_CoreItemDestroyEvent);
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.itemDestroy(e.getItem(),e.getItem().destroyInfo.cell));
};
com_sq_m3lib_log_CoreEventLogger.onAddScore = function(event) {
	var e = js_Boot.__cast(event , com_sq_m3lib_events_CoreAddScoreEvent);
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.score(e.getScore(),e.getCause()));
};
com_sq_m3lib_log_CoreEventLogger.onViewPointChanged = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.viewPointChanged((js_Boot.__cast(event , com_sq_m3lib_events_CoreViewPointUpdateEvent)).getViewPoint()));
};
com_sq_m3lib_log_CoreEventLogger.onLevelWin = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.finish(true,com_sq_m3lib_log_CoreEventLogger._gameEngine.targetsManager.getMovesDone(),com_sq_m3lib_log_CoreEventLogger._gameEngine.targetsManager.getTotalScore(),com_sq_m3lib_core_Mersenne.getInstance().randomInt()));
};
com_sq_m3lib_log_CoreEventLogger.onLevelLost = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.finish(false,com_sq_m3lib_log_CoreEventLogger._gameEngine.targetsManager.getMovesDone(),com_sq_m3lib_log_CoreEventLogger._gameEngine.targetsManager.getTotalScore(),com_sq_m3lib_core_Mersenne.getInstance().randomInt()));
};
com_sq_m3lib_log_CoreEventLogger.onBlockerDestroyed = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.blockerDestroy((js_Boot.__cast(event , com_sq_m3lib_events_CoreBlockerEvent)).getBlocker()));
};
com_sq_m3lib_log_CoreEventLogger.onBlockerSpawned = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.blockerSpawned((js_Boot.__cast(event , com_sq_m3lib_events_CoreBlockerEvent)).getBlocker()));
};
com_sq_m3lib_log_CoreEventLogger.onCellCaptured = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.cellCaptured((js_Boot.__cast(event , com_sq_m3lib_events_CoreCaptureCellEvent)).getCell()));
};
com_sq_m3lib_log_CoreEventLogger.onCoverDestroyed = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.coverDestroyed((js_Boot.__cast(event , com_sq_m3lib_events_CoreHiddenObjectEvent)).getCell()));
};
com_sq_m3lib_log_CoreEventLogger.onHiddenOjbectFound = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.hiddenObjectFound((js_Boot.__cast(event , com_sq_m3lib_events_CoreHiddenObjectEvent)).getObject()));
};
com_sq_m3lib_log_CoreEventLogger.onTargetProgress = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.targetProgress((js_Boot.__cast(event , com_sq_m3lib_events_CoreTargetUpdateEvent)).getTarget()));
};
com_sq_m3lib_log_CoreEventLogger.onTargetComplete = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.targetFinished((js_Boot.__cast(event , com_sq_m3lib_events_CoreTargetUpdateEvent)).getTarget()));
};
com_sq_m3lib_log_CoreEventLogger.onGravityChanged = function(event) {
	var cells = (js_Boot.__cast(event , com_sq_m3lib_events_CoreCellGravityUpdateEvent)).getCells();
	var i = cells.length;
	while(--i >= 0) com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.gravityChanged(cells[i]));
};
com_sq_m3lib_log_CoreEventLogger.onBoosterActivated = function(event) {
	var e = js_Boot.__cast(event , com_sq_m3lib_events_CoreBoosterEvent);
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.boostActivated(e.getBooster(),e.getApplyParams()));
};
com_sq_m3lib_log_CoreEventLogger.onCheatActivated = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.cheatActivated(event.getParams().type,event.getParams().count));
};
com_sq_m3lib_log_CoreEventLogger.onLevelFinishScenarioStarted = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.simple("LevelFinishScenarioActivated"));
};
com_sq_m3lib_log_CoreEventLogger.onLevelFinishScenarioComplete = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.simple("LevelFinishScenarioComplete"));
};
com_sq_m3lib_log_CoreEventLogger.onStable = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.simple("stable"));
};
com_sq_m3lib_log_CoreEventLogger.onAddExtraMoves = function(event) {
	com_sq_m3lib_log_CoreEventLogger.log(com_sq_m3lib_log_events_LoggerEvent.addExtraMoves((js_Boot.__cast(event , com_sq_m3lib_events_CoreFailLevelBoostEvent)).count));
};
com_sq_m3lib_log_CoreEventLogger.addListeners = function() {
	var v = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("destroy_items",com_sq_m3lib_log_CoreEventLogger.onDestroy,-2147483645);
	var _this = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.destroy_items != null) {
		_this.setReserved("destroy_items",v);
	} else {
		_this.h["destroy_items"] = v;
	}
	var v1 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreAddScoreEvent.ADD_SCORE,com_sq_m3lib_log_CoreEventLogger.onAddScore,-2147483645);
	var _this1 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	var key = com_sq_m3lib_events_CoreAddScoreEvent.ADD_SCORE;
	if(__map_reserved[key] != null) {
		_this1.setReserved(key,v1);
	} else {
		_this1.h[key] = v1;
	}
	var v2 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("all_targets_completed",com_sq_m3lib_log_CoreEventLogger.onLevelWin,-2147483645);
	var _this2 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.all_targets_completed != null) {
		_this2.setReserved("all_targets_completed",v2);
	} else {
		_this2.h["all_targets_completed"] = v2;
	}
	var v3 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("target_failed",com_sq_m3lib_log_CoreEventLogger.onLevelLost,-2147483645);
	var _this3 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.target_failed != null) {
		_this3.setReserved("target_failed",v3);
	} else {
		_this3.h["target_failed"] = v3;
	}
	var v4 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED,com_sq_m3lib_log_CoreEventLogger.onViewPointChanged,-2147483645);
	var _this4 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	var key1 = com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED;
	if(__map_reserved[key1] != null) {
		_this4.setReserved(key1,v4);
	} else {
		_this4.h[key1] = v4;
	}
	var v5 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("destroy_blocker",com_sq_m3lib_log_CoreEventLogger.onBlockerDestroyed,-2147483645);
	var _this5 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.destroy_blocker != null) {
		_this5.setReserved("destroy_blocker",v5);
	} else {
		_this5.h["destroy_blocker"] = v5;
	}
	var v6 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("change_blocker_step",com_sq_m3lib_log_CoreEventLogger.onBlockerDestroyed,-2147483645);
	var _this6 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.change_blocker_step != null) {
		_this6.setReserved("change_blocker_step",v6);
	} else {
		_this6.h["change_blocker_step"] = v6;
	}
	var v7 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("spawn_blocker",com_sq_m3lib_log_CoreEventLogger.onBlockerSpawned,-2147483645);
	var _this7 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.spawn_blocker != null) {
		_this7.setReserved("spawn_blocker",v7);
	} else {
		_this7.h["spawn_blocker"] = v7;
	}
	var v8 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreCaptureCellEvent.CAPTURED,com_sq_m3lib_log_CoreEventLogger.onCellCaptured,-2147483645);
	var _this8 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	var key2 = com_sq_m3lib_events_CoreCaptureCellEvent.CAPTURED;
	if(__map_reserved[key2] != null) {
		_this8.setReserved(key2,v8);
	} else {
		_this8.h[key2] = v8;
	}
	var v9 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreHiddenObjectEvent.DESTROYED,com_sq_m3lib_log_CoreEventLogger.onCoverDestroyed,-2147483645);
	var _this9 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	var key3 = com_sq_m3lib_events_CoreHiddenObjectEvent.DESTROYED;
	if(__map_reserved[key3] != null) {
		_this9.setReserved(key3,v9);
	} else {
		_this9.h[key3] = v9;
	}
	var v10 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreHiddenObjectEvent.CHANGED,com_sq_m3lib_log_CoreEventLogger.onCoverDestroyed,-2147483645);
	var _this10 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	var key4 = com_sq_m3lib_events_CoreHiddenObjectEvent.CHANGED;
	if(__map_reserved[key4] != null) {
		_this10.setReserved(key4,v10);
	} else {
		_this10.h[key4] = v10;
	}
	var v11 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreHiddenObjectEvent.DISCOVERED,com_sq_m3lib_log_CoreEventLogger.onHiddenOjbectFound,-2147483645);
	var _this11 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	var key5 = com_sq_m3lib_events_CoreHiddenObjectEvent.DISCOVERED;
	if(__map_reserved[key5] != null) {
		_this11.setReserved(key5,v11);
	} else {
		_this11.h[key5] = v11;
	}
	var v12 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("one_target_updated",com_sq_m3lib_log_CoreEventLogger.onTargetProgress,-2147483645);
	var _this12 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.one_target_updated != null) {
		_this12.setReserved("one_target_updated",v12);
	} else {
		_this12.h["one_target_updated"] = v12;
	}
	var v13 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("one_target_completed",com_sq_m3lib_log_CoreEventLogger.onTargetComplete,-2147483645);
	var _this13 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.one_target_completed != null) {
		_this13.setReserved("one_target_completed",v13);
	} else {
		_this13.h["one_target_completed"] = v13;
	}
	var v14 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreCellGravityUpdateEvent.CHANGE_CELL_MOVE_VECTOR,com_sq_m3lib_log_CoreEventLogger.onGravityChanged,-2147483645);
	var _this14 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	var key6 = com_sq_m3lib_events_CoreCellGravityUpdateEvent.CHANGE_CELL_MOVE_VECTOR;
	if(__map_reserved[key6] != null) {
		_this14.setReserved(key6,v14);
	} else {
		_this14.h[key6] = v14;
	}
	var v15 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("booster_activated",com_sq_m3lib_log_CoreEventLogger.onBoosterActivated,-2147483645);
	var _this15 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.booster_activated != null) {
		_this15.setReserved("booster_activated",v15);
	} else {
		_this15.h["booster_activated"] = v15;
	}
	var v16 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("CheatActivated",com_sq_m3lib_log_CoreEventLogger.onCheatActivated,-2147483645);
	var _this16 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.CheatActivated != null) {
		_this16.setReserved("CheatActivated",v16);
	} else {
		_this16.h["CheatActivated"] = v16;
	}
	var v17 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("finish_level_boost_started",com_sq_m3lib_log_CoreEventLogger.onLevelFinishScenarioStarted,-2147483645);
	var _this17 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.finish_level_boost_started != null) {
		_this17.setReserved("finish_level_boost_started",v17);
	} else {
		_this17.h["finish_level_boost_started"] = v17;
	}
	var v18 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("finish_level_boost_complete",com_sq_m3lib_log_CoreEventLogger.onLevelFinishScenarioComplete,-2147483645);
	var _this18 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.finish_level_boost_complete != null) {
		_this18.setReserved("finish_level_boost_complete",v18);
	} else {
		_this18.h["finish_level_boost_complete"] = v18;
	}
	var v19 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback(com_sq_m3lib_events_CoreEventDispatcher.BOARD_STABLE,com_sq_m3lib_log_CoreEventLogger.onStable,-2147483645);
	var _this19 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	var key7 = com_sq_m3lib_events_CoreEventDispatcher.BOARD_STABLE;
	if(__map_reserved[key7] != null) {
		_this19.setReserved(key7,v19);
	} else {
		_this19.h[key7] = v19;
	}
	var v20 = com_sq_m3lib_events_CoreEventDispatcher.getInstance().addEventCallback("fail_level_add_moves",com_sq_m3lib_log_CoreEventLogger.onAddExtraMoves,-2147483645);
	var _this20 = com_sq_m3lib_log_CoreEventLogger._callbacks;
	if(__map_reserved.fail_level_add_moves != null) {
		_this20.setReserved("fail_level_add_moves",v20);
	} else {
		_this20.h["fail_level_add_moves"] = v20;
	}
};
com_sq_m3lib_log_CoreEventLogger.removeListeners = function() {
	if(com_sq_m3lib_log_CoreEventLogger._callbacks != null) {
		var tmp = com_sq_m3lib_log_CoreEventLogger._callbacks.keys();
		while(tmp.hasNext()) {
			var key = tmp.next();
			var tmp1 = com_sq_m3lib_events_CoreEventDispatcher.getInstance();
			var _this = com_sq_m3lib_log_CoreEventLogger._callbacks;
			tmp1.removeEventCallback(key,__map_reserved[key] != null?_this.getReserved(key):_this.h[key]);
		}
	}
};
com_sq_m3lib_log_CoreEventLogger.free = function() {
	com_sq_m3lib_log_CoreEventLogger.removeListeners();
	com_sq_m3lib_log_CoreEventLogger._callbacks = null;
	com_sq_m3lib_log_CoreEventLogger._events = null;
	com_sq_m3lib_log_CoreEventLogger._gameEngine = null;
};
var com_sq_m3lib_log_CoreLog = function() { };
$hxClasses["com.sq.m3lib.log.CoreLog"] = com_sq_m3lib_log_CoreLog;
com_sq_m3lib_log_CoreLog.__name__ = true;
com_sq_m3lib_log_CoreLog.subscribeLogUpdate = function(traceCallback) {
	if(com_sq_m3lib_log_CoreLog._callBackList == null) {
		com_sq_m3lib_log_CoreLog._callBackList = [];
	}
	com_sq_m3lib_log_CoreLog._callBackList.push(traceCallback);
};
com_sq_m3lib_log_CoreLog.unSubscribeLogUpdate = function(traceCallback) {
	if(com_sq_m3lib_log_CoreLog._callBackList == null) {
		return;
	}
	HxOverrides.remove(com_sq_m3lib_log_CoreLog._callBackList,traceCallback);
};
com_sq_m3lib_log_CoreLog.log = function(message) {
	com_sq_m3lib_log_CoreLog.fireLogUpdateEvent(message);
};
com_sq_m3lib_log_CoreLog.haxeTrace = function(value,pos) {
	var message = "" + pos.fileName + ":" + pos.lineNumber + ": " + Std.string(value);
	if(pos.customParams != null) {
		message += " " + pos.customParams.map(Std.string).join(" ");
	}
	com_sq_m3lib_log_CoreLog.log(message);
};
com_sq_m3lib_log_CoreLog.fireLogUpdateEvent = function(message) {
	if(com_sq_m3lib_log_CoreLog._callBackList == null) {
		console.log(message);
		return;
	}
	var _g1 = 0;
	var _g = com_sq_m3lib_log_CoreLog._callBackList.length;
	while(_g1 < _g) com_sq_m3lib_log_CoreLog._callBackList[_g1++](message);
};
var com_sq_m3lib_log_events_LoggerData = function() {
	this.count = null;
	this.score = null;
	this.randomInt = null;
	this.totalScore = null;
	this.movesDone = null;
	this.win = null;
};
$hxClasses["com.sq.m3lib.log.events.LoggerData"] = com_sq_m3lib_log_events_LoggerData;
com_sq_m3lib_log_events_LoggerData.__name__ = true;
com_sq_m3lib_log_events_LoggerData.prototype = {
	fromJson: function(json) {
		this.eventName = json.eventName;
		this.item = com_sq_m3lib_board_ItemFactoryDescription.fromJson(json.item);
		this.cell = json.cell;
		this.fromCell = json.fromCell;
		this.toCell = json.toCell;
		this.fromItem = com_sq_m3lib_board_ItemFactoryDescription.fromJson(json.fromItem);
		this.toItem = com_sq_m3lib_board_ItemFactoryDescription.fromJson(json.toItem);
		this.blocker = com_sq_m3lib_board_cellBlockers_BlockerFactoryDescription.fromJson(json.blocker);
		this.hidden = json.hidden;
		this.cellCover = json.cellCover;
		this.seed = json.seed;
		this.win = json.win;
		this.movesDone = json.movesDone;
		this.totalScore = json.totalScore;
		this.randomInt = json.randomInt;
		this.score = json.score;
		this.cause = json.cause;
		this.count = json.count;
		this.targetName = json.targetName;
		this.booster = json.booster;
	}
	,areEqual: function(data) {
		if(this.eventName == data.eventName && com_sq_m3lib_typedefs_TypedDefEqualityChecker.areStricktlyEqualItems(this.item,data.item) && (this.cell == data.cell || this.cell.x == data.cell.x && this.cell.y == data.cell.y) && (this.fromCell == data.fromCell || this.fromCell.x == data.fromCell.x && this.fromCell.y == data.fromCell.y) && (this.toCell == data.toCell || this.toCell.x == data.toCell.x && this.toCell.y == data.toCell.y) && com_sq_m3lib_typedefs_TypedDefEqualityChecker.areStricktlyEqualItems(this.fromItem,data.fromItem) && com_sq_m3lib_typedefs_TypedDefEqualityChecker.areStricktlyEqualItems(this.toItem,data.toItem) && com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualBlockers(this.blocker,data.blocker) && com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualHiddenObjects(this.hidden,data.hidden) && this.seed == data.seed && (this.win == null && !data.win || this.win == data.win) && this.movesDone == data.movesDone && (this.totalScore == data.totalScore || this.totalScore == 0 && data.totalScore == null) && this.randomInt == data.randomInt && (this.score == data.score || this.score == 0 && data.score == null) && this.cause == data.cause && (this.count == data.count || this.count == 0 && data.count == null) && this.targetName == data.targetName) {
			return this.booster == data.booster;
		} else {
			return false;
		}
	}
	,toJsonLoggerEvent: function() {
		var result = { };
		var fields = this.getFields();
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			var tmp;
			var tmp1;
			var tmp2;
			if(this.__properties__) {
				tmp = this.__properties__["get_" + field];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = this[tmp]();
			} else {
				tmp1 = this[field];
			}
			var value = tmp1;
			if(value == null) {
				continue;
			}
			if(typeof(value) == "number" && ((value | 0) === value) && js_Boot.__cast(value , Int) == 0) {
				continue;
			}
			result[field] = value;
		}
		return result;
	}
	,getFields: function() {
		return ["eventName","item","blocker","hidden","targetName","cell","cellCover","fromCell","toCell","fromItem","toItem","seed","win","movesDone","totalScore","randomInt","score","cause","count","booster"];
	}
	,__class__: com_sq_m3lib_log_events_LoggerData
};
var com_sq_m3lib_log_events_LoggerEvent = function() { };
$hxClasses["com.sq.m3lib.log.events.LoggerEvent"] = com_sq_m3lib_log_events_LoggerEvent;
com_sq_m3lib_log_events_LoggerEvent.__name__ = true;
com_sq_m3lib_log_events_LoggerEvent.simple = function(eventName) {
	var data = new com_sq_m3lib_log_events_LoggerData();
	data.eventName = eventName;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.levelStarted = function(seed) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("LevelStart");
	data.seed = seed == null?"null":"" + seed;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.switchCells = function(fromCell,toCell,possibleMovesCount) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("UserMove");
	data.fromCell = fromCell.coords.toViewPoint();
	data.fromItem = fromCell.item.getLogData();
	if(toCell != null && toCell.hasItemInCell()) {
		data.toItem = toCell.item.getLogData();
		data.toCell = toCell.coords.toViewPoint();
	}
	data.count = possibleMovesCount;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.scenarioActivated = function(scenario,item,cell) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("ExplosionPlanActivated");
	data.item = item.getLogData();
	data.cell = cell.coords.toViewPoint();
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.shuffle = function(count) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("Shuffle");
	data.count = count;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.spawn = function(item,cell,seed,index,spawnIdx) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("ItemSpawn");
	data.item = item.getLogData();
	data.cell = cell.coords.toViewPoint();
	data.seed = seed == null?"null":"" + seed;
	data.randomInt = index;
	data.score = spawnIdx;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.finish = function(win,movesDone,totalScore,randomInt) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("LevelFinished");
	data.win = win;
	data.movesDone = movesDone;
	data.totalScore = totalScore;
	data.randomInt = randomInt;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.itemDestroy = function(item,cell) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("ItemDestroy");
	data.item = item.getLogData();
	data.cell = cell.coords.toViewPoint();
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.score = function(score,cause) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("IncreaseScore");
	data.score = score;
	data.cause = cause;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.itemMove = function(item,cell,seed) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("ItemMove");
	data.item = item.getLogData();
	data.cell = cell.coords.toViewPoint();
	data.seed = seed == null?"null":"" + seed;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.viewPointChanged = function(coord) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("ViewPointChanged");
	data.cell = coord.toViewPoint();
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.blockerDestroy = function(blocker) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("BlockerDestroy");
	data.blocker = blocker.getLogData();
	data.cell = blocker.cell.coords.toViewPoint();
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.blockerSpawned = function(blocker) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("BlocketrSpawned");
	data.blocker = blocker.getLogData();
	data.cell = blocker.cell.coords.toViewPoint();
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.cellCaptured = function(cell) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("CellCaptured");
	data.cell = cell.coords.toViewPoint();
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.coverDestroyed = function(cell) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("CellCoverRemoved");
	data.cell = cell.coords.toViewPoint();
	data.cellCover = cell.cover.getCellCoverDescription();
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.hiddenObjectFound = function(hidden) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("HiddenObjectFound");
	data.hidden = hidden.getObject().description;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.targetProgress = function(target) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("TargetProgress");
	data.targetName = target.target.targetId;
	data.count = target.progress;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.targetFinished = function(target) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("TargetFinished");
	data.targetName = target.target.targetId;
	data.count = target.progress;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.gravityChanged = function(cell) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("CellGravityChanged");
	data.cell = cell.coords.toViewPoint();
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.boostActivated = function(boost,boosterParams) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("BoosterActivated");
	if(boosterParams.cell != null) {
		if(boosterParams.switchCell != null) {
			data.fromCell = boosterParams.cell.coords.toViewPoint();
			data.toCell = boosterParams.switchCell.coords.toViewPoint();
		} else {
			data.cell = boosterParams.cell.coords.toViewPoint();
		}
	}
	data.booster = boost.alias;
	data.item = com_sq_m3lib_board_ItemFactoryDescription.fromJson(boosterParams.itemDescription);
	data.count = boosterParams.count;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.cheatActivated = function(type,count) {
	if(count == null) {
		count = 0;
	}
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("CheatActivated");
	data.count = count;
	data.cause = Std.string(type);
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.addExtraMoves = function(val) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("LevelFailAddMoves");
	data.count = val;
	return data;
};
com_sq_m3lib_log_events_LoggerEvent.newComboItem = function(val) {
	var data = com_sq_m3lib_log_events_LoggerEvent.simple("NewComboItem");
	data.count = val;
	return data;
};
var com_sq_m3lib_math_CoreMathUtils = function() { };
$hxClasses["com.sq.m3lib.math.CoreMathUtils"] = com_sq_m3lib_math_CoreMathUtils;
com_sq_m3lib_math_CoreMathUtils.__name__ = true;
com_sq_m3lib_math_CoreMathUtils.abs = function(val) {
	if(val < 0) {
		return val * -1;
	}
	return val;
};
com_sq_m3lib_math_CoreMathUtils.maxInt = function(val1,val2) {
	if(val1 < val2) {
		return val2;
	}
	return val1;
};
com_sq_m3lib_math_CoreMathUtils.minInt = function(val1,val2) {
	if(val1 < val2) {
		return val1;
	}
	return val2;
};
com_sq_m3lib_math_CoreMathUtils.intToBool = function(val) {
	if(val != 0) {
		return val != null;
	} else {
		return false;
	}
};
com_sq_m3lib_math_CoreMathUtils.boolToInt = function(val) {
	if(!val) {
		return 0;
	}
	return 1;
};
var com_sq_m3lib_snapshots_SnappedBlocker = function() {
};
$hxClasses["com.sq.m3lib.snapshots.SnappedBlocker"] = com_sq_m3lib_snapshots_SnappedBlocker;
com_sq_m3lib_snapshots_SnappedBlocker.__name__ = true;
com_sq_m3lib_snapshots_SnappedBlocker.prototype = {
	__class__: com_sq_m3lib_snapshots_SnappedBlocker
};
var com_sq_m3lib_snapshots_SnappedCell = function() {
};
$hxClasses["com.sq.m3lib.snapshots.SnappedCell"] = com_sq_m3lib_snapshots_SnappedCell;
com_sq_m3lib_snapshots_SnappedCell.__name__ = true;
com_sq_m3lib_snapshots_SnappedCell.prototype = {
	__class__: com_sq_m3lib_snapshots_SnappedCell
};
var com_sq_m3lib_snapshots_SnappedDestroyInfo = function() {
};
$hxClasses["com.sq.m3lib.snapshots.SnappedDestroyInfo"] = com_sq_m3lib_snapshots_SnappedDestroyInfo;
com_sq_m3lib_snapshots_SnappedDestroyInfo.__name__ = true;
com_sq_m3lib_snapshots_SnappedDestroyInfo.prototype = {
	__class__: com_sq_m3lib_snapshots_SnappedDestroyInfo
};
var com_sq_m3lib_snapshots_SnappedHiddenObject = function() {
};
$hxClasses["com.sq.m3lib.snapshots.SnappedHiddenObject"] = com_sq_m3lib_snapshots_SnappedHiddenObject;
com_sq_m3lib_snapshots_SnappedHiddenObject.__name__ = true;
com_sq_m3lib_snapshots_SnappedHiddenObject.prototype = {
	__class__: com_sq_m3lib_snapshots_SnappedHiddenObject
};
var com_sq_m3lib_snapshots_SnappedItem = function() {
};
$hxClasses["com.sq.m3lib.snapshots.SnappedItem"] = com_sq_m3lib_snapshots_SnappedItem;
com_sq_m3lib_snapshots_SnappedItem.__name__ = true;
com_sq_m3lib_snapshots_SnappedItem.prototype = {
	__class__: com_sq_m3lib_snapshots_SnappedItem
};
var com_sq_m3lib_snapshots_SnappedLevelData = function() {
};
$hxClasses["com.sq.m3lib.snapshots.SnappedLevelData"] = com_sq_m3lib_snapshots_SnappedLevelData;
com_sq_m3lib_snapshots_SnappedLevelData.__name__ = true;
com_sq_m3lib_snapshots_SnappedLevelData.prototype = {
	__class__: com_sq_m3lib_snapshots_SnappedLevelData
};
var com_sq_m3lib_snapshots_SnappedMersenneTwist = function() {
};
$hxClasses["com.sq.m3lib.snapshots.SnappedMersenneTwist"] = com_sq_m3lib_snapshots_SnappedMersenneTwist;
com_sq_m3lib_snapshots_SnappedMersenneTwist.__name__ = true;
com_sq_m3lib_snapshots_SnappedMersenneTwist.prototype = {
	__class__: com_sq_m3lib_snapshots_SnappedMersenneTwist
};
var com_sq_m3lib_snapshots_SnappedSpawner = function() {
};
$hxClasses["com.sq.m3lib.snapshots.SnappedSpawner"] = com_sq_m3lib_snapshots_SnappedSpawner;
com_sq_m3lib_snapshots_SnappedSpawner.__name__ = true;
com_sq_m3lib_snapshots_SnappedSpawner.prototype = {
	deepCopyOfSpawned: function(arg) {
		var result = [];
		var _g = 0;
		while(_g < arg.length) {
			var desc = arg[_g];
			++_g;
			result.push({ className : desc.className, color : desc.color});
		}
		return result;
	}
	,__class__: com_sq_m3lib_snapshots_SnappedSpawner
};
var com_sq_m3lib_snapshots_SnappedSpecialSpawner = function() {
};
$hxClasses["com.sq.m3lib.snapshots.SnappedSpecialSpawner"] = com_sq_m3lib_snapshots_SnappedSpecialSpawner;
com_sq_m3lib_snapshots_SnappedSpecialSpawner.__name__ = true;
com_sq_m3lib_snapshots_SnappedSpecialSpawner.prototype = {
	__class__: com_sq_m3lib_snapshots_SnappedSpecialSpawner
};
var com_sq_m3lib_snapshots_SnappedTarget = function() {
};
$hxClasses["com.sq.m3lib.snapshots.SnappedTarget"] = com_sq_m3lib_snapshots_SnappedTarget;
com_sq_m3lib_snapshots_SnappedTarget.__name__ = true;
com_sq_m3lib_snapshots_SnappedTarget.prototype = {
	__class__: com_sq_m3lib_snapshots_SnappedTarget
};
var com_sq_m3lib_snapshots_SnapshotData = function() {
};
$hxClasses["com.sq.m3lib.snapshots.SnapshotData"] = com_sq_m3lib_snapshots_SnapshotData;
com_sq_m3lib_snapshots_SnapshotData.__name__ = true;
com_sq_m3lib_snapshots_SnapshotData.prototype = {
	__class__: com_sq_m3lib_snapshots_SnapshotData
};
var com_sq_m3lib_snapshots_SnapshotFactory = function() {
};
$hxClasses["com.sq.m3lib.snapshots.SnapshotFactory"] = com_sq_m3lib_snapshots_SnapshotFactory;
com_sq_m3lib_snapshots_SnapshotFactory.__name__ = true;
com_sq_m3lib_snapshots_SnapshotFactory.getInstance = function() {
	if(com_sq_m3lib_snapshots_SnapshotFactory._instance == null) {
		com_sq_m3lib_snapshots_SnapshotFactory._instance = new com_sq_m3lib_snapshots_SnapshotFactory();
	}
	return com_sq_m3lib_snapshots_SnapshotFactory._instance;
};
com_sq_m3lib_snapshots_SnapshotFactory.prototype = {
	make: function(gameEngine) {
		var snapped = new com_sq_m3lib_snapshots_SnapshotData();
		snapped.cells = this.snapCells(gameEngine.board.cells,gameEngine.board.size);
		snapped.blockers = this.snapBlockers(gameEngine.board.blockers);
		snapped.hiddenObjects = this.snapHiddenObjects(gameEngine.board.hiddenObjects);
		snapped.items = this.snapItems(gameEngine.board.items,gameEngine);
		snapped.targetsProgress = this.snapTargets(gameEngine.targetsManager.getTargets());
		snapped.specialSpawners = this.snappedSpecialSpawners(gameEngine.spawnFactory.specialSpawners);
		snapped.levelData = this.snapLevelData(gameEngine);
		snapped.replayLog = com_sq_m3lib_log_CoreEventLogger.getFullEvents().slice();
		snapped.comboCandidatesList = gameEngine.comboFactory.combinationCandidateList.slice();
		snapped.spawnersMap = this.makeSpawnersDictionary(gameEngine.spawnFactory.spawners);
		com_sq_m3lib_snapshots_SnapshotFactory.snappedState = snapped;
		return snapped;
	}
	,load: function(snapped,gameEngine) {
		gameEngine.board.setViewPoint(com_sq_m3lib_geometry_Coord.fromViewPoint(snapped.levelData.viewPoint));
		this.loadSnappedCells(snapped.cells,gameEngine);
		this.loadSnappedLevelData(snapped.levelData,gameEngine);
		this.loadSnappedItems(snapped.items,gameEngine);
		this.loadSnappedBlockers(snapped.blockers,gameEngine);
		this.loadSnappedHiddenObjects(snapped.hiddenObjects,gameEngine);
		this.loadSnappedTargets(snapped.targetsProgress,gameEngine);
		this.loadSpecialSpawners(snapped.specialSpawners,gameEngine);
		this.loadSpawners(snapped.spawnersMap,gameEngine);
		gameEngine.board.setViewPoint(new com_sq_m3lib_geometry_Coord(snapped.levelData.viewPoint.x,snapped.levelData.viewPoint.y),true);
		gameEngine.board.resetCellCheckParams();
		gameEngine.board.tryStabilize();
		this.loadSnappedComboCandidates(snapped.comboCandidatesList,gameEngine);
		com_sq_m3lib_log_CoreEventLogger.setFullEvents(snapped.replayLog);
	}
	,snapLevelData: function(gameEngine) {
		var result = new com_sq_m3lib_snapshots_SnappedLevelData();
		result.comboCount = gameEngine.scoreFactory.comboCount;
		result.homingBombCountConfig = gameEngine.destroyFactory.scenarioFactory.homingBombScenariosCount;
		result.viewPoint = gameEngine.board.viewPoint.toViewPoint();
		result.movesDone = gameEngine.targetsManager.getMovesDone();
		result.replayLogStep = com_sq_m3lib_log_CoreEventLogger.getFullEvents().length;
		result.gravityFillMapLength = gameEngine.gravityChangeFactory.fillCells != null?gameEngine.gravityChangeFactory.fillCells.length:0;
		result.viewPoints = gameEngine.board.viewPoints.toViewPoints();
		result.viewPointsCurrentIndex = gameEngine.board.viewPoints.getCurrentIndex();
		result.isFailed = gameEngine.targetsManager.shuffleFailed;
		result.comboItemsCount = gameEngine.itemsFactory.getComboItemsCount();
		result.mersenneTwist = new com_sq_m3lib_snapshots_SnappedMersenneTwist();
		result.mersenneTwist.index = com_sq_m3lib_core_Mersenne.getInstance().getIndex();
		result.mersenneTwist.matrix = com_sq_m3lib_core_Mersenne.getInstance().cloneMatrix();
		return result;
	}
	,snapCells: function(cells,size) {
		var result = [];
		var i = -1;
		var count = size.width;
		var cell;
		var snapped;
		var j = -1;
		var jCount = size.height;
		var resultCount = 0;
		while(++i < count) {
			j = -1;
			while(++j < jCount) {
				cell = cells[i][j];
				snapped = new com_sq_m3lib_snapshots_SnappedCell();
				snapped.attributes = cell.cloneAttributes();
				snapped.attributes.gravityChanged = com_sq_m3lib_math_CoreMathUtils.boolToInt(cell.hasGravityChanger);
				snapped.capture = cell.captured != null?cell.captured.getDescription():null;
				snapped.coord = cell.coords.toViewPoint();
				snapped.cover = cell.cover != null?cell.cover.getCellCoverDescription():null;
				snapped.moveDirection = cell.getPresetMoveDirection();
				snapped.sodaDirection = cell.getSodaDirection();
				result[resultCount] = snapped;
				++resultCount;
			}
		}
		return result;
	}
	,snapItems: function(items,gameEngine) {
		var result = [];
		var i = -1;
		var count = items.length;
		var item;
		var snapped;
		while(++i < count) {
			item = items[i];
			snapped = new com_sq_m3lib_snapshots_SnappedItem();
			snapped.description = item.getCurrentItemDescription();
			snapped.cell = item.cell.coords.toViewPoint();
			snapped.isActivated = item.inAction;
			snapped.isDestroyed = item.disabled;
			snapped.coords = item.position.toViewPoint();
			snapped.destroyInfo = this.snapDestroyInfo(item.destroyInfo);
			snapped.moveVector = item.currentMoveVector != null?item.currentMoveVector.toViewPoint():null;
			snapped.speed = item.speed;
			snapped.animationProgress = item.viewAnimationProgress;
			snapped.animationLength = item.viewAnimationEnd;
			result[i] = snapped;
		}
		return result;
	}
	,snapDestroyInfo: function(destroyInfo) {
		if(destroyInfo == null) {
			return null;
		}
		var result = new com_sq_m3lib_snapshots_SnappedDestroyInfo();
		result.cell = destroyInfo.cell.coords.toViewPoint();
		result.cause = destroyInfo.cause;
		result.starter = destroyInfo.starter.coords.toViewPoint();
		result.newItem = destroyInfo.newItem != null?destroyInfo.newItem.getCurrentItemDescription():null;
		var tmp;
		if(destroyInfo.scenario != null) {
			var o = destroyInfo.scenario;
			tmp = com_sq_m3lib_board_explosionScenarios_ScenarioDictionary.getByClass(o == null?null:js_Boot.getClass(o));
		} else {
			tmp = null;
		}
		result.scenario = tmp;
		var tmp1;
		if(destroyInfo.actualScenario != null) {
			var o1 = destroyInfo.actualScenario;
			tmp1 = com_sq_m3lib_board_explosionScenarios_ScenarioDictionary.getByClass(o1 == null?null:js_Boot.getClass(o1));
		} else {
			tmp1 = null;
		}
		result.actualScenario = tmp1;
		return result;
	}
	,snapBlockers: function(blockers) {
		var result = [];
		var i = -1;
		var count = blockers.length;
		var blocker;
		var snapped;
		while(++i < count) {
			blocker = blockers[i];
			snapped = new com_sq_m3lib_snapshots_SnappedBlocker();
			snapped.cell = blocker.cell.coords.toViewPoint();
			snapped.description = blocker.getBlockerDescription();
			snapped.priority = blocker.priority;
			snapped.step = blocker.step;
			result[i] = snapped;
		}
		return result;
	}
	,snapTargets: function(targets) {
		var result = [];
		var i = -1;
		var count = targets.length;
		var target;
		var snapped;
		while(++i < count) {
			target = targets[i];
			snapped = new com_sq_m3lib_snapshots_SnappedTarget();
			snapped.progress = target.progress;
			snapped.type = target.target.targetId;
			result[i] = snapped;
		}
		return result;
	}
	,snapHiddenObjects: function(objects) {
		var result = [];
		var i = -1;
		var count = objects.length;
		var hidden;
		var snapped;
		var j;
		var cellsCount;
		var cells;
		var cellCoords;
		while(++i < count) {
			cellCoords = [];
			hidden = objects[i];
			snapped = new com_sq_m3lib_snapshots_SnappedHiddenObject();
			snapped.description = hidden.getObject().description;
			snapped.placement = hidden.getPlacementCoords();
			j = -1;
			cells = hidden.getCells();
			cellsCount = cells.length;
			while(++j < cellsCount) cellCoords[j] = cells[j].coords.toViewPoint();
			snapped.cells = cellCoords;
			result[i] = snapped;
		}
		return result;
	}
	,snappedSpecialSpawners: function(specialSpawners) {
		var result = [];
		var i = -1;
		var count = specialSpawners.length;
		var snapped;
		var spawner;
		while(++i < count) {
			spawner = specialSpawners[i];
			snapped = new com_sq_m3lib_snapshots_SnappedSpecialSpawner();
			snapped.currentDelta = spawner.currentDelta;
			snapped.isDisabled = spawner.isDisabled;
			snapped.isMuted = spawner.isMuted;
			snapped.queuedCount = spawner.queuedCount;
			snapped.forcedSpawnCount = spawner.forcedSpawnCount;
			result[i] = snapped;
		}
		return result;
	}
	,makeSpawnersDictionary: function(spawners) {
		var result = new haxe_ds_ObjectMap();
		var i = -1;
		var count = spawners.length;
		var snapped;
		var spawner;
		while(++i < count) {
			spawner = spawners[i];
			snapped = new com_sq_m3lib_snapshots_SnappedSpawner();
			snapped.spawned = snapped.deepCopyOfSpawned(spawner.spawned);
			snapped.spawnedCount = spawner.spawnedCount;
			result.set(spawner,snapped);
		}
		return result;
	}
	,loadSnappedLevelData: function(snapped,gameEngine) {
		gameEngine.scoreFactory.comboCount = snapped.comboCount;
		gameEngine.destroyFactory.scenarioFactory.homingBombScenariosCount = snapped.homingBombCountConfig;
		if(gameEngine.targetsManager.areTargetsFailed() || gameEngine.targetsManager.areTargetsComplete()) {
			gameEngine.targetsManager.addListeners();
		}
		gameEngine.targetsManager.failedCount = 0;
		gameEngine.targetsManager.shuffleFailed = false;
		if(snapped.isFailed) {
			gameEngine.targetsManager.onShuffleFailed();
		}
		gameEngine.targetsManager.setMovesDone(snapped.movesDone);
		if(gameEngine.gravityChangeFactory.inited) {
			gameEngine.gravityChangeFactory.fillMap();
			var i = (gameEngine.gravityChangeFactory.fillCells != null?gameEngine.gravityChangeFactory.fillCells.length:0) - snapped.gravityFillMapLength;
			while(--i >= 0) gameEngine.gravityChangeFactory.fillCells.pop();
		}
		gameEngine.board.viewPoints = new com_sq_m3lib_board_ViewPointsData(snapped.viewPoints);
		gameEngine.board.viewPoints.setCurrentIndex(snapped.viewPointsCurrentIndex);
		gameEngine.itemsFactory.setComboItemsCount(snapped.comboItemsCount);
		com_sq_m3lib_core_Mersenne.getInstance().setMatrix(snapped.mersenneTwist.matrix.slice(),snapped.mersenneTwist.index);
	}
	,loadSnappedCells: function(snapped,gameEngine) {
		var cells = [];
		var nonVoidCells = [];
		var covers = [];
		var count = snapped.length;
		var i = -1;
		var snappedCell;
		var cell;
		var cover;
		var cellX;
		var cellY;
		while(++i < count) {
			snappedCell = snapped[i];
			cell = new com_sq_m3lib_board_Cell();
			cell.loadAttributes(snappedCell.attributes);
			cell.setMoveDirection(snappedCell.moveDirection);
			cell.setSodaMoveDirection(snappedCell.sodaDirection);
			cellX = snappedCell.coord.x;
			cellY = snappedCell.coord.y;
			if(cells[cellX] == null) {
				cells[cellX] = [];
			}
			cells[cellX][cellY] = cell;
			cell.setCoords(new com_sq_m3lib_geometry_Coord(cellX,cellY));
			if(!cell.isVoid) {
				nonVoidCells.push(cell);
			}
			if(snappedCell.cover != null) {
				cover = new com_sq_m3lib_board_cellHiddenObjects_CellCover(snappedCell.cover,cell);
				cell.setCellCover(cover);
				covers.push(cover);
			}
			if(snappedCell.capture != null) {
				cell.captured = new com_sq_m3lib_board_CellCaptureParams(snappedCell.capture.type);
			}
		}
		gameEngine.board.cells = cells;
		gameEngine.board.nonVoidCells = nonVoidCells;
		gameEngine.board.boardUtils.prepareNeighbours(nonVoidCells);
		gameEngine.board.covers = covers;
		gameEngine.board.getMoveFactory().organizeCellDirection(cells);
		gameEngine.board.getMoveFactory().readTeleports(gameEngine.getLevelConfig().teleports);
		var spawner;
		i = gameEngine.spawnFactory.spawners.length;
		while(--i >= 0) {
			spawner = gameEngine.spawnFactory.spawners[i];
			cell = cells[spawner.coord.x][spawner.coord.y];
			if(cell != null) {
				cell.spawner = spawner;
			}
		}
	}
	,loadSnappedItems: function(snapped,gameEngine) {
		var items = [];
		var count = snapped.length;
		var i = -1;
		var item;
		var snappedItem;
		var destroyInfo;
		var itemCell;
		while(++i < count) {
			snappedItem = snapped[i];
			item = gameEngine.itemsFactory.getItem(snappedItem.description,new com_sq_m3lib_geometry_Coord(snappedItem.coords.x,snappedItem.coords.y),false);
			item.speed = snappedItem.speed;
			if(snappedItem.moveVector != null) {
				item.currentMoveVector = new com_sq_m3lib_geometry_CellVector(snappedItem.moveVector.x,snappedItem.moveVector.y);
			}
			item.setAnimationLength(snappedItem.animationLength);
			item.viewAnimationProgress = snappedItem.animationProgress;
			itemCell = gameEngine.board.getCellByCoords(snappedItem.cell.x,snappedItem.cell.y,true);
			itemCell.setItem(item);
			destroyInfo = snappedItem.destroyInfo;
			if(destroyInfo != null) {
				var itemDestroyInfo = new com_sq_m3lib_board_DestroyInfo();
				if(destroyInfo.newItem != null) {
					itemDestroyInfo.newItem = gameEngine.itemsFactory.getItem(destroyInfo.newItem,new com_sq_m3lib_geometry_Coord(snappedItem.coords.x,snappedItem.coords.y));
				}
				itemDestroyInfo.cause = destroyInfo.cause;
				itemDestroyInfo.cell = gameEngine.board.getCellByCoords(destroyInfo.cell.x,destroyInfo.cell.y,true);
				itemDestroyInfo.starter = gameEngine.board.getCellByCoords(destroyInfo.starter.x,destroyInfo.starter.y,true);
				if(destroyInfo.scenario != null) {
					itemDestroyInfo.scenario = Type.createEmptyInstance(com_sq_m3lib_board_explosionScenarios_ScenarioDictionary.getByAlias(destroyInfo.scenario));
				}
				if(destroyInfo.actualScenario != null) {
					itemDestroyInfo.actualScenario = Type.createEmptyInstance(com_sq_m3lib_board_explosionScenarios_ScenarioDictionary.getByAlias(destroyInfo.actualScenario));
				}
				if(snappedItem.isDestroyed) {
					item.setDestroy(itemDestroyInfo,itemDestroyInfo.newItem != null);
				} else if(snappedItem.isActivated) {
					item.setInAction(itemDestroyInfo.cell,itemDestroyInfo.cause,itemDestroyInfo.starter,itemDestroyInfo.actualScenario,itemDestroyInfo.newItem);
				}
			}
			items.push(item);
		}
		gameEngine.board.items = items;
	}
	,loadSnappedBlockers: function(snapped,gameEngine) {
		var blockers = [];
		var count = snapped.length;
		var i = -1;
		var snappedBlocker;
		var cell;
		var blocker;
		while(++i < count) {
			snappedBlocker = snapped[i];
			cell = gameEngine.board.getCellByCoords(snappedBlocker.cell.x,snappedBlocker.cell.y,true);
			blocker = gameEngine.blockersFactory.getBlocker(snappedBlocker.description,cell);
			blocker.priority = snappedBlocker.priority;
			blocker.step = snappedBlocker.step;
			cell.addBlocker(blocker,cell.item.getItemAlias() == com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER);
			blockers[i] = blocker;
		}
		gameEngine.board.blockers = blockers;
	}
	,loadSnappedHiddenObjects: function(snapped,gameEngine) {
		var objects = [];
		var count = snapped.length;
		var i = -1;
		var snappedObject;
		var baseObject;
		var cells;
		var j;
		var jCount;
		var cellViewPoint;
		while(++i < count) {
			cells = [];
			snappedObject = snapped[i];
			baseObject = Type.createInstance(com_sq_m3lib_board_HiddenObjectsFactoryDictionary.getByAlias(snappedObject.description.classname),[snappedObject.description]);
			jCount = snappedObject.cells.length;
			j = -1;
			while(++j < jCount) {
				cellViewPoint = snappedObject.cells[j];
				cells[j] = gameEngine.board.getCellByCoords(cellViewPoint.x,cellViewPoint.y,true);
			}
			objects[i] = new com_sq_m3lib_board_cellHiddenObjects_BoardHiddenObject(baseObject,cells,snappedObject.placement);
		}
		gameEngine.board.hiddenObjects = objects;
		gameEngine.hiddenObjectsManager.fillHiddenCellsArray();
	}
	,loadSnappedTargets: function(snapped,gameEngine) {
		var count;
		var i = -1;
		var snappedTarget;
		var gameTargetProgress;
		gameEngine.targetsManager.completedCount = 0;
		count = snapped.length;
		while(++i < count) {
			snappedTarget = snapped[i];
			gameTargetProgress = gameEngine.targetsManager.getTargetById(snappedTarget.type);
			gameTargetProgress.reinit();
			gameTargetProgress.setProgeress(snappedTarget.progress);
		}
	}
	,loadSpecialSpawners: function(snappedSpawners,gameEngine) {
		var count = snappedSpawners.length;
		var i = -1;
		var snapped;
		var spawner;
		var spawners = gameEngine.spawnFactory.specialSpawners;
		while(++i < count) {
			snapped = snappedSpawners[i];
			spawner = spawners[i];
			spawner.queuedCount = snapped.queuedCount;
			spawner.isMuted = snapped.isMuted;
			spawner.isDisabled = snapped.isDisabled;
			spawner.currentDelta = snapped.currentDelta;
			spawner.forcedSpawnCount = snapped.forcedSpawnCount;
		}
	}
	,loadSpawners: function(snappedSpawners,gameEngine) {
		var snapped;
		var spawners = gameEngine.spawnFactory.spawners;
		var _g = 0;
		while(_g < spawners.length) {
			var spawner = spawners[_g];
			++_g;
			snapped = snappedSpawners.h[spawner.__id__];
			spawner.spawned = snapped.spawned;
			spawner.spawnedCount = snapped.spawnedCount;
		}
	}
	,loadSnappedComboCandidates: function(snappedCandidates,gameEngine) {
		gameEngine.comboFactory.fillNeighboursColors(gameEngine.board.getNonVoidCells(false),new com_sq_m3lib_board_combinations_CombinationFinderParams());
		var count = snappedCandidates.length;
		var result = [];
		var resultDictionary = new haxe_ds_ObjectMap();
		var board = gameEngine.board;
		var snappedCandidate;
		var snappedCellCoord;
		var snappedSwitchCellCoord;
		var cell;
		var switchCell;
		var i = -1;
		while(++i < count) {
			snappedCandidate = snappedCandidates[i];
			snappedCellCoord = snappedCandidate.cell.coords;
			snappedSwitchCellCoord = snappedCandidate.switchCell.coords;
			cell = board.getCellByCoords(snappedCellCoord.x,snappedCellCoord.y,true);
			switchCell = board.getCellByCoords(snappedSwitchCellCoord.x,snappedSwitchCellCoord.y,true);
			result[i] = new com_sq_m3lib_board_combinations_CombinationCandidate(cell,switchCell,snappedCandidate.combination);
			if(resultDictionary.h[cell.__id__] == null) {
				resultDictionary.set(cell,new haxe_ds_ObjectMap());
			}
			resultDictionary.h[cell.__id__].set(switchCell,result[i]);
		}
		gameEngine.comboFactory.combinationCandidateList = result;
		gameEngine.comboFactory.allCombinationCandidates = resultDictionary;
	}
	,__class__: com_sq_m3lib_snapshots_SnapshotFactory
};
var com_sq_m3lib_tests_DataTime = function() { };
$hxClasses["com.sq.m3lib.tests.DataTime"] = com_sq_m3lib_tests_DataTime;
com_sq_m3lib_tests_DataTime.__name__ = true;
com_sq_m3lib_tests_DataTime.getTime = function() {
	return new Date().getTime();
};
var com_sq_m3lib_typedefs_BlockerDefs = function() { };
$hxClasses["com.sq.m3lib.typedefs.BlockerDefs"] = com_sq_m3lib_typedefs_BlockerDefs;
com_sq_m3lib_typedefs_BlockerDefs.__name__ = true;
var com_sq_m3lib_typedefs_BoardDefs = function() { };
$hxClasses["com.sq.m3lib.typedefs.BoardDefs"] = com_sq_m3lib_typedefs_BoardDefs;
com_sq_m3lib_typedefs_BoardDefs.__name__ = true;
var com_sq_m3lib_typedefs_CellDefs = function() { };
$hxClasses["com.sq.m3lib.typedefs.CellDefs"] = com_sq_m3lib_typedefs_CellDefs;
com_sq_m3lib_typedefs_CellDefs.__name__ = true;
var com_sq_m3lib_typedefs_ComboDefs = function() { };
$hxClasses["com.sq.m3lib.typedefs.ComboDefs"] = com_sq_m3lib_typedefs_ComboDefs;
com_sq_m3lib_typedefs_ComboDefs.__name__ = true;
var com_sq_m3lib_typedefs_GameDefs = function() { };
$hxClasses["com.sq.m3lib.typedefs.GameDefs"] = com_sq_m3lib_typedefs_GameDefs;
com_sq_m3lib_typedefs_GameDefs.__name__ = true;
var com_sq_m3lib_typedefs_ItemDefs = function() { };
$hxClasses["com.sq.m3lib.typedefs.ItemDefs"] = com_sq_m3lib_typedefs_ItemDefs;
com_sq_m3lib_typedefs_ItemDefs.__name__ = true;
var com_sq_m3lib_typedefs_JsonLoggerDefs = function() { };
$hxClasses["com.sq.m3lib.typedefs.JsonLoggerDefs"] = com_sq_m3lib_typedefs_JsonLoggerDefs;
com_sq_m3lib_typedefs_JsonLoggerDefs.__name__ = true;
var com_sq_m3lib_typedefs_LevelConfigDefs = function() { };
$hxClasses["com.sq.m3lib.typedefs.LevelConfigDefs"] = com_sq_m3lib_typedefs_LevelConfigDefs;
com_sq_m3lib_typedefs_LevelConfigDefs.__name__ = true;
var com_sq_m3lib_typedefs_SpawnDefs = function() { };
$hxClasses["com.sq.m3lib.typedefs.SpawnDefs"] = com_sq_m3lib_typedefs_SpawnDefs;
com_sq_m3lib_typedefs_SpawnDefs.__name__ = true;
var com_sq_m3lib_typedefs_TargetsDefs = function() { };
$hxClasses["com.sq.m3lib.typedefs.TargetsDefs"] = com_sq_m3lib_typedefs_TargetsDefs;
com_sq_m3lib_typedefs_TargetsDefs.__name__ = true;
var com_sq_m3lib_typedefs_TypedDefEqualityChecker = function() {
};
$hxClasses["com.sq.m3lib.typedefs.TypedDefEqualityChecker"] = com_sq_m3lib_typedefs_TypedDefEqualityChecker;
com_sq_m3lib_typedefs_TypedDefEqualityChecker.__name__ = true;
com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualItems = function(description1,description2) {
	if(description1 == description2) {
		return true;
	}
	if(description1.className != description2.className) {
		return false;
	}
	if(description1.color != description2.color && description1.color != -1 && description2.color != -1) {
		return false;
	}
	return true;
};
com_sq_m3lib_typedefs_TypedDefEqualityChecker.areStricktlyEqualItems = function(val1,val2) {
	if(val1 != val2) {
		if(val1.className == val2.className) {
			return val1.color == val2.color;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualHiddenObjects = function(hidden1,hidden2) {
	if(hidden1 == hidden2) {
		return true;
	}
	if(hidden1.classname != hidden2.classname) {
		return false;
	}
	if(hidden1.size != hidden2.size) {
		if(hidden1.size.x != hidden2.size.x || hidden1.size.y != hidden2.size.y) {
			return false;
		}
	}
	if(hidden1.points == null && hidden2.points != null || hidden1.points != null && hidden2.points == null) {
		return false;
	}
	if(hidden1.points != hidden2.points) {
		var i = hidden1.points.length;
		if(i != hidden2.points.length) {
			return false;
		}
		while(--i >= 0) if(hidden1.points[i].x != hidden2.points[i].x || hidden1.points[i].y != hidden2.points[i].y) {
			return false;
		}
	}
	return true;
};
com_sq_m3lib_typedefs_TypedDefEqualityChecker.areEqualBlockers = function(description1,description2) {
	if(description1 == description2) {
		return true;
	}
	if(description1.className != description2.className) {
		return false;
	}
	if(description1.maxStep != description2.maxStep) {
		return false;
	}
	if(description1.priority != description2.priority) {
		return false;
	}
	if(description1.step != description2.step) {
		return false;
	}
	return true;
};
com_sq_m3lib_typedefs_TypedDefEqualityChecker.prototype = {
	__class__: com_sq_m3lib_typedefs_TypedDefEqualityChecker
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = true;
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null?"null":"" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null?"null":"" + file;
		b.b += " line ";
		b.b += line == null?"null":"" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null?"null":"" + cname;
		b.b += ".";
		b.b += meth == null?"null":"" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null?"null":"" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = true;
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g1 = from + 1;
		while(_g1 < to) {
			var j = _g1++;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	var new_mid;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	var n;
	if(from == mid || mid == to) {
		return;
	}
	n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = true;
$hxClasses.Array = Array;
Array.__name__ = true;
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
com_sq_m3lib_CheatFactory.CHEAT_ACTIVATED = "CheatActivated";
com_sq_m3lib_board_CellBorder.UPPER_LEFT = 1;
com_sq_m3lib_board_CellBorder.UPPER_RIGHT = 2;
com_sq_m3lib_board_CellBorder.LOWER_LEFT = 4;
com_sq_m3lib_board_CellBorder.LOWER_RIGHT = 8;
com_sq_m3lib_board_CellBorder.POSSIBLE_DOUBLE_CORNERS = [com_sq_m3lib_board_CellBorder.UPPER_LEFT ^ com_sq_m3lib_board_CellBorder.LOWER_RIGHT,com_sq_m3lib_board_CellBorder.UPPER_RIGHT ^ com_sq_m3lib_board_CellBorder.LOWER_LEFT];
com_sq_m3lib_board_CellBorder.CELL_DIRECTIONS = [[-1,0],[0,-1],[1,0],[0,1]];
com_sq_m3lib_board_CellBorder.CELL_DIAGONAL_DIRECTIONS = [[-1,-1],[-1,1],[1,-1],[1,1]];
com_sq_m3lib_board_CellBorder.CELL_DIAGONAL_CHECK_DIRECTIONS = [[1,1],[0,1],[1,0],[0,0]];
com_sq_m3lib_board_CellBorder.CELL_BORDER_DIRECTION = [[1,0],[0,1]];
com_sq_m3lib_board_DestructionCause.COMBO = "combo";
com_sq_m3lib_board_DestructionCause.SPECIAL_ITEM = "specialItem";
com_sq_m3lib_board_DestructionCause.BOARD_STABILIZE = "boardStabilize";
com_sq_m3lib_board_DestructionCause.SPECIAL_COMBO = "specialCombo";
com_sq_m3lib_board_DestructionCause.NEAR_ACTIVATED = "nearItemExploded";
com_sq_m3lib_board_DestructionCause.VIRAL_BLOCKER = "viralBlocker";
com_sq_m3lib_board_DestructionCause.COLLECT_CELL_REACHED = "collectCellReached";
com_sq_m3lib_board_DestructionCause.HIDDEN_OBJECT_FOUND = "hiddenObjectFound";
com_sq_m3lib_board_DestructionCause.SPECIAL_LOCKED_ITEM_COLLECTED = "specialLockedItemCollect";
com_sq_m3lib_board_DestructionCause.ITEM_REPLACED = "item_replaced";
com_sq_m3lib_board_DestructionCause.BOOSTER = "boosterApplied";
com_sq_m3lib_board_DestructionCause.FINISH_LEVEL_BOOST = "finishLevelBoost";
com_sq_m3lib_board_ViralBlockerManager.viralPriorityRules = new haxe_ds_StringMap();
com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker.CREATE_STEP = 0;
com_sq_m3lib_board_cellBlockers_viralScenarios_GumViralBlockerScenario.MAX_PROBABILITY = 100;
com_sq_m3lib_board_combinations_ComboFinderFactory.ccTime = 0;
com_sq_m3lib_board_combinations_ComboFinderFactory.ccCount = 0;
com_sq_m3lib_board_combinations_ComboFinderFactory.ccMaxTime = 0;
com_sq_m3lib_board_spawners_CommonItemSpawner.spawnersCount = 0;
com_sq_m3lib_bot_BaseBot.MAX_TICKS_PER_LOOP = 1000;
com_sq_m3lib_bot_moveStrategy_BotMoveSelector.STRATEGIES = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[0] = { classType : com_sq_m3lib_bot_moveStrategy_BestMoveSelectionStrategy, params : { bestMovePriority : 100, totalPriority : 100}};
	_g.h[1] = { classType : com_sq_m3lib_bot_moveStrategy_BestMoveSelectionStrategy, params : { bestMovePriority : 66, totalPriority : 100}};
	_g.h[2] = { classType : com_sq_m3lib_bot_moveStrategy_BestMoveSelectionStrategy, params : { bestMovePriority : 50, totalPriority : 100}};
	_g.h[3] = { classType : com_sq_m3lib_bot_moveStrategy_BestMoveSelectionStrategy, params : { bestMovePriority : 33, totalPriority : 100}};
	_g.h[4] = { classType : com_sq_m3lib_bot_moveStrategy_BestMoveSelectionStrategy, params : { bestMovePriority : 0, totalPriority : 100}};
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_core_CoreErrorKeys.DUBLICATE_EVENT = "CoreError_DUBLICATE_EVENT";
com_sq_m3lib_core_CoreErrorKeys.INVALID_PARAMS = "CoreError_INVALID_PARAMS";
com_sq_m3lib_core_CoreErrorKeys.MUST_OVERRIDE_METHOD = "CoreError_MUST_OVERRIDE_METHOD";
com_sq_m3lib_core_CoreErrorKeys.REPLAY_FAILED = "CoreError_REPLAY_FAILED";
com_sq_m3lib_core_CoreErrorKeys.WRONG_USER_STEP = "CoreError_WRONG_USER_STEP";
com_sq_m3lib_core_CoreErrorKeys.DIFFERENT_EVENT = "CoreError_DIFFERENT_EVENT";
com_sq_m3lib_core_CoreErrorKeys.WRONG_FIRST_EVENT = "CoreError_WRONG_FIRST_EVENT";
com_sq_m3lib_core_CoreErrorKeys.WRONG_CALLBACK_COUNT = "CoreError_WRONG_CALLBACK_COUNT";
com_sq_m3lib_core_CoreErrorKeys.SAME_PRIORITY_BLOCKERS_IN_ONE_CELL = "CoreError_SAME_PRIORITY_BLOCKERS_IN_ONE_CELL";
com_sq_m3lib_core_CoreErrorKeys.NULL_NOT_ALLOWED = "CorError_NULL_NOT_ALLOWED";
com_sq_m3lib_core_CoreErrorKeys.NOT_VALID_HIDDEN_OBJECTS_PLACEMENT = "CoreError_NOT_VALID_HIDDEN_OBJECTS_PLACEMENT";
com_sq_m3lib_core_CoreErrorKeys.CHEAT_FACTORY_DISABLED = "CoreError_CHEAT_FACTORY_DISABLED";
com_sq_m3lib_core_CoreErrorKeys.CHEAT_FACTORY_WRONG_MOVES = "CoreError_CHEAT_FACTORY_WRONG_MOVES";
com_sq_m3lib_core_Mersenne._kN = 624;
com_sq_m3lib_core_Mersenne._kM = 397;
com_sq_m3lib_core_Mersenne._kR = 31;
com_sq_m3lib_core_Mersenne._kA = -1727483681;
com_sq_m3lib_core_Mersenne._kU = 11;
com_sq_m3lib_core_Mersenne._kS = 7;
com_sq_m3lib_core_Mersenne._kB = -1658038656;
com_sq_m3lib_core_Mersenne._kT = 15;
com_sq_m3lib_core_Mersenne._kC = -272236544;
com_sq_m3lib_core_Mersenne._kL = 18;
com_sq_m3lib_core_Mersenne._maxInt = 2147483647;
com_sq_m3lib_core_Mersenne._bit32nd = -2147483648;
com_sq_m3lib_core_Mersenne._last31bits = 2147483647;
com_sq_m3lib_core_Mersenne._magicNumber = 1812433253;
com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_ITEM_DESCRIPTION = { className : "simple", color : -1};
com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_BOMB9_DESCRIPTION = { className : "bomb9", color : -1};
com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HORIZONTAL_BOMB_DESCRIPTION = { className : "bombHorizontal", color : -1};
com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_VERTICAL_BOMB_DESCRIPTION = { className : "bombVertical", color : -1};
com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_COLOR_BOMB_DESCRIPTION = { className : "bombColor", color : -1};
com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_MULTICOLORING_BOMB_DESCRIPTION = { className : "bombMultiColoring", color : -1};
com_sq_m3lib_coreSettings_CoreClassesDictionary.COLLECTABLE_ITEM_DESCRIPTION = { className : "collectable", color : -1};
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER_DESCRIPTION = { className : "locker", color : -1};
com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_GRAVITY_CHANGER_ITEM_DESCRIPTION = { className : "gravityChanger", color : -1};
com_sq_m3lib_coreSettings_CoreClassesDictionary.SPECIAL_LOCKED_ITEM_DESCRIPTION = { className : "specialLockedItem", color : -1};
com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION = { className : "homing_bomb", color : -1};
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BASE = "item_base";
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SIMPLE = "simple";
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9 = "bomb9";
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL = "bombHorizontal";
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL = "bombVertical";
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR = "bombColor";
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR = "bombMultiColoring";
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING = "homing_bomb";
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER = "locker";
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_GRAVITY_CHANGER = "gravityChanger";
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_COLLECTABLE = "collectable";
com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SPECIAL_LOCKED_ITEM = "specialLockedItem";
com_sq_m3lib_coreSettings_CoreClassesDictionary.itemAliasesList = [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SIMPLE,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_GRAVITY_CHANGER,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_COLLECTABLE,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SPECIAL_LOCKED_ITEM];
com_sq_m3lib_coreSettings_CoreClassesDictionary.specialItemAliasesList = [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_GRAVITY_CHANGER,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER];
com_sq_m3lib_coreSettings_CoreClassesDictionary.itemClassDictionary = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var key = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SIMPLE;
		var value = com_sq_m3lib_board_items_ColorItem;
		if(__map_reserved[key] != null) {
			_g.setReserved(key,value);
		} else {
			_g.h[key] = value;
		}
	}
	{
		var key1 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9;
		var value1 = com_sq_m3lib_board_items_ColorBombNine;
		if(__map_reserved[key1] != null) {
			_g.setReserved(key1,value1);
		} else {
			_g.h[key1] = value1;
		}
	}
	{
		var key2 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL;
		var value2 = com_sq_m3lib_board_items_ColorBombHorizonal;
		if(__map_reserved[key2] != null) {
			_g.setReserved(key2,value2);
		} else {
			_g.h[key2] = value2;
		}
	}
	{
		var key3 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL;
		var value3 = com_sq_m3lib_board_items_ColorBombVertical;
		if(__map_reserved[key3] != null) {
			_g.setReserved(key3,value3);
		} else {
			_g.h[key3] = value3;
		}
	}
	{
		var key4 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR;
		var value4 = com_sq_m3lib_board_items_ColorPickerBomb;
		if(__map_reserved[key4] != null) {
			_g.setReserved(key4,value4);
		} else {
			_g.h[key4] = value4;
		}
	}
	{
		var key5 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR;
		var value5 = com_sq_m3lib_board_items_MultiColoringBomb;
		if(__map_reserved[key5] != null) {
			_g.setReserved(key5,value5);
		} else {
			_g.h[key5] = value5;
		}
	}
	{
		var key6 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING;
		var value6 = com_sq_m3lib_board_items_HomingBombItem;
		if(__map_reserved[key6] != null) {
			_g.setReserved(key6,value6);
		} else {
			_g.h[key6] = value6;
		}
	}
	{
		var key7 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER;
		var value7 = com_sq_m3lib_board_items_LockerItem;
		if(__map_reserved[key7] != null) {
			_g.setReserved(key7,value7);
		} else {
			_g.h[key7] = value7;
		}
	}
	{
		var key8 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_GRAVITY_CHANGER;
		var value8 = com_sq_m3lib_board_items_ColorGravityChanger;
		if(__map_reserved[key8] != null) {
			_g.setReserved(key8,value8);
		} else {
			_g.h[key8] = value8;
		}
	}
	{
		var key9 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_COLLECTABLE;
		var value9 = com_sq_m3lib_board_items_CollectableItem;
		if(__map_reserved[key9] != null) {
			_g.setReserved(key9,value9);
		} else {
			_g.h[key9] = value9;
		}
	}
	{
		var key10 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SPECIAL_LOCKED_ITEM;
		var value10 = com_sq_m3lib_board_items_LockedCollectableItem;
		if(__map_reserved[key10] != null) {
			_g.setReserved(key10,value10);
		} else {
			_g.h[key10] = value10;
		}
	}
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_coreSettings_CoreClassesDictionary.lineBombClassDictionary = [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL];
com_sq_m3lib_coreSettings_CoreClassesDictionary.BLOCKER_BASE = "blocker_base";
com_sq_m3lib_coreSettings_CoreClassesDictionary.BLOCKER_SIMPLE = "blocker_simple";
com_sq_m3lib_coreSettings_CoreClassesDictionary.BLOCKER_ICE = "blocker_ice";
com_sq_m3lib_coreSettings_CoreClassesDictionary.BLOCKER_LOCK = "blocker_lock";
com_sq_m3lib_coreSettings_CoreClassesDictionary.BLOCKER_LOCK_SPECIAL = "blocker_special_lock";
com_sq_m3lib_coreSettings_CoreClassesDictionary.BLOCKER_VIRAL = "blocker_simple_viral";
com_sq_m3lib_coreSettings_CoreClassesDictionary.BLOCKER_VIRAL_DOUBLE = "blocker_double_simple_viral";
com_sq_m3lib_coreSettings_CoreClassesDictionary.BLOCKER_VIRAL_SPECIAL = "blocker_special_viral";
com_sq_m3lib_coreSettings_CoreClassesDictionary.blockersAliasesList = ["blocker_simple","blocker_ice","blocker_lock","blocker_special_lock","blocker_simple_viral","blocker_double_simple_viral","blocker_special_viral"];
com_sq_m3lib_coreSettings_CoreClassesDictionary.blockersClassDictionary = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = com_sq_m3lib_board_cellBlockers_SimpleCellBlocker;
		if(__map_reserved.blocker_simple != null) {
			_g.setReserved("blocker_simple",value);
		} else {
			_g.h["blocker_simple"] = value;
		}
	}
	{
		var value1 = com_sq_m3lib_board_cellBlockers_IceCellBlocker;
		if(__map_reserved.blocker_ice != null) {
			_g.setReserved("blocker_ice",value1);
		} else {
			_g.h["blocker_ice"] = value1;
		}
	}
	{
		var value2 = com_sq_m3lib_board_cellBlockers_ItemLockCellBlocker;
		if(__map_reserved.blocker_lock != null) {
			_g.setReserved("blocker_lock",value2);
		} else {
			_g.h["blocker_lock"] = value2;
		}
	}
	{
		var value3 = com_sq_m3lib_board_cellBlockers_SpecialItemLockCellBlocker;
		if(__map_reserved.blocker_special_lock != null) {
			_g.setReserved("blocker_special_lock",value3);
		} else {
			_g.h["blocker_special_lock"] = value3;
		}
	}
	{
		var value4 = com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker;
		if(__map_reserved.blocker_simple_viral != null) {
			_g.setReserved("blocker_simple_viral",value4);
		} else {
			_g.h["blocker_simple_viral"] = value4;
		}
	}
	{
		var value5 = com_sq_m3lib_board_cellBlockers_SimpleViralCellBlocker;
		if(__map_reserved.blocker_double_simple_viral != null) {
			_g.setReserved("blocker_double_simple_viral",value5);
		} else {
			_g.h["blocker_double_simple_viral"] = value5;
		}
	}
	{
		var value6 = com_sq_m3lib_board_cellBlockers_ViralGumCellBlocker;
		if(__map_reserved.blocker_special_viral != null) {
			_g.setReserved("blocker_special_viral",value6);
		} else {
			_g.h["blocker_special_viral"] = value6;
		}
	}
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_coreSettings_CoreClassesDictionary.viralBlockersList = ["blocker_simple_viral","blocker_double_simple_viral","blocker_special_viral"];
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_LINE = "simple_line";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_RADIUS = "simple_radius";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_9 = "bomb9";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_9_DOUBLE = "double_bomb9";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HORIZONTAL = "bombHorizontal";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_VERTICAL = "bombVertical";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_COLOR = "bombColor";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR = "bombMultiColoring";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_SPECIAL = "specialBombMultiColoring";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_DOUBLE = "doubleBombMultiColoring";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_COLOR = "colorBombMultiColoring";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING = "homing_bomb";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_DOUBLE = "doubleHomingBomb";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_VERTICAL = "vertical_homing";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_HORIZONTAL = "horizonal_homing";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_9 = "bomb9_homing";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_CROSS = "cross";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_CROSS_TRIPLE = "tripple_cross";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_COLOR_SPECIAL = "color_special";
com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_MEGABOOM = "megaboom";
com_sq_m3lib_coreSettings_CoreClassesDictionary.scenarioClassDictionary = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var key = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_LINE;
		var value = com_sq_m3lib_board_explosionScenarios_baseScenarios_LineScenario;
		if(__map_reserved[key] != null) {
			_g.setReserved(key,value);
		} else {
			_g.h[key] = value;
		}
	}
	{
		var key1 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_RADIUS;
		var value1 = com_sq_m3lib_board_explosionScenarios_baseScenarios_RadiusScenario;
		if(__map_reserved[key1] != null) {
			_g.setReserved(key1,value1);
		} else {
			_g.h[key1] = value1;
		}
	}
	{
		var key2 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_9;
		var value2 = com_sq_m3lib_board_explosionScenarios_bombScenarios_NineNearScenario;
		if(__map_reserved[key2] != null) {
			_g.setReserved(key2,value2);
		} else {
			_g.h[key2] = value2;
		}
	}
	{
		var key3 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HORIZONTAL;
		var value3 = com_sq_m3lib_board_explosionScenarios_bombScenarios_HorizonalLineBombScenario;
		if(__map_reserved[key3] != null) {
			_g.setReserved(key3,value3);
		} else {
			_g.h[key3] = value3;
		}
	}
	{
		var key4 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_VERTICAL;
		var value4 = com_sq_m3lib_board_explosionScenarios_bombScenarios_VerticalLineBombScenario;
		if(__map_reserved[key4] != null) {
			_g.setReserved(key4,value4);
		} else {
			_g.h[key4] = value4;
		}
	}
	{
		var key5 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_COLOR;
		var value5 = com_sq_m3lib_board_explosionScenarios_bombScenarios_ColorPickerBombScenario;
		if(__map_reserved[key5] != null) {
			_g.setReserved(key5,value5);
		} else {
			_g.h[key5] = value5;
		}
	}
	{
		var key6 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_CROSS;
		var value6 = com_sq_m3lib_board_explosionScenarios_complex_CrossScenario;
		if(__map_reserved[key6] != null) {
			_g.setReserved(key6,value6);
		} else {
			_g.h[key6] = value6;
		}
	}
	{
		var key7 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_CROSS_TRIPLE;
		var value7 = com_sq_m3lib_board_explosionScenarios_complex_TrippleCrossScenario;
		if(__map_reserved[key7] != null) {
			_g.setReserved(key7,value7);
		} else {
			_g.h[key7] = value7;
		}
	}
	{
		var key8 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_COLOR_SPECIAL;
		var value8 = com_sq_m3lib_board_explosionScenarios_complex_colorPickers_SpecialColorPickerScenario;
		if(__map_reserved[key8] != null) {
			_g.setReserved(key8,value8);
		} else {
			_g.h[key8] = value8;
		}
	}
	{
		var key9 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_9_DOUBLE;
		var value9 = com_sq_m3lib_board_explosionScenarios_complex_DoubleNineBombScenario;
		if(__map_reserved[key9] != null) {
			_g.setReserved(key9,value9);
		} else {
			_g.h[key9] = value9;
		}
	}
	{
		var key10 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_MEGABOOM;
		var value10 = com_sq_m3lib_board_explosionScenarios_complex_colorPickers_MegaBoomScenario;
		if(__map_reserved[key10] != null) {
			_g.setReserved(key10,value10);
		} else {
			_g.h[key10] = value10;
		}
	}
	{
		var key11 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR;
		var value11 = com_sq_m3lib_board_explosionScenarios_bombScenarios_MultiColoringBombScenario;
		if(__map_reserved[key11] != null) {
			_g.setReserved(key11,value11);
		} else {
			_g.h[key11] = value11;
		}
	}
	{
		var key12 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_SPECIAL;
		var value12 = com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_SpecialMultiColoringBombScenario;
		if(__map_reserved[key12] != null) {
			_g.setReserved(key12,value12);
		} else {
			_g.h[key12] = value12;
		}
	}
	{
		var key13 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_DOUBLE;
		var value13 = com_sq_m3lib_board_explosionScenarios_complex_coloringBomb_DoubleMultiColoringBombScenario;
		if(__map_reserved[key13] != null) {
			_g.setReserved(key13,value13);
		} else {
			_g.h[key13] = value13;
		}
	}
	{
		var key14 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_COLOR;
		var value14 = com_sq_m3lib_board_explosionScenarios_complex_colorPickers_ColorPickerMultiColoringBombScenario;
		if(__map_reserved[key14] != null) {
			_g.setReserved(key14,value14);
		} else {
			_g.h[key14] = value14;
		}
	}
	{
		var key15 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING;
		var value15 = com_sq_m3lib_board_explosionScenarios_bombScenarios_HomingBombScenario;
		if(__map_reserved[key15] != null) {
			_g.setReserved(key15,value15);
		} else {
			_g.h[key15] = value15;
		}
	}
	{
		var key16 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_DOUBLE;
		var value16 = com_sq_m3lib_board_explosionScenarios_complex_DoubleHomingBombScenario;
		if(__map_reserved[key16] != null) {
			_g.setReserved(key16,value16);
		} else {
			_g.h[key16] = value16;
		}
	}
	{
		var key17 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_VERTICAL;
		var value17 = com_sq_m3lib_board_explosionScenarios_complex_VerticalLineHomingBombSingleScenario;
		if(__map_reserved[key17] != null) {
			_g.setReserved(key17,value17);
		} else {
			_g.h[key17] = value17;
		}
	}
	{
		var key18 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_HORIZONTAL;
		var value18 = com_sq_m3lib_board_explosionScenarios_complex_HorizonalLineHomingBombScenario;
		if(__map_reserved[key18] != null) {
			_g.setReserved(key18,value18);
		} else {
			_g.h[key18] = value18;
		}
	}
	{
		var key19 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_9;
		var value19 = com_sq_m3lib_board_explosionScenarios_complex_NineNearHomingBombScenario;
		if(__map_reserved[key19] != null) {
			_g.setReserved(key19,value19);
		} else {
			_g.h[key19] = value19;
		}
	}
	{
		var value20 = com_sq_m3lib_board_explosionScenarios_boosterScenarios_ColorDestroyedBoosterScenario;
		if(__map_reserved.colorRemover != null) {
			_g.setReserved("colorRemover",value20);
		} else {
			_g.h["colorRemover"] = value20;
		}
	}
	{
		var value21 = com_sq_m3lib_board_explosionScenarios_boosterScenarios_CrossDestroyBoosterScenario;
		if(__map_reserved.crossRemover != null) {
			_g.setReserved("crossRemover",value21);
		} else {
			_g.h["crossRemover"] = value21;
		}
	}
	{
		var value22 = com_sq_m3lib_board_explosionScenarios_boosterScenarios_FreeMoveBoosterScenario;
		if(__map_reserved.freeMove != null) {
			_g.setReserved("freeMove",value22);
		} else {
			_g.h["freeMove"] = value22;
		}
	}
	{
		var value23 = com_sq_m3lib_board_explosionScenarios_boosterScenarios_ItemDestroyBoosterScenario;
		if(__map_reserved.oneRemover != null) {
			_g.setReserved("oneRemover",value23);
		} else {
			_g.h["oneRemover"] = value23;
		}
	}
	{
		var value24 = com_sq_m3lib_board_explosionScenarios_boosterScenarios_StartItemsPackBoosterScenario;
		if(__map_reserved.starterPack != null) {
			_g.setReserved("starterPack",value24);
		} else {
			_g.h["starterPack"] = value24;
		}
	}
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_coreSettings_CoreClassesDictionary.spawnerClassDictionary = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var key = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SIMPLE;
		var value = com_sq_m3lib_board_spawners_CommonItemSpawner;
		if(__map_reserved[key] != null) {
			_g.setReserved(key,value);
		} else {
			_g.h[key] = value;
		}
	}
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_coreSettings_CoreClassesDictionary.specialSpawnerClassDictionary = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var key = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9;
		var value = { classType : com_sq_m3lib_board_spawners_SpecialSpawner, params : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_BOMB9_DESCRIPTION};
		if(__map_reserved[key] != null) {
			_g.setReserved(key,value);
		} else {
			_g.h[key] = value;
		}
	}
	{
		var key1 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL;
		var value1 = { classType : com_sq_m3lib_board_spawners_SpecialSpawner, params : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HORIZONTAL_BOMB_DESCRIPTION};
		if(__map_reserved[key1] != null) {
			_g.setReserved(key1,value1);
		} else {
			_g.h[key1] = value1;
		}
	}
	{
		var key2 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL;
		var value2 = { classType : com_sq_m3lib_board_spawners_SpecialSpawner, params : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_VERTICAL_BOMB_DESCRIPTION};
		if(__map_reserved[key2] != null) {
			_g.setReserved(key2,value2);
		} else {
			_g.h[key2] = value2;
		}
	}
	{
		var key3 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING;
		var value3 = { classType : com_sq_m3lib_board_spawners_SpecialSpawner, params : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION};
		if(__map_reserved[key3] != null) {
			_g.setReserved(key3,value3);
		} else {
			_g.h[key3] = value3;
		}
	}
	{
		var key4 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR;
		var value4 = { classType : com_sq_m3lib_board_spawners_SpecialSpawner, params : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_COLOR_BOMB_DESCRIPTION};
		if(__map_reserved[key4] != null) {
			_g.setReserved(key4,value4);
		} else {
			_g.h[key4] = value4;
		}
	}
	{
		var key5 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR;
		var value5 = { classType : com_sq_m3lib_board_spawners_SpecialSpawner, params : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_MULTICOLORING_BOMB_DESCRIPTION};
		if(__map_reserved[key5] != null) {
			_g.setReserved(key5,value5);
		} else {
			_g.h[key5] = value5;
		}
	}
	{
		var key6 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_GRAVITY_CHANGER;
		var value6 = { classType : com_sq_m3lib_board_spawners_GravityChangerSpecialSpawner, params : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_GRAVITY_CHANGER_ITEM_DESCRIPTION};
		if(__map_reserved[key6] != null) {
			_g.setReserved(key6,value6);
		} else {
			_g.h[key6] = value6;
		}
	}
	{
		var key7 = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER;
		var value7 = { classType : com_sq_m3lib_board_spawners_ExplosionStopperSpecialSpawner, params : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER_DESCRIPTION};
		if(__map_reserved[key7] != null) {
			_g.setReserved(key7,value7);
		} else {
			_g.h[key7] = value7;
		}
	}
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_coreSettings_CoreClassesDictionary.PLAYER_CAPTURE = "player_captured";
com_sq_m3lib_coreSettings_CoreClassesDictionary.RECTANGULAR_HIDDEN_OBJECT = "rectObject";
com_sq_m3lib_coreSettings_CoreClassesDictionary.hiddenObjectsClassesDictionary = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = com_sq_m3lib_board_cellHiddenObjects_RectangularHiddenObject;
		if(__map_reserved.rectObject != null) {
			_g.setReserved("rectObject",value);
		} else {
			_g.h["rectObject"] = value;
		}
	}
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_coreSettings_CoreClassesDictionary.HIDDEN_OBJECT_1X2 = { classname : "rectObject", size : { x : 1, y : 2}, points : []};
com_sq_m3lib_coreSettings_CoreClassesDictionary.HIDDEN_OBJECT_2X4 = { classname : "rectObject", size : { x : 2, y : 4}, points : []};
com_sq_m3lib_coreSettings_CoreClassesDictionary.HIDDEN_OBJECT_3X6 = { classname : "rectObject", size : { x : 3, y : 6}, points : []};
com_sq_m3lib_coreSettings_CoreClassesDictionary.possibleHiddenDescriptions = [com_sq_m3lib_coreSettings_CoreClassesDictionary.HIDDEN_OBJECT_1X2,com_sq_m3lib_coreSettings_CoreClassesDictionary.HIDDEN_OBJECT_2X4,com_sq_m3lib_coreSettings_CoreClassesDictionary.HIDDEN_OBJECT_3X6];
com_sq_m3lib_coreSettings_CoreClassesDictionary.COLLAPSE_ANIMATION = "simple_collapse";
com_sq_m3lib_coreSettings_CoreClassesDictionary.NEW_COMBO_ITEM_ANIMATION = "simple_new_combo_item";
com_sq_m3lib_coreSettings_CoreClassesDictionary.DESTROY_ANIMATION = "simple_destroy";
com_sq_m3lib_coreSettings_CoreClassesDictionary.VIRAL_INCREASE_STEP_ANIMATION = "viral_increase_step";
com_sq_m3lib_coreSettings_CoreClassesDictionary.TARGET_BASE = "target_base";
com_sq_m3lib_coreSettings_CoreClassesDictionary.TARGET_SCORE = "score";
com_sq_m3lib_coreSettings_CoreClassesDictionary.TARGET_COLLECT_ITEM = "collect_item";
com_sq_m3lib_coreSettings_CoreClassesDictionary.TARGET_CHANGE_GRAVITY = "change_gravity";
com_sq_m3lib_coreSettings_CoreClassesDictionary.TARGET_REACH_TARGET_CELL = "reach_target_cell";
com_sq_m3lib_coreSettings_CoreClassesDictionary.TARGET_DISCOVER_OBJECTS = "discover";
com_sq_m3lib_coreSettings_CoreClassesDictionary.TARGET_COLLECT_BLOCKER = "collect_blocker";
com_sq_m3lib_coreSettings_CoreClassesDictionary.TARGET_REMOVE_VIRAL = "remove_viral_blocker";
com_sq_m3lib_coreSettings_CoreClassesDictionary.TARGET_REMOVE_DOUBLE_VIRAL = "remove_double_viral_blocker";
com_sq_m3lib_coreSettings_CoreClassesDictionary.TARGET_REMOVE_SPECIAL_VIRAL = "remove_special_viral_blocker";
com_sq_m3lib_coreSettings_CoreClassesDictionary.TARGET_COLLECT_LOCKED_ITEM = "collect_locked_item";
com_sq_m3lib_coreSettings_CoreClassesDictionary.TARGET_CAPTURE_CELLS = "capture_cells";
com_sq_m3lib_coreSettings_CoreClassesDictionary.targetAliases = ["score","collect_item","reach_target_cell","discover","remove_viral_blocker","remove_double_viral_blocker","remove_special_viral_blocker","collect_locked_item","capture_cells"];
com_sq_m3lib_coreSettings_CoreClassesDictionary.gameTargetClassesDictionary = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = { classType : com_sq_m3lib_game_gameTargets_ScoreGameTarget};
		if(__map_reserved.score != null) {
			_g.setReserved("score",value);
		} else {
			_g.h["score"] = value;
		}
	}
	{
		var value1 = { classType : com_sq_m3lib_game_gameTargets_CollectGravityItemGameTarget, params : { description : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_GRAVITY_CHANGER_ITEM_DESCRIPTION}};
		if(__map_reserved.collect_item != null) {
			_g.setReserved("collect_item",value1);
		} else {
			_g.h["collect_item"] = value1;
		}
	}
	{
		var value2 = { classType : com_sq_m3lib_game_gameTargets_ChangeGravityGameTarget};
		if(__map_reserved.change_gravity != null) {
			_g.setReserved("change_gravity",value2);
		} else {
			_g.h["change_gravity"] = value2;
		}
	}
	{
		var value3 = { classType : com_sq_m3lib_game_gameTargets_ReachTargetCellGameTarget, params : { description : com_sq_m3lib_coreSettings_CoreClassesDictionary.COLLECTABLE_ITEM_DESCRIPTION}};
		if(__map_reserved.reach_target_cell != null) {
			_g.setReserved("reach_target_cell",value3);
		} else {
			_g.h["reach_target_cell"] = value3;
		}
	}
	{
		var value4 = { classType : com_sq_m3lib_game_gameTargets_DiscoverObjectGameTarget};
		if(__map_reserved.discover != null) {
			_g.setReserved("discover",value4);
		} else {
			_g.h["discover"] = value4;
		}
	}
	{
		var value5 = { classType : com_sq_m3lib_game_gameTargets_CollectViralBlockerGameTarget, params : { blocker : "blocker_simple_viral"}};
		if(__map_reserved.remove_viral_blocker != null) {
			_g.setReserved("remove_viral_blocker",value5);
		} else {
			_g.h["remove_viral_blocker"] = value5;
		}
	}
	{
		var value6 = { classType : com_sq_m3lib_game_gameTargets_CollectViralBlockerGameTarget, params : { blocker : "blocker_double_simple_viral"}};
		if(__map_reserved.remove_double_viral_blocker != null) {
			_g.setReserved("remove_double_viral_blocker",value6);
		} else {
			_g.h["remove_double_viral_blocker"] = value6;
		}
	}
	{
		var value7 = { classType : com_sq_m3lib_game_gameTargets_CollectViralBlockerGameTarget, params : { blocker : "blocker_special_viral"}};
		if(__map_reserved.remove_special_viral_blocker != null) {
			_g.setReserved("remove_special_viral_blocker",value7);
		} else {
			_g.h["remove_special_viral_blocker"] = value7;
		}
	}
	{
		var value8 = { classType : com_sq_m3lib_game_gameTargets_LockedCollectablesGameTarget, params : { description : com_sq_m3lib_coreSettings_CoreClassesDictionary.SPECIAL_LOCKED_ITEM_DESCRIPTION}};
		if(__map_reserved.collect_locked_item != null) {
			_g.setReserved("collect_locked_item",value8);
		} else {
			_g.h["collect_locked_item"] = value8;
		}
	}
	{
		var value9 = { classType : com_sq_m3lib_game_gameTargets_CaptureCellsGameTarget};
		if(__map_reserved.capture_cells != null) {
			_g.setReserved("capture_cells",value9);
		} else {
			_g.h["capture_cells"] = value9;
		}
	}
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_coreSettings_CoreClassesDictionary.collectLockedCellItem = [com_sq_m3lib_coreSettings_CoreClassesDictionary.SPECIAL_LOCKED_ITEM_DESCRIPTION];
com_sq_m3lib_coreSettings_CoreClassesDictionary.BOOSTER_COLOR_REMOVER = "colorRemover";
com_sq_m3lib_coreSettings_CoreClassesDictionary.BOOSTER_CROSS_LINE_REMOVER = "crossRemover";
com_sq_m3lib_coreSettings_CoreClassesDictionary.BOOSTER_EXTRA_HOMING_BOMB = "extraHoming";
com_sq_m3lib_coreSettings_CoreClassesDictionary.BOOSTER_FREE_MOVE = "freeMove";
com_sq_m3lib_coreSettings_CoreClassesDictionary.BOOSTER_ONE_REMOVER = "oneRemover";
com_sq_m3lib_coreSettings_CoreClassesDictionary.BOOSTER_START_PACK = "starterPack";
com_sq_m3lib_coreSettings_CoreClassesDictionary.boosterClassesDictionary = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = com_sq_m3lib_board_boosters_ColorItemsRemoveBooster;
		if(__map_reserved.colorRemover != null) {
			_g.setReserved("colorRemover",value);
		} else {
			_g.h["colorRemover"] = value;
		}
	}
	{
		var value1 = com_sq_m3lib_board_boosters_CrossItemsRemoveBooster;
		if(__map_reserved.crossRemover != null) {
			_g.setReserved("crossRemover",value1);
		} else {
			_g.h["crossRemover"] = value1;
		}
	}
	{
		var value2 = com_sq_m3lib_board_boosters_ExtraHomingBombBooster;
		if(__map_reserved.extraHoming != null) {
			_g.setReserved("extraHoming",value2);
		} else {
			_g.h["extraHoming"] = value2;
		}
	}
	{
		var value3 = com_sq_m3lib_board_boosters_FreeMoveBooster;
		if(__map_reserved.freeMove != null) {
			_g.setReserved("freeMove",value3);
		} else {
			_g.h["freeMove"] = value3;
		}
	}
	{
		var value4 = com_sq_m3lib_board_boosters_SimpleItemRemoveBooster;
		if(__map_reserved.oneRemover != null) {
			_g.setReserved("oneRemover",value4);
		} else {
			_g.h["oneRemover"] = value4;
		}
	}
	{
		var value5 = com_sq_m3lib_board_boosters_StartItemsPackBooster;
		if(__map_reserved.starterPack != null) {
			_g.setReserved("starterPack",value5);
		} else {
			_g.h["starterPack"] = value5;
		}
	}
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_coreSettings_CoreSettings.gameConfig = { viewPortSize : { x : 9, y : 9}, totalMaxColors : 7, combinations : [{ alias : "simple", priority : 1, cells : [{ x : 0, y : 0},{ x : 0, y : 1},{ x : 0, y : 2}], type : ["vertical"], desc : "", item : null},{ alias : "simple", priority : 1, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0}], type : ["horizontal"], desc : null, item : null},{ alias : "homingBomb", priority : 2, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 0, y : 1},{ x : 1, y : 1}], type : ["square"], desc : "рыбка х4", item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING},{ alias : "homingBomb", priority : 4, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 0, y : 1},{ x : 1, y : 1},{ x : 2, y : 0}], type : ["horizontal","square"], desc : "рыбка, право-верх", item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING},{ alias : "homingBomb", priority : 4, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 0, y : 1},{ x : 1, y : 1},{ x : 2, y : 1}], type : ["horizontal","square"], desc : "рыбка, право-низ", item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING},{ alias : "homingBomb", priority : 4, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 0, y : 1},{ x : 1, y : 1},{ x : -1, y : 1}], type : ["horizontal","square"], desc : "рыбка, лево-низ", item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING},{ alias : "homingBomb", priority : 4, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 0, y : 1},{ x : 1, y : 1},{ x : -1, y : 0}], type : ["horizontal","square"], desc : "рыбка лево-верх", item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING},{ alias : "homingBomb", priority : 4, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 0, y : 1},{ x : 1, y : 1},{ x : 1, y : -1}], type : ["vertical","square"], desc : "рыбка, вертикаль-право-верх", item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING},{ alias : "homingBomb", priority : 4, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 0, y : 1},{ x : 1, y : 1},{ x : 0, y : -1}], type : ["vertical","square"], desc : "рыбка, вертикаль-право-низ", item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING},{ alias : "homingBomb", priority : 4, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 0, y : 1},{ x : 1, y : 1},{ x : 1, y : 2}], type : ["vertical","square"], desc : "рыбка, вертикаль-лево-низ", item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING},{ alias : "homingBomb", priority : 4, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 0, y : 1},{ x : 1, y : 1},{ x : 0, y : 2}], type : ["vertical","square"], desc : "рыбка вертикаль-лево-верх", item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING},{ alias : "lineBomb", priority : 5, cells : [{ x : 0, y : 0},{ x : 0, y : 1},{ x : 0, y : 2},{ x : 0, y : 3}], type : ["vertical"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL, desc : null},{ alias : "lineBomb", priority : 5, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 3, y : 0}], type : ["horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL, desc : null},{ alias : "bomb9", priority : 6, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 2, y : -1},{ x : 2, y : -2}], type : ["vertical","horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9, desc : "угол право-верх"},{ alias : "bomb9", priority : 6, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 2, y : 1},{ x : 2, y : 2}], type : ["vertical","horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9, desc : "угол право-низ"},{ alias : "bomb9", priority : 6, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 0, y : 1},{ x : 0, y : 2}], type : ["vertical","horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9, desc : "угол лево-верх"},{ alias : "bomb9", priority : 6, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 0, y : -1},{ x : 0, y : -2}], type : ["vertical","horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9, desc : "угол лево-низ"},{ alias : "bomb9", priority : 7, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 1, y : 1},{ x : 1, y : 2}], type : ["vertical","horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9, desc : "Т"},{ alias : "bomb9", priority : 7, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 2, y : -1},{ x : 2, y : 1}], type : ["vertical","horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9, desc : "-|"},{ alias : "bomb9", priority : 7, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 1, y : -1},{ x : 1, y : -2}], type : ["vertical","horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9, desc : "⊥"},{ alias : "bomb9", priority : 7, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 0, y : -1},{ x : 0, y : 1}], type : ["vertical","horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9, desc : "|-"},{ alias : "bombColor", priority : 8, cells : [{ x : 0, y : 0},{ x : 0, y : 1},{ x : 0, y : 2},{ x : 0, y : 3},{ x : 0, y : 4}], type : ["vertical"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR, desc : null},{ alias : "bombColor", priority : 8, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 3, y : 0},{ x : 4, y : 0}], type : ["horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR, desc : null},{ alias : "bombMultiColoring", priority : 9, cells : [{ x : 0, y : 0},{ x : 0, y : 1},{ x : 0, y : 2},{ x : 0, y : 3},{ x : 0, y : 4},{ x : 1, y : 2}], type : ["vertical"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR, desc : null},{ alias : "bombMultiColoring", priority : 9, cells : [{ x : 0, y : 0},{ x : 0, y : 1},{ x : 0, y : 2},{ x : 0, y : 3},{ x : 0, y : 4},{ x : -1, y : 2}], type : ["vertical"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR, desc : null},{ alias : "bombMultiColoring", priority : 9, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 3, y : 0},{ x : 4, y : 0},{ x : 2, y : 1}], type : ["horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR, desc : null},{ alias : "bombMultiColoring", priority : 9, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 3, y : 0},{ x : 4, y : 0},{ x : 2, y : -1}], type : ["horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR, desc : null},{ alias : "bombMultiColoring", priority : 10, cells : [{ x : 0, y : 0},{ x : 0, y : 1},{ x : 0, y : 2},{ x : 0, y : 3},{ x : 0, y : 4},{ x : 1, y : 2},{ x : 2, y : 2}], type : ["vertical","horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR, desc : null},{ alias : "bombMultiColoring", priority : 10, cells : [{ x : 0, y : 0},{ x : 0, y : 1},{ x : 0, y : 2},{ x : 0, y : 3},{ x : 0, y : 4},{ x : -1, y : 2},{ x : -2, y : 2}], type : ["vertical","horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR, desc : null},{ alias : "bombMultiColoring", priority : 10, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 3, y : 0},{ x : 4, y : 0},{ x : 2, y : 1},{ x : 2, y : 2}], type : ["vertical","horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR, desc : null},{ alias : "bombMultiColoring", priority : 10, cells : [{ x : 0, y : 0},{ x : 1, y : 0},{ x : 2, y : 0},{ x : 3, y : 0},{ x : 4, y : 0},{ x : 2, y : -1},{ x : 2, y : -2}], type : ["vertical","horizontal"], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR, desc : null}], specialCombinations : [{ alias : "special", priority : 11, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SIMPLE], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_COLOR},{ alias : "special", priority : 11, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SIMPLE], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR},{ alias : "special", priority : 12, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_CROSS},{ alias : "special", priority : 12, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_CROSS_TRIPLE},{ alias : "special", priority : 12, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_9_DOUBLE},{ alias : "special", priority : 12, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_DOUBLE},{ alias : "special", priority : 12, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_VERTICAL},{ alias : "special", priority : 12, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_HORIZONTAL},{ alias : "special", priority : 12, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_9},{ alias : "special", priority : 13, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_COLOR_SPECIAL},{ alias : "special", priority : 13, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_COLOR_SPECIAL},{ alias : "special", priority : 13, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_COLOR_SPECIAL},{ alias : "special", priority : 14, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_SPECIAL},{ alias : "special", priority : 14, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_SPECIAL},{ alias : "special", priority : 14, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL,com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_SPECIAL},{ alias : "special", priority : 15, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_MEGABOOM},{ alias : "special", priority : 16, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_COLOR},{ alias : "special", priority : 17, secondary : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR], special : [com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR], scenario : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_DOUBLE}]};
com_sq_m3lib_coreSettings_CoreSettings.POSITION_DELTA = 2;
com_sq_m3lib_coreSettings_CoreSettings.FACTORY_CLONE_METHOD = "clone";
com_sq_m3lib_coreSettings_CoreSettings.RANDOM_COLOR = -1;
com_sq_m3lib_coreSettings_CoreSettings.MAX_DIRECTIONS = 4;
com_sq_m3lib_coreSettings_CoreSettings.VERTICAL = "vertical";
com_sq_m3lib_coreSettings_CoreSettings.HORIZONAL = "horizontal";
com_sq_m3lib_coreSettings_CoreSettings.SQUARE = "square";
com_sq_m3lib_coreSettings_CoreSettings.HORIZONAL_PRESET_END = 3;
com_sq_m3lib_coreSettings_CoreSettings.VERTICAL_FOUR_SIDE_PRESET_END = 5;
com_sq_m3lib_coreSettings_CoreSettings.NEIGHBOUR_CHECK_DIRECTIONS = [[[-2,0],[-1,0]],[[1,0],[2,0]],[[-1,0],[1,0]],[[0,-2],[0,-1]],[[-1,-1],[-1,0],[0,-1]],[[1,-1],[1,0],[0,-1]]];
com_sq_m3lib_coreSettings_CoreSettings.FOUR_SIDE_NEIGHBOUR_CHECK_DIRECTIONS = [[[-2,0],[-1,0]],[[1,0],[2,0]],[[-1,0],[1,0]],[[0,-2],[0,-1]],[[0,-1],[0,1]],[[0,2],[0,1]],[[1,1],[1,0],[0,1]],[[-1,1],[-1,0],[0,1]],[[-1,-1],[-1,0],[0,-1]],[[1,-1],[1,0],[0,-1]]];
com_sq_m3lib_coreSettings_CoreSettings.DEFAULT_NEIGHBOUR_CHECK_VECTOR = new com_sq_m3lib_geometry_CellVector(0,-1);
com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultBombScenarioParams = [{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_LINE, tickDelta : 6, entityPerTick : 1, bombDestroyDelta : 15},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HORIZONTAL, tickDelta : 6, entityPerTick : 1, bombDestroyDelta : 15},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_VERTICAL, tickDelta : 6, entityPerTick : 1, bombDestroyDelta : 15},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_CROSS, tickDelta : 6, entityPerTick : 1, bombDestroyDelta : 15},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_CROSS_TRIPLE, tickDelta : 6, entityPerTick : 1, bombDestroyDelta : 30, params : { rows : 3}},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_9, tickDelta : 12, entityPerTick : 1, bombDestroyDelta : 24, params : { radius : 1}},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_9_DOUBLE, tickDelta : 12, entityPerTick : 1, bombDestroyDelta : 24, params : { radius : 2}},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR, tickDelta : 12, entityPerTick : 1, bombDestroyDelta : 36},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_SPECIAL, tickDelta : 12, entityPerTick : 1, bombDestroyDelta : 36},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_DOUBLE, tickDelta : 12, entityPerTick : 1, bombDestroyDelta : 36},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_COLOR, tickDelta : 6, entityPerTick : 1, bombDestroyDelta : 36},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_COLOR_SPECIAL, tickDelta : 6, entityPerTick : 1, bombDestroyDelta : 36},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_MEGABOOM, tickDelta : 12, entityPerTick : 1, bombDestroyDelta : 24, params : { radius : 9}},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_MULTICOLOR_COLOR, tickDelta : 12, entityPerTick : 1, bombDestroyDelta : 24, params : { radius : 9}},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING, tickDelta : 90, entityPerTick : 1, bombDestroyDelta : 30, params : { doubleCount : 3, boosterDoubleCount : 5}},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_DOUBLE, tickDelta : 90, entityPerTick : 1, bombDestroyDelta : 30, params : { doubleCount : 3}},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_HORIZONTAL, tickDelta : 90, entityPerTick : 1, bombDestroyDelta : 30, params : { doubleCount : 3}},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_VERTICAL, tickDelta : 90, entityPerTick : 1, bombDestroyDelta : 30, params : { doubleCount : 3}},{ id : com_sq_m3lib_coreSettings_CoreClassesDictionary.SCENARIO_BOMB_HOMING_9, tickDelta : 90, entityPerTick : 1, bombDestroyDelta : 30, params : { doubleCount : 3}}];
com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultScoreParams = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = { multiplier : 1, divider : 1, comboSize : "3"};
		if(__map_reserved["3"] != null) {
			_g.setReserved("3",value);
		} else {
			_g.h["3"] = value;
		}
	}
	{
		var value1 = { multiplier : 3, divider : 2, comboSize : "4"};
		if(__map_reserved["4"] != null) {
			_g.setReserved("4",value1);
		} else {
			_g.h["4"] = value1;
		}
	}
	{
		var value2 = { multiplier : 2, divider : 1, comboSize : "5"};
		if(__map_reserved["5"] != null) {
			_g.setReserved("5",value2);
		} else {
			_g.h["5"] = value2;
		}
	}
	$r = { itemsScore : [{ className : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BASE, score : 20},{ className : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_COLLECTABLE, score : 6000},{ className : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SPECIAL_LOCKED_ITEM, score : 1000},{ className : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER, score : 0},{ className : "blocker_base", score : 20},{ className : "rectObject", score : 2000}], comboScoreDictionary : _g, minCombo : 3, maxBonusMutiplier : 5};
	return $r;
}(this));
com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultMoveParams = { commonAcceleration : 3829, diagonalAcceleration : 2550, maxSpeed : 500000, cellSize : 1000000, teleportSize : 499000};
com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultAnimationParams = [{ id : "simple_collapse", animationLength : 30},{ id : "simple_new_combo_item", animationLength : 5},{ id : "simple_destroy", animationLength : 30},{ id : "viral_increase_step", animationLength : 30}];
com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultViralParams = { priorityRules : [{ blockerName : "blocker_simple_viral", priorities : [{ className : "homing_bomb", priority : 20},{ className : "bombVertical", priority : 30},{ className : "bombHorizontal", priority : 40},{ className : "bomb9", priority : 50},{ className : "bombColor", priority : 60},{ className : "bombMultiColoring", priority : 70}]},{ blockerName : "blocker_double_simple_viral", priorities : [{ className : "homing_bomb", priority : 20},{ className : "bombVertical", priority : 30},{ className : "bombHorizontal", priority : 40},{ className : "bomb9", priority : 50},{ className : "bombColor", priority : 60},{ className : "bombMultiColoring", priority : 70}]},{ blockerName : "blocker_special_viral", priorities : [{ className : "homing_bomb", priority : 20},{ className : "bombVertical", priority : 30},{ className : "bombHorizontal", priority : 40},{ className : "bomb9", priority : 50},{ className : "bombColor", priority : 60},{ className : "bombMultiColoring", priority : 70},{ className : "locker", priority : 80}]}], minIncreaseProbability : 0, maxIncreaseProbability : 100, viralGumCanMoveStep : 1, baseIncreaseProbability : 50};
com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultBlockerParams = { minLevel : 1, activationRules : [{ blockerName : "blocker_special_lock", specialsName : ["simple_line","simple_radius","bombColor","homing_bomb","bombMultiColoring"]},{ blockerName : "blocker_simple_viral", specialsName : ["simple_line","simple_radius","bombColor","homing_bomb","bombMultiColoring"]},{ blockerName : "blocker_double_simple_viral", specialsName : ["simple_line","simple_radius","bombColor","homing_bomb","bombMultiColoring"]},{ blockerName : "blocker_ice", specialsName : ["bombColor","homing_bomb","bombMultiColoring"]},{ blockerName : "blocker_simple", specialsName : ["bombColor","homing_bomb","bombMultiColoring"]}]};
com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultCellWeights = [{ id : "target_base", mainTargetWeight : 0, blockersWeights : [{ alias : "blocker_base", weight : 80}], itemsWeights : [{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BASE, weight : 1},{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL, weight : 5},{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL, weight : 5},{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9, weight : 5},{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR, weight : 5},{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR, weight : 5},{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING, weight : -5}]},{ id : "capture_cells", anyNotCaptured : 500, notCapturedBlocker : 90, capturedByOther : 95},{ id : "reach_target_cell", itemsWeights : [{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_GRAVITY_CHANGER, weight : 400},{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_COLLECTABLE, weight : 500}], onPathItemWeight : 90, onPathBlockerWeight : 100},{ id : "collect_locked_item", itemsWeights : [{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_SPECIAL_LOCKED_ITEM, weight : 500}]},{ id : "discover", mainTargetWeight : 500},{ id : "collect_item", itemsWeights : [{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_GRAVITY_CHANGER, weight : 500}]},{ id : "score", itemsWeights : [{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_VERTICAL, weight : 500},{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HORIZONTAL, weight : 500},{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_9, weight : 500},{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_COLOR, weight : 500},{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_MULTICOLOR, weight : 500},{ alias : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_BOMB_HOMING, weight : 500}]},{ id : "remove_viral_blocker", blockersWeights : [{ alias : "blocker_simple_viral", weight : 500, step : 1}]},{ id : "remove_double_viral_blocker", blockersWeights : [{ alias : "blocker_double_simple_viral", weight : 500, step : 1},{ alias : "blocker_double_simple_viral", weight : 300, step : 2}]},{ id : "remove_special_viral_blocker", blockersWeights : [{ alias : "blocker_special_viral", weight : 500, step : 1},{ alias : "blocker_special_viral", weight : 300, step : 2}]}];
com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultHomingBombParams = { noBoostCount : 1, boostCount : 2};
com_sq_m3lib_coreSettings_CoreSettingsDefault.defaultLevelFinishBoostParams = { tickDelta : 1, entityPerTick : 1, bombDestroyDelta : 0, minPerStep : 10, maxPerStepMultiplier : 30, maxPerStepDivider : 100, elementScore : 3000, destroyQueue : [[com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_BOMB9_DESCRIPTION],[com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_VERTICAL_BOMB_DESCRIPTION,com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HORIZONTAL_BOMB_DESCRIPTION,com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION],[com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_COLOR_BOMB_DESCRIPTION],[com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_MULTICOLORING_BOMB_DESCRIPTION]], placeTickDelta : 30, placementRules : [{ iteration : 1, descriptions : [com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HORIZONTAL_BOMB_DESCRIPTION,com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_VERTICAL_BOMB_DESCRIPTION]},{ iteration : 4, descriptions : [com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION]},{ iteration : 5, descriptions : [com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_BOMB9_DESCRIPTION]}]};
com_sq_m3lib_coreSettings_CoreSettingsDefault.DEFAULT_DIRECTION = 0;
com_sq_m3lib_coreSettings_CoreSettingsDefault.MAX_NO_COMBO_SHUFFLE = 100;
com_sq_m3lib_coreSettings_CoreSettingsDefault.MAX_INITIAL_COLOR_REROLL = 100;
com_sq_m3lib_coreSettings_CoreSettingsDefault.DEFAULT_CLIENT_TICK_DELTA = 16;
com_sq_m3lib_coreSettings_CoreSettingsDefault.DEFAULT_VIEW_SIZE = 9;
com_sq_m3lib_coreSettings_CoreSettingsDefault.DEFAULT_TOTAL_COLORS = 7;
com_sq_m3lib_coreSettings_CoreSettingsDefault.DEFAULT_VIEW_POINT = { x : 0, y : 0};
com_sq_m3lib_events_CoreAddScoreEvent.ADD_SCORE = "add_score";
com_sq_m3lib_events_CoreBlockerEvent.DESTROY = "destroy_blocker";
com_sq_m3lib_events_CoreBlockerEvent.SPAWN = "spawn_blocker";
com_sq_m3lib_events_CoreBlockerEvent.CHANGED = "change_blocker_step";
com_sq_m3lib_events_CoreBoosterEvent.ACTIVATED = "booster_activated";
com_sq_m3lib_events_CoreCaptureCellEvent.CAPTURED = "cell_captured";
com_sq_m3lib_events_CoreCellGravityUpdateEvent.FIELD_FULL = "gravity_filled_field";
com_sq_m3lib_events_CoreCellGravityUpdateEvent.CHANGE_CELL_MOVE_VECTOR = "change_cells_move_vector";
com_sq_m3lib_events_CoreCellHitEvent.CELL_HIT = "cell_hit";
com_sq_m3lib_events_CoreComboEvent.DESTROYED = "destroyed";
com_sq_m3lib_events_CoreEventDispatcher.TICK = "tick";
com_sq_m3lib_events_CoreEventDispatcher.LEVEL_LOADED = "level_data_loaded";
com_sq_m3lib_events_CoreEventDispatcher.BOARD_STABLE = "board_stable";
com_sq_m3lib_events_CoreEventDispatcher.BOARD_ALREADY_STABLE_ALARM = "board_already_stable_alarm";
com_sq_m3lib_events_CoreEventPriority.MAX = 2147483647;
com_sq_m3lib_events_CoreEventPriority.KARMA = 1000;
com_sq_m3lib_events_CoreEventPriority.BOARD = 500;
com_sq_m3lib_events_CoreEventPriority.CORE = 100;
com_sq_m3lib_events_CoreEventPriority.NORMAL = 0;
com_sq_m3lib_events_CoreEventPriority.GAME_PROGRESS = -50;
com_sq_m3lib_events_CoreEventPriority.TARGET = -100;
com_sq_m3lib_events_CoreEventPriority.LOGGER = -2147483645;
com_sq_m3lib_events_CoreEventPriority.REPLAY = -2147483646;
com_sq_m3lib_events_CoreFailLevelBoostEvent.ADD_MOVES = "fail_level_add_moves";
com_sq_m3lib_events_CoreFinishLevelBoostEvent.FINISH_LEVEL_BOOST_STARTED = "finish_level_boost_started";
com_sq_m3lib_events_CoreFinishLevelBoostEvent.FINISH_LEVEL_BOOST_COMPLETE = "finish_level_boost_complete";
com_sq_m3lib_events_CoreHiddenObjectEvent.CHANGED = "cell_cover_changed";
com_sq_m3lib_events_CoreHiddenObjectEvent.DESTROYED = "cell_cover_destroyed";
com_sq_m3lib_events_CoreHiddenObjectEvent.DISCOVERED = "object_found";
com_sq_m3lib_events_CoreItemAddedEvent.SPAWNED = "new_items_spawned";
com_sq_m3lib_events_CoreItemAddedEvent.FROM_COMBO = "new_items_appeared_from_combo";
com_sq_m3lib_events_CoreItemChangedEvent.CHANGE_ITEM_IN_CELL = "change_item_in_cell";
com_sq_m3lib_events_CoreItemDestroyEvent.DESTROY_ITEMS = "destroy_items";
com_sq_m3lib_events_CoreItemDestroyEvent.SET_IN_ACTION = "set_items_in_action";
com_sq_m3lib_events_CoreItemPositionUpdatedEvent.ITEM_POSITION_CHANGED = "item_position_changed";
com_sq_m3lib_events_CoreItemsSwitchEvent.ITEM_SWITCH_FAILED = "item_switch_failed";
com_sq_m3lib_events_CoreItemsSwitchEvent.ITEM_SWITCH_SUCCESS = "item_switch_sucess";
com_sq_m3lib_events_CoreScenarioEvent.INITED = "scenario_inited";
com_sq_m3lib_events_CoreScenarioEvent.AIM = "scenario_target_aim";
com_sq_m3lib_events_CoreScenarioEvent.STEP = "scenario_step_changed";
com_sq_m3lib_events_CoreScenarioEvent.FINISHED = "scenario_finished";
com_sq_m3lib_events_CoreShuffleEvent.SHUFFLED = "shuffled";
com_sq_m3lib_events_CoreTargetUpdateEvent.ONE_TARGET_UPDATED = "one_target_updated";
com_sq_m3lib_events_CoreTargetUpdateEvent.ONE_TARGET_COMPLETED = "one_target_completed";
com_sq_m3lib_events_CoreTargetUpdateEvent.ALL_TARGETS_COMPLETED = "all_targets_completed";
com_sq_m3lib_events_CoreTargetUpdateEvent.TARGET_FAILED = "target_failed";
com_sq_m3lib_events_CoreTargetUpdateEvent.MOVES_CHANGED = "moves_count_changed";
com_sq_m3lib_events_CoreViewPointUpdateEvent.VIEW_POINT_UPDATED = "view_point_updated";
com_sq_m3lib_game_gameTargets_targetProgress_GameTargetProgress.HIGH_CELL_PRIORITY = 2;
com_sq_m3lib_karma_KarmaManager.PROVIDER_DEBUFF_NAME = "km_db";
com_sq_m3lib_karma_KarmaManager.PROVIDER_LIGHT_BUFF_NAME = "km_lb";
com_sq_m3lib_karma_KarmaManager.PROVIDER_HIGH_BUFF_NAME = "km_hb";
com_sq_m3lib_karma_karmaActions_HighBuffSuperItemsSpawnKarmaAction.MIN_COMBINATION_CANDIDATES = 3;
com_sq_m3lib_karma_karmaActions_DebuffChangeSpawnItemsKarmaAction.spawnProbs = [5,4,3,2,1,1,1];
com_sq_m3lib_karma_karmaActions_HighBuffActivationSuperItemsKarmaAction.ACTION_STEP_LENGTH = 3;
com_sq_m3lib_karma_karmaActions_HighBuffActivationSuperItemsKarmaAction.ACTION_INIT_STEP = 2;
com_sq_m3lib_karma_KarmaSet.KARMA_ACTION_CLASS_PATH = "com.sq.m3lib.karma.karmaActions.";
com_sq_m3lib_karma_KarmaSet.linkers = [com_sq_m3lib_karma_karmaActions_UselessSuggestionKarmaAction,com_sq_m3lib_karma_karmaActions_UsefulSuggestionKarmaAction,com_sq_m3lib_karma_karmaActions_HighBuffSuperItemsSpawnKarmaAction,com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombReachTargetKarmaAction,com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectTargetKarmaAction,com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombDiscoverTargetKarmaAction,com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCollectLockedTargetKarmaAction,com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveSpecialTargetKarmaAction,com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveViralTargetKarmaAction,com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombRemoveDoubleTargetKarmaAction,com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombCaptureTargetKarmaAction,com_sq_m3lib_karma_karmaActions_DebuffChangeHomingBombScoreTargetKarmaAction,com_sq_m3lib_karma_karmaActions_DebuffChangeSpawnItemsKarmaAction,com_sq_m3lib_karma_karmaActions_DebuffMatchColorBombKarmaAction,com_sq_m3lib_karma_karmaActions_DebuffRowSpawnItemsKarmaAction,com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnItemsKarmaAction,com_sq_m3lib_karma_karmaActions_LightBuffChangeSpawnCollectItemsKarmaAction,com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsKarmaAction,com_sq_m3lib_karma_karmaActions_HighBuffChangeSpawnItemsCollectKarmaAction,com_sq_m3lib_karma_karmaActions_BuffMatchColorBombKarmaAction,com_sq_m3lib_karma_karmaActions_LightBuffSpawnSuperItemsKarmaAction,com_sq_m3lib_karma_karmaActions_HighBuffActivationSuperItemsKarmaAction,com_sq_m3lib_karma_karmaActions_LightBuffSpawnLineBombKarmaAction];
com_sq_m3lib_levelParser_LevelParserConfig.cellConfigMap = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[0] = { isVoid : 1};
	_g.h[1] = { isVoid : 0};
	_g.h[2] = { item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_ITEM_DESCRIPTION};
	_g.h[3] = { blocker : [{ className : "blocker_lock", step : 1, priority : 0}]};
	_g.h[4] = { item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_COLOR_BOMB_DESCRIPTION};
	_g.h[5] = { item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_VERTICAL_BOMB_DESCRIPTION};
	_g.h[6] = { item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HORIZONTAL_BOMB_DESCRIPTION};
	_g.h[7] = { item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_BOMB9_DESCRIPTION};
	_g.h[51] = { blocker : [{ className : "blocker_simple_viral", step : 1, maxStep : 1, priority : 0}]};
	_g.h[52] = { blocker : [{ className : "blocker_simple", step : 1, priority : 0}]};
	_g.h[53] = { blocker : [{ className : "blocker_simple", step : 2, priority : 0}]};
	_g.h[54] = { blocker : [{ className : "blocker_simple", step : 3, priority : 0}]};
	_g.h[55] = { blocker : [{ className : "blocker_simple", step : 4, priority : 0}]};
	_g.h[56] = { blocker : [{ className : "blocker_simple", step : 5, priority : 0}]};
	_g.h[164] = { blocker : [{ className : "blocker_special_lock", step : 1, priority : 0}], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SPECIAL_LOCKED_ITEM_DESCRIPTION};
	_g.h[165] = { blocker : [{ className : "blocker_special_lock", step : 2, priority : 0}], item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SPECIAL_LOCKED_ITEM_DESCRIPTION};
	_g.h[200] = { cover : { step : 1}};
	_g.h[201] = { cover : { step : 2}};
	_g.h[270] = { blocker : [{ className : "blocker_special_viral", step : 1, maxStep : 2, priority : 0}]};
	_g.h[271] = { blocker : [{ className : "blocker_special_viral", step : 2, maxStep : 2, priority : 0}]};
	_g.h[300] = { captured : { type : "player_captured"}};
	_g.h[320] = { gravityChanged : 1};
	_g.h[340] = { item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_GRAVITY_CHANGER_ITEM_DESCRIPTION};
	_g.h[360] = { item : com_sq_m3lib_coreSettings_CoreClassesDictionary.COLLECTABLE_ITEM_DESCRIPTION};
	_g.h[400] = { item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_MULTICOLORING_BOMB_DESCRIPTION};
	_g.h[420] = { item : com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION};
	_g.h[500] = { blocker : [{ className : "blocker_special_lock", step : 3, priority : 0}]};
	_g.h[501] = { blocker : [{ className : "blocker_special_lock", step : 4, priority : 0}]};
	_g.h[502] = { blocker : [{ className : "blocker_special_lock", step : 5, priority : 0}]};
	_g.h[503] = { blocker : [{ className : "blocker_special_lock", step : 6, priority : 0}]};
	_g.h[504] = { blocker : [{ className : "blocker_special_lock", step : 1, priority : 0}]};
	_g.h[505] = { blocker : [{ className : "blocker_special_lock", step : 2, priority : 0}]};
	_g.h[550] = { blocker : [{ className : "blocker_ice", step : 1, priority : 0}]};
	_g.h[551] = { blocker : [{ className : "blocker_ice", step : 2, priority : 0}]};
	_g.h[552] = { blocker : [{ className : "blocker_ice", step : 3, priority : 0}]};
	_g.h[553] = { blocker : [{ className : "blocker_ice", step : 4, priority : 0}]};
	_g.h[554] = { blocker : [{ className : "blocker_ice", step : 5, priority : 0}]};
	_g.h[555] = { blocker : [{ className : "blocker_ice", step : 6, priority : 0}]};
	_g.h[600] = { blocker : [{ className : "blocker_double_simple_viral", step : 1, maxStep : 2, priority : 0}]};
	_g.h[601] = { blocker : [{ className : "blocker_double_simple_viral", step : 2, maxStep : 2, priority : 0}]};
	_g.h[650] = { item : com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER_DESCRIPTION};
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_1X2 = { classname : "rectObject", size : { x : 1, y : 2}, points : []};
com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_2X4 = { classname : "rectObject", size : { x : 2, y : 4}, points : []};
com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_3X6 = { classname : "rectObject", size : { x : 3, y : 6}, points : []};
com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_2X1 = { classname : "rectObject", size : { x : 2, y : 1}, points : []};
com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_4X2 = { classname : "rectObject", size : { x : 4, y : 2}, points : []};
com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_6X3 = { classname : "rectObject", size : { x : 6, y : 3}, points : []};
com_sq_m3lib_levelParser_LevelParserConfig.hiddenObjectConfigMap = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[211] = com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_1X2;
	_g.h[212] = com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_2X4;
	_g.h[213] = com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_3X6;
	_g.h[214] = com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_2X1;
	_g.h[215] = com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_4X2;
	_g.h[216] = com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_6X3;
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_levelParser_LevelParserConfig.hiddenObjectRotationConfig = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_2X1;
		if(__map_reserved["1:2"] != null) {
			_g.setReserved("1:2",value);
		} else {
			_g.h["1:2"] = value;
		}
	}
	{
		var value1 = com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_4X2;
		if(__map_reserved["2:4"] != null) {
			_g.setReserved("2:4",value1);
		} else {
			_g.h["2:4"] = value1;
		}
	}
	{
		var value2 = com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_6X3;
		if(__map_reserved["3:6"] != null) {
			_g.setReserved("3:6",value2);
		} else {
			_g.h["3:6"] = value2;
		}
	}
	{
		var value3 = com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_1X2;
		if(__map_reserved["2:1"] != null) {
			_g.setReserved("2:1",value3);
		} else {
			_g.h["2:1"] = value3;
		}
	}
	{
		var value4 = com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_2X4;
		if(__map_reserved["4:2"] != null) {
			_g.setReserved("4:2",value4);
		} else {
			_g.h["4:2"] = value4;
		}
	}
	{
		var value5 = com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_3X6;
		if(__map_reserved["6:3"] != null) {
			_g.setReserved("6:3",value5);
		} else {
			_g.h["6:3"] = value5;
		}
	}
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_levelParser_LevelParserConfig.reachCellConfig = 361;
com_sq_m3lib_levelParser_LevelParserConfig.tileColorConfigMap = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[410] = 4;
	_g.h[411] = 2;
	_g.h[412] = 1;
	_g.h[413] = 3;
	_g.h[414] = 0;
	_g.h[415] = 6;
	_g.h[416] = 5;
	_g.h[417] = 7;
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_levelParser_LevelParserConfig.spawnerConfigMap = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[103] = 2;
	_g.h[104] = 0;
	_g.h[105] = 1;
	_g.h[106] = 3;
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_levelParser_LevelParserConfig.ammunitionConfigMap = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = com_sq_m3lib_coreSettings_CoreClassesDictionary.ITEM_LOCKER_DESCRIPTION;
		if(__map_reserved.liquorice != null) {
			_g.setReserved("liquorice",value);
		} else {
			_g.h["liquorice"] = value;
		}
	}
	{
		var value1 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_GRAVITY_CHANGER_ITEM_DESCRIPTION;
		if(__map_reserved.SodaBottle != null) {
			_g.setReserved("SodaBottle",value1);
		} else {
			_g.h["SodaBottle"] = value1;
		}
	}
	if(__map_reserved.normalItems != null) {
		_g.setReserved("normalItems",null);
	} else {
		_g.h["normalItems"] = null;
	}
	{
		var value2 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_BOMB9_DESCRIPTION;
		if(__map_reserved.wrappedCandy != null) {
			_g.setReserved("wrappedCandy",value2);
		} else {
			_g.h["wrappedCandy"] = value2;
		}
	}
	{
		var value3 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_VERTICAL_BOMB_DESCRIPTION;
		if(__map_reserved.verticalStripedCandy != null) {
			_g.setReserved("verticalStripedCandy",value3);
		} else {
			_g.h["verticalStripedCandy"] = value3;
		}
	}
	{
		var value4 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HORIZONTAL_BOMB_DESCRIPTION;
		if(__map_reserved.horizontalStripedCandy != null) {
			_g.setReserved("horizontalStripedCandy",value4);
		} else {
			_g.h["horizontalStripedCandy"] = value4;
		}
	}
	{
		var value5 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_COLOR_BOMB_DESCRIPTION;
		if(__map_reserved.colorBomb != null) {
			_g.setReserved("colorBomb",value5);
		} else {
			_g.h["colorBomb"] = value5;
		}
	}
	if(__map_reserved.marchingBear != null) {
		_g.setReserved("marchingBear",null);
	} else {
		_g.h["marchingBear"] = null;
	}
	{
		var value6 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_MULTICOLORING_BOMB_DESCRIPTION;
		if(__map_reserved.coloring_candy != null) {
			_g.setReserved("coloring_candy",value6);
		} else {
			_g.h["coloring_candy"] = value6;
		}
	}
	{
		var value7 = com_sq_m3lib_coreSettings_CoreClassesDictionary.COLLECTABLE_ITEM_DESCRIPTION;
		if(__map_reserved.floatingNut != null) {
			_g.setReserved("floatingNut",value7);
		} else {
			_g.h["floatingNut"] = value7;
		}
	}
	{
		var value8 = com_sq_m3lib_coreSettings_CoreClassesDictionary.SIMPLE_HOMING_ITEM_DESCRIPTION;
		if(__map_reserved.fish != null) {
			_g.setReserved("fish",value8);
		} else {
			_g.h["fish"] = value8;
		}
	}
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_levelParser_LevelParserConfig.HIDDEN_OBJECT_TASK = "GiantBears";
com_sq_m3lib_levelParser_LevelParserConfig.COLLECT_LOCKED_ITEM_TASK = "Honey";
com_sq_m3lib_levelParser_LevelParserConfig.COLLECT_VIRAL_GUM_TASK = "BubbleGum";
com_sq_m3lib_levelParser_LevelParserConfig.CAPTURE_TASK = "PaintBattleMode";
com_sq_m3lib_levelParser_LevelParserConfig.COLLECT_ITEM_TASK = "FloatingNutsMode";
com_sq_m3lib_levelParser_LevelParserConfig.COLLECT_GRAVITY_CHANGERS_TASK = "SodaToTheBrim";
com_sq_m3lib_levelParser_LevelParserConfig.COLLECT_VIRAL_BLOCKER_TASK = "ChocolateNemesis";
com_sq_m3lib_levelParser_LevelParserConfig.LEMONADE_SEA_TASK_NAME = "LemonadeSeaTask";
com_sq_m3lib_levelParser_LevelParserConfig.GIANT_BEAR_TASK_NAME = "Bear Memory";
com_sq_m3lib_levelParser_LevelParserConfig.GRAVITY_CHANGE_TASKS = ["FloatingNutsMode","SodaToTheBrim"];
com_sq_m3lib_levelParser_LevelParserConfig.tasksConfigMap = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved.GiantBears != null) {
		_g.setReserved("GiantBears","discover");
	} else {
		_g.h["GiantBears"] = "discover";
	}
	if(__map_reserved.Honey != null) {
		_g.setReserved("Honey","collect_locked_item");
	} else {
		_g.h["Honey"] = "collect_locked_item";
	}
	if(__map_reserved.BubbleGum != null) {
		_g.setReserved("BubbleGum","remove_special_viral_blocker");
	} else {
		_g.h["BubbleGum"] = "remove_special_viral_blocker";
	}
	if(__map_reserved.PaintBattleMode != null) {
		_g.setReserved("PaintBattleMode","capture_cells");
	} else {
		_g.h["PaintBattleMode"] = "capture_cells";
	}
	if(__map_reserved.FloatingNutsMode != null) {
		_g.setReserved("FloatingNutsMode","reach_target_cell");
	} else {
		_g.h["FloatingNutsMode"] = "reach_target_cell";
	}
	if(__map_reserved.SodaToTheBrim != null) {
		_g.setReserved("SodaToTheBrim","collect_item");
	} else {
		_g.h["SodaToTheBrim"] = "collect_item";
	}
	if(__map_reserved.ChocolateNemesis != null) {
		_g.setReserved("ChocolateNemesis","remove_viral_blocker");
	} else {
		_g.h["ChocolateNemesis"] = "remove_viral_blocker";
	}
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_levelParser_LevelParserConfig.colorConfigMap = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[7] = "black";
	_g.h[6] = "purple";
	_g.h[4] = "cyan";
	_g.h[5] = "blue";
	_g.h[3] = "green";
	_g.h[2] = "yellow";
	_g.h[1] = "orange";
	_g.h[0] = "red";
	_g.h[-1] = "none";
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_levelParser_LevelParserConfig.colorConvertConfigMap = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[8] = 7;
	_g.h[7] = 5;
	_g.h[6] = 6;
	_g.h[5] = 0;
	_g.h[4] = 3;
	_g.h[3] = 1;
	_g.h[2] = 2;
	_g.h[1] = 4;
	_g.h[0] = -1;
	$r = _g;
	return $r;
}(this));
com_sq_m3lib_levelParser_LevelParserConfig.level = "{\"gameModeTasks\":[{\"name\":\"ItemToTargetTask\"},{\"autoFillLemonade\":false,\"name\":\"LemonadeSeaTask\",\"spawnLemonadeBalloonAfterNumSwitches\":0,\"numLemonadeDropsPerSplash\":9,\"maxNumLemonadeBalloonsOnScreen\":0,\"manualFillRows\":[[[14,7],[13,7],[12,7],[11,7],[10,7],[9,7],[8,7],[7,7],[6,7],[5,7],[4,7],[3,7],[2,7],[1,7],[0,7]],[[14,6],[13,6],[12,6],[11,6],[10,6],[9,6],[8,6],[7,6],[6,6],[5,6],[4,6],[3,6],[2,6],[1,6],[0,6]],[[13,5],[12,5],[11,5],[10,5],[9,5],[6,5],[5,5],[4,5],[3,5],[2,5],[1,5],[0,5]],[[14,4],[13,4],[12,4],[11,4],[10,4],[9,4],[8,4],[6,4],[5,4],[4,4],[3,4],[2,4],[1,4],[0,4]],[[14,3],[13,3],[12,3],[11,3],[10,3],[9,3],[8,3],[5,3],[4,3],[3,3],[2,3],[1,3]],[[14,2],[13,2],[12,2],[11,2],[10,2],[9,2],[8,2],[6,2],[5,2],[4,2],[3,2],[2,2],[1,2],[0,2]],[[6,1],[5,1],[4,1],[3,1],[2,1],[1,1],[0,1]],[[6,0],[5,0],[4,0],[3,0],[2,0],[1,0],[0,0]]],\"minNumLemonadeBalloonsOnScreen\":0}],\"movesLimit\":32,\"tileMap\":[[[2,104],[2,104],[2,104],[104,340,3],[2,104],[2,104],[2,104],[0],[0],[0],[0],[0],[0],[0],[0]],[[2],[340,3],[2],[2],[2],[340,3],[2],[0],[0],[0],[0],[0],[0],[0],[0]],[[2],[2],[2],[340,3],[2],[2],[2],[0],[2,104],[2,104],[2,104],[2,104],[2,104],[2,104],[2,104]],[[0],[2,361],[2,361],[2,361],[2,361],[2,361],[0],[0],[2],[2],[2],[420,3],[2],[2],[2]],[[2],[2],[2],[2],[2],[2],[2],[0],[340,3],[2],[2],[2],[2],[2],[340,3]],[[2],[2],[2],[2],[52],[52],[53],[0],[0],[361,52],[361,52],[2,361],[2,361],[2,361],[0]],[[2],[2],[2],[2],[52],[340],[53],[53],[53],[340],[52],[2],[2],[2],[2]],[[2],[2],[2],[2],[53],[53],[53],[53],[53],[53],[53],[2],[2],[2],[2]],[[2,320],[2,320],[2,320],[2,320],[320,53],[320,53],[320,53],[400,320],[320,53],[320,340],[320,53],[2,320],[2,320],[2,320],[2,320]],[[2,320],[2,320],[2,320],[2,320],[320,53],[320,53],[320,53],[320,53],[320,53],[320,53],[320,53],[2,320],[2,320],[2,320],[2,320]],[[2,320],[2,320],[2,320],[2,320],[320,52],[320,340],[320,53],[320,103,53],[320,53],[320,420],[320,52],[2,320],[2,320],[2,320],[2,320]],[[2,320],[2,320],[2,320],[2,320],[320,52],[320,52],[320,53],[0],[320,53],[320,52],[320,52],[2,320],[2,320],[2,320],[2,320]],[[2,320,103],[2,320,103],[2,320,103],[360,320,103],[2,320,103],[2,320,103],[2,320,103],[0],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320]],[[0],[0],[0],[0],[0],[0],[0],[0],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320]],[[0],[0],[0],[0],[0],[0],[0],[0],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320]],[[0],[0],[0],[0],[0],[0],[0],[0],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320]],[[0],[0],[0],[0],[0],[0],[0],[0],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320]],[[0],[0],[0],[0],[0],[0],[0],[0],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320]],[[0],[0],[0],[0],[0],[0],[0],[0],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320]],[[0],[0],[0],[0],[0],[0],[0],[0],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320],[2,320]],[[0],[0],[0],[0],[0],[0],[0],[0],[2,320,103],[2,320,103],[2,320,103],[360,320,103],[2,320,103],[2,320,103],[2,320,103]]],\"candyCannons\":[{\"coordinate\":[0,0],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[1,0],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[2,0],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[3,0],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[4,0],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[5,0],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[6,0],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[8,2],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[9,2],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[10,2],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[11,2],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[12,2],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[13,2],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[14,2],\"ammunition\":[],\"normalType\":104,\"colors\":[]},{\"coordinate\":[0,12],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[1,12],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[2,12],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[3,12],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[4,12],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[5,12],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[6,12],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[8,20],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[9,20],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[10,20],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[11,20],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[12,20],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[13,20],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[14,20],\"ammunition\":[],\"normalType\":103,\"colors\":[]},{\"coordinate\":[7,10],\"ammunition\":[],\"normalType\":103,\"colors\":[]}],\"showAcceleration\":0,\"protocolVersion\":\"7.0\",\"starlevel\":[3000,35000,55000],\"portalTubes\":[],\"gameModeName\":\"FloatingNutsMode\",\"cameraTargets\":[[11,16],[11,15],[11,14],[11,13],[11,12],[11,11],[11,10],[11,9],[11,8],[11,7],[11,6],[3,8],[3,7],[3,6],[3,5],[3,4]],\"scoreTargets\":[3000,35000,55000],\"minNumLiquoriceOnScreen\":0,\"maxNumLiquoriceOnScreen\":0,\"reverseLevelIntroCameraScroll\":0,\"numberOfItemColors\":6,\"colorWeights\":{},\"accelerationMap\":[[[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,0],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,0],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,0]],[[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2]]],\"preferredColors\":[],\"portals\":[],\"useRandomColors\":1,\"levelId\":29,\"tutorialsToShow\":[],\"randomSeed\":0,\"cyanColorBombtarget\":100,\"liquoriceSpawnRate\":0,\"showIntroCameraScroll\":true}";
com_sq_m3lib_log_CoreEventLogger.START = "LevelStart";
com_sq_m3lib_log_CoreEventLogger.SPAWN = "ItemSpawn";
com_sq_m3lib_log_CoreEventLogger.DESTROY = "ItemDestroy";
com_sq_m3lib_log_CoreEventLogger.EXPLOSION_PLAN_ACTIVATED = "ExplosionPlanActivated";
com_sq_m3lib_log_CoreEventLogger.COMBINATION_DESTROY = "CombinationDestroy";
com_sq_m3lib_log_CoreEventLogger.SCORE = "IncreaseScore";
com_sq_m3lib_log_CoreEventLogger.USER_MOVE = "UserMove";
com_sq_m3lib_log_CoreEventLogger.ITEM_MOVE = "ItemMove";
com_sq_m3lib_log_CoreEventLogger.SHUFFLE = "Shuffle";
com_sq_m3lib_log_CoreEventLogger.FINISH = "LevelFinished";
com_sq_m3lib_log_CoreEventLogger.VIEW_POINT_CHANGED = "ViewPointChanged";
com_sq_m3lib_log_CoreEventLogger.BOOSTER_ACTIVATED = "BoosterActivated";
com_sq_m3lib_log_CoreEventLogger.CAPTURED = "CellCaptured";
com_sq_m3lib_log_CoreEventLogger.GRAVITY_CHANGED = "CellGravityChanged";
com_sq_m3lib_log_CoreEventLogger.COVER_CHANGED = "CellCoverChanged";
com_sq_m3lib_log_CoreEventLogger.CELL_COVER_REMOVED = "CellCoverRemoved";
com_sq_m3lib_log_CoreEventLogger.HIDDEN_OBJECT_FOUND = "HiddenObjectFound";
com_sq_m3lib_log_CoreEventLogger.TARGET_PROGRESS = "TargetProgress";
com_sq_m3lib_log_CoreEventLogger.TARGET_FINISHED = "TargetFinished";
com_sq_m3lib_log_CoreEventLogger.BLOCKER_DESTROY = "BlockerDestroy";
com_sq_m3lib_log_CoreEventLogger.BLOCKER_SPAWNED = "BlocketrSpawned";
com_sq_m3lib_log_CoreEventLogger.CHEAT_ACTIVATED = "CheatActivated";
com_sq_m3lib_log_CoreEventLogger.LEVEL_FINISH_SCENARIO_ACTIVATED = "LevelFinishScenarioActivated";
com_sq_m3lib_log_CoreEventLogger.LEVEL_FINISH_SCENARIO_COMPLETE = "LevelFinishScenarioComplete";
com_sq_m3lib_log_CoreEventLogger.LEVEL_FAIL_ADD_MOVES = "LevelFailAddMoves";
com_sq_m3lib_log_CoreEventLogger.NEW_COMBO_ITEM = "NewComboItem";
com_sq_m3lib_log_CoreEventLogger.BOARD_STABLE = "stable";
com_sq_m3lib_log_CoreEventLogger.EVENT_ADDED = "EventAdded";
com_sq_m3lib_math_CoreMathUtils.MAX_INT = 2147483647;
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = { }.toString;
com_sq_m3lib_levelParser_LevelParser.main();
})(typeof self != "undefined" ? self : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);